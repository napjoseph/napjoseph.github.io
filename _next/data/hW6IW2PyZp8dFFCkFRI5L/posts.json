{"pageProps":{"articles":[{"title":"Create a Remote Web Development Environment Using Linode","layout":"posts","slug":"create-a-remote-web-development-environment-using-linode","frontMatter":{"title":"Create a Remote Web Development Environment Using Linode","publishedDate":"2021-04-09T19:37:00Z","tags":["Linode","Keybase"],"description":"","disableComments":false},"rawContent":"\nIn this guide, we will create our own remote web development environment using [Linode](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d).\n\n## Pre-requisities\n\n- A terminal with Bash or something similar. For Windows, you can use [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701) or [Git Bash](https://git-scm.com/downloads). You can check [my current settings for Windows Terminal](https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md).\n- Your local SSH key pair. See [GitHub's guide](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) for more details.\n- A [GitHub](https://github.com) account.\n- A [Keybase](https://keybase.io/) account for storing your GPG keys.\n- A [Linode account](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d). You can go to their [docs](https://www.linode.com/docs/guides/getting-started/) to get a $100 promo code (or you can directly use [my referral code](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d)).\n- [Visual Studio Code](https://code.visualstudio.com/).\n\n## Generate SSH Key for your local machine\n\nFollow [GitHub's guide](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) to generate your SSH key pair. For Windows users, you may need to check this [guide from Microsoft](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement) to enable SSH in your machine.\n\nAfterwards, add the key to your GitHub and Linode account.\n\n## Generate SSH Key for your new Linode instance\n\nCreate a new SSH Key for your new Linode instance. Save this for now as we'll use this later.\n\n## Generate GPG Key\n\nFollow this [guide to generate a GPG key using Keybase](https://github.com/pstadler/keybase-gpg-github).\n\n> **NOTE**: For Windows, if you already installed the Keybase app, you should have the CLI app will be ready to use (no need to install via brew).\n\nAgain, you need to add this key to your GitHub account.\n\n## Creating your server instance using Linode's StackScripts\n\n- [ ] Open the [StackScripts](https://cloud.linode.com/stackscripts/account) page and click **Create StackScript**.\n- [ ] Copy the contents of [web.sh](https://github.com/napjoseph/remote/blob/main/linode/web.sh). This will only work on **Debian 10**.\n- [ ] Click **Deploy New Linode**.\n- [ ] Fill out the fields and then click **Create Linode**.\n- [ ] Wait for your instance to be provisioned.\n- [ ] If all goes well, the status will change to **Running** and you can then connect to your instance.\n\nThis should install the following on your instance:\n\n- [x] [zsh](https://www.zsh.org/), [oh-my-zsh](https://ohmyz.sh/), [powerlevel10k](https://github.com/romkatv/powerlevel10k), [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions), and [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n- [x] [Keybase](https://keybase.io)\n- [x] [Go](https://golang.org/)\n- [x] [Node Version Manager](https://github.com/nvm-sh/nvm)\n- [x] [pyenv](https://github.com/pyenv/pyenv)\n- [x] [Docker](https://www.docker.com/)\n- [x] [byobu](https://byobu.org)\n- [x] [spacevim](https://spacevim.org)\n- [x] [bat](https://github.com/sharkdp/bat)\n- [x] [direnv](https://github.com/direnv/direnv)\n- [x] [stow](https://www.gnu.org/software/stow)\n- [x] [Homebrew](https://brew.sh)\n\n## Connecting via SSH\n\nStart the ssh-agent in the background:\n\n```shell note=for%20linux/osx:\n$ eval `ssh-agent -s`\n> Agent pid 59566\n```\n\n```powershell note=for%20windows:\nStart-Service ssh-agent\n```\n\nAdd your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.\n\n```shell\nssh-add ~/.ssh/id_ed25519\n```\n\nThen connect via SSH:\n\n```shell\nssh <NON_ROOT_USERNAME>@<LINODE_IPV4_ADDRESS> -p <SSH_PORT>\n```\n\nAlternatively, you can create a config file to make it easier to connect to your remote host.\n\n```text filename=~/.ssh/config\nHost <ALIAS>\n  User <NON_ROOT_USERNAME>\n  HostName <LINODE_IPV4_ADDRESS>\n  Port <SSH_PORT>\n  IdentityFile <PRIVATE_KEY_FILE_LOCATION>\n```\n\n```shell\nssh <ALIAS>\n```\n\nCongratulations! You can now connect to your remote server instance.\n\n> **NOTE**: You can already connect via SSH even if the StackScript has not yet been completed. To check its status, you can check the logs using `cat /var/log/stackscript.log`.\n\n## Additional setup\n\nThe essentials are already installed in your instance. However, we need to configure a few applications we will use.\n\n### Configuring your zsh theme\n\n> **IMPORTANT**: You also need to install the [recommended fonts](https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k) for the theme to display properly.\n\n> **IMPORTANT**: If you are using Windows, you can use [Windows Terminal](https://microsoft.com/en-us/p/windows-terminal/9n0dx20hk701). You can check [my current settings for Windows Terminal](https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md).\n\nIf you enabled `UPGRADE_SHELL_EXPERIENCE`, [zsh](https://www.zsh.org/), [oh-my-zsh](https://ohmyz.sh/), and the [powerlevel10k zsh theme](https://github.com/romkatv/powerlevel10k) will be installed.\n\nOn your first login via SSH, it will ask you to configure your theme. To run the wizard again, you can run:\n\n```shell\np10k configure\n```\n\n### Fixing your SSH Private Key\n\nDue to StackScripts not yet having a multiple-line UDF, the line breaks for our private key was removed.\n\nUpdate the `.ssh/$HOSTNAME` with the correct version.\n\n### Configure Keybase\n\n```shell\n# login\nkeybase login\n\n# check if you have more than one key saved\nkeybase pgp export\n\n# if yes, specify the id in the commands below\n# keybase pgp export -q 31DBBB1F6949DA68 | gpg --import\n\n# import public key\nkeybase pgp export | gpg --import\n\n# import private key\nkeybase pgp export --secret | gpg --allow-secret-key-import --import\n\n# check imported key\ngpg --list-secret-keys --keyid-format LONG\n# /Users/pstadler/.gnupg/secring.gpg\n# ----------------------------------\n# pub   2048R/DEADBEEF 2012-08-16\n# uid                  Name (Comment) <email@host.tld>\n# sub   2048R/86D2FAC6 2012-08-16\n```\n\nNotice the hash `DEADBEEF`. We will use this in the next section.\n\n### Configure Git\n\n```shell\n# add your basic information\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_name@example.com\"\n\n# sign all commits using your GPG key\ngit config --global user.signingkey DEADBEEF\ngit config --global commit.gpgsign true\n```\n\n## Repository\n\nYou can check the [`napjoseph/remote` repository](https://github.com/napjoseph/remote/) for the updated code.\n","excerpt":"\nIn this guide, we will create our own remote web development environment using [Linode](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d).\n\n## Pre-requisities\n\n- A terminal with Bash or something similar. For Windows, you can use [Windows Terminal](https://www.microsoft.com/en-us/...","serializedContent":{"compiledSource":"var h=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var l=(t,a,i)=>a in t?h(t,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[a]=i,e=(t,a)=>{for(var i in a||(a={}))r.call(a,i)&&l(t,i,a[i]);if(o)for(var i of o(a))s.call(a,i)&&l(t,i,a[i]);return t},p=(t,a)=>u(t,m(a));var c=(t,a)=>{var i={};for(var n in t)r.call(t,n)&&a.indexOf(n)<0&&(i[n]=t[n]);if(t!=null&&o)for(var n of o(t))a.indexOf(n)<0&&s.call(t,n)&&(i[n]=t[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:t}=n,a=c(n,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In this guide, we will create our own remote web development environment using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"Linode\"),\".\"),mdx(\"h2\",e({},{id:\"pre-requisities\"}),\"Pre-requisities\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"A terminal with Bash or something similar. For Windows, you can use \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\"}),\"Windows Terminal\"),\" or \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://git-scm.com/downloads\"}),\"Git Bash\"),\". You can check \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md\"}),\"my current settings for Windows Terminal\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Your local SSH key pair. See \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\"}),\"GitHub's guide\"),\" for more details.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com\"}),\"GitHub\"),\" account.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://keybase.io/\"}),\"Keybase\"),\" account for storing your GPG keys.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"Linode account\"),\". You can go to their \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/docs/guides/getting-started/\"}),\"docs\"),\" to get a $100 promo code (or you can directly use \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"my referral code\"),\").\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://code.visualstudio.com/\"}),\"Visual Studio Code\"),\".\")),mdx(\"h2\",e({},{id:\"generate-ssh-key-for-your-local-machine\"}),\"Generate SSH Key for your local machine\"),mdx(\"p\",null,\"Follow \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\"}),\"GitHub's guide\"),\" to generate your SSH key pair. For Windows users, you may need to check this \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement\"}),\"guide from Microsoft\"),\" to enable SSH in your machine.\"),mdx(\"p\",null,\"Afterwards, add the key to your GitHub and Linode account.\"),mdx(\"h2\",e({},{id:\"generate-ssh-key-for-your-new-linode-instance\"}),\"Generate SSH Key for your new Linode instance\"),mdx(\"p\",null,\"Create a new SSH Key for your new Linode instance. Save this for now as we'll use this later.\"),mdx(\"h2\",e({},{id:\"generate-gpg-key\"}),\"Generate GPG Key\"),mdx(\"p\",null,\"Follow this \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pstadler/keybase-gpg-github\"}),\"guide to generate a GPG key using Keybase\"),\".\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": For Windows, if you already installed the Keybase app, you should have the CLI app will be ready to use (no need to install via brew).\")),mdx(\"p\",null,\"Again, you need to add this key to your GitHub account.\"),mdx(\"h2\",e({},{id:\"creating-your-server-instance-using-linodes-stackscripts\"}),\"Creating your server instance using Linode's StackScripts\"),mdx(\"ul\",e({},{className:\"contains-task-list\"}),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Open the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://cloud.linode.com/stackscripts/account\"}),\"StackScripts\"),\" page and click \",mdx(\"strong\",{parentName:\"li\"},\"Create StackScript\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Copy the contents of \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/napjoseph/remote/blob/main/linode/web.sh\"}),\"web.sh\"),\". This will only work on \",mdx(\"strong\",{parentName:\"li\"},\"Debian 10\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Click \",mdx(\"strong\",{parentName:\"li\"},\"Deploy New Linode\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Fill out the fields and then click \",mdx(\"strong\",{parentName:\"li\"},\"Create Linode\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Wait for your instance to be provisioned.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"If all goes well, the status will change to \",mdx(\"strong\",{parentName:\"li\"},\"Running\"),\" and you can then connect to your instance.\")),mdx(\"p\",null,\"This should install the following on your instance:\"),mdx(\"ul\",e({},{className:\"contains-task-list\"}),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.zsh.org/\"}),\"zsh\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://ohmyz.sh/\"}),\"oh-my-zsh\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/romkatv/powerlevel10k\"}),\"powerlevel10k\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/zsh-users/zsh-autosuggestions\"}),\"zsh-autosuggestions\"),\", and \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/zsh-users/zsh-syntax-highlighting\"}),\"zsh-syntax-highlighting\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://keybase.io\"}),\"Keybase\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://golang.org/\"}),\"Go\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/nvm-sh/nvm\"}),\"Node Version Manager\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pyenv/pyenv\"}),\"pyenv\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.docker.com/\"}),\"Docker\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://byobu.org\"}),\"byobu\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://spacevim.org\"}),\"spacevim\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/sharkdp/bat\"}),\"bat\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/direnv/direnv\"}),\"direnv\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.gnu.org/software/stow\"}),\"stow\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://brew.sh\"}),\"Homebrew\"))),mdx(\"h2\",e({},{id:\"connecting-via-ssh\"}),\"Connecting via SSH\"),mdx(\"p\",null,\"Start the ssh-agent in the background:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\",metastring:\"note=for%20linux/osx:\",note:\"for%20linux/osx:\"}),\"$ eval `ssh-agent -s`\\n> Agent pid 59566\\n\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-powershell\",metastring:\"note=for%20windows:\",note:\"for%20windows:\"}),`Start-Service ssh-agent\n`)),mdx(\"p\",null,\"Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh-add ~/.ssh/id_ed25519\n`)),mdx(\"p\",null,\"Then connect via SSH:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh <NON_ROOT_USERNAME>@<LINODE_IPV4_ADDRESS> -p <SSH_PORT>\n`)),mdx(\"p\",null,\"Alternatively, you can create a config file to make it easier to connect to your remote host.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-text\",metastring:\"filename=~/.ssh/config\",filename:\"~/.ssh/config\"}),`Host <ALIAS>\n  User <NON_ROOT_USERNAME>\n  HostName <LINODE_IPV4_ADDRESS>\n  Port <SSH_PORT>\n  IdentityFile <PRIVATE_KEY_FILE_LOCATION>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh <ALIAS>\n`)),mdx(\"p\",null,\"Congratulations! You can now connect to your remote server instance.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": You can already connect via SSH even if the StackScript has not yet been completed. To check its status, you can check the logs using \",mdx(\"inlineCode\",{parentName:\"p\"},\"cat /var/log/stackscript.log\"),\".\")),mdx(\"h2\",e({},{id:\"additional-setup\"}),\"Additional setup\"),mdx(\"p\",null,\"The essentials are already installed in your instance. However, we need to configure a few applications we will use.\"),mdx(\"h3\",e({},{id:\"configuring-your-zsh-theme\"}),\"Configuring your zsh theme\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"IMPORTANT\"),\": You also need to install the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k\"}),\"recommended fonts\"),\" for the theme to display properly.\")),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"IMPORTANT\"),\": If you are using Windows, you can use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\"}),\"Windows Terminal\"),\". You can check \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md\"}),\"my current settings for Windows Terminal\"),\".\")),mdx(\"p\",null,\"If you enabled \",mdx(\"inlineCode\",{parentName:\"p\"},\"UPGRADE_SHELL_EXPERIENCE\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.zsh.org/\"}),\"zsh\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://ohmyz.sh/\"}),\"oh-my-zsh\"),\", and the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/romkatv/powerlevel10k\"}),\"powerlevel10k zsh theme\"),\" will be installed.\"),mdx(\"p\",null,\"On your first login via SSH, it will ask you to configure your theme. To run the wizard again, you can run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`p10k configure\n`)),mdx(\"h3\",e({},{id:\"fixing-your-ssh-private-key\"}),\"Fixing your SSH Private Key\"),mdx(\"p\",null,\"Due to StackScripts not yet having a multiple-line UDF, the line breaks for our private key was removed.\"),mdx(\"p\",null,\"Update the \",mdx(\"inlineCode\",{parentName:\"p\"},\".ssh/$HOSTNAME\"),\" with the correct version.\"),mdx(\"h3\",e({},{id:\"configure-keybase\"}),\"Configure Keybase\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`# login\nkeybase login\n\n# check if you have more than one key saved\nkeybase pgp export\n\n# if yes, specify the id in the commands below\n# keybase pgp export -q 31DBBB1F6949DA68 | gpg --import\n\n# import public key\nkeybase pgp export | gpg --import\n\n# import private key\nkeybase pgp export --secret | gpg --allow-secret-key-import --import\n\n# check imported key\ngpg --list-secret-keys --keyid-format LONG\n# /Users/pstadler/.gnupg/secring.gpg\n# ----------------------------------\n# pub   2048R/DEADBEEF 2012-08-16\n# uid                  Name (Comment) <email@host.tld>\n# sub   2048R/86D2FAC6 2012-08-16\n`)),mdx(\"p\",null,\"Notice the hash \",mdx(\"inlineCode\",{parentName:\"p\"},\"DEADBEEF\"),\". We will use this in the next section.\"),mdx(\"h3\",e({},{id:\"configure-git\"}),\"Configure Git\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`# add your basic information\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_name@example.com\"\n\n# sign all commits using your GPG key\ngit config --global user.signingkey DEADBEEF\ngit config --global commit.gpgsign true\n`)),mdx(\"h2\",e({},{id:\"repository\"}),\"Repository\"),mdx(\"p\",null,\"You can check the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/napjoseph/remote/\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"napjoseph/remote\"),\" repository\"),\" for the updated code.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Using Hugo on Gitpod","layout":"posts","slug":"using-hugo-on-gitpod","frontMatter":{"title":"Using Hugo on Gitpod","publishedDate":"2020-07-31T13:15:13Z","tags":["Hugo","Gitpod"],"description":"","disableComments":false},"rawContent":"\nCreate the necessary [Gitpod](https://www.gitpod.io/) files on the root of your repository.\n\n```bash\n$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n```\n\n```dockerfile filename=.gitpod.Dockerfile\nFROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n```\n\n```yaml filename=.gitpod.yml\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - command: 'hugo server --baseUrl $(gp url 1313) --appendPort=false'\n\nports:\n  - port: 1313\n    onOpen: open-preview\n```\n\nAfter commiting and merging your code, you can then go to `https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>` to start your Gitpod workspace.\n\nOptionally, you can also add a Gitpod badge on your `README` file:\n\n```markdown filename=README.md\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>)\n```\n\n#### Sources\n\nSetup configuration was copied from [esttech/theia-dev-conf](https://github.com/esttech/theia-dev-conf/).\n","excerpt":"\nCreate the necessary [Gitpod](https://www.gitpod.io/) files on the root of your repository.\n\n```bash\n$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n```\n\n```dockerfile filename=.gitpod.Dockerfile\nFROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n```\n\n```yaml filen...","serializedContent":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var d=(e,o,t)=>o in e?l(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,p=(e,o)=>{for(var t in o||(o={}))r.call(o,t)&&d(e,t,o[t]);if(i)for(var t of i(o))n.call(o,t)&&d(e,t,o[t]);return e},s=(e,o)=>m(e,g(o));var c=(e,o)=>{var t={};for(var a in e)r.call(e,a)&&o.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&i)for(var a of i(e))o.indexOf(a)<0&&n.call(e,a)&&(t[a]=e[a]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,o=c(a,[\"components\"]);return mdx(MDXLayout,s(p(p({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Create the necessary \",mdx(\"a\",p({parentName:\"p\"},{href:\"https://www.gitpod.io/\"}),\"Gitpod\"),\" files on the root of your repository.\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-bash\"}),`$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n`)),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-dockerfile\",metastring:\"filename=.gitpod.Dockerfile\",filename:\".gitpod.Dockerfile\"}),`FROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n`)),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.gitpod.yml\",filename:\".gitpod.yml\"}),`image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - command: 'hugo server --baseUrl $(gp url 1313) --appendPort=false'\n\nports:\n  - port: 1313\n    onOpen: open-preview\n`)),mdx(\"p\",null,\"After commiting and merging your code, you can then go to \",mdx(\"inlineCode\",{parentName:\"p\"},\"https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>\"),\" to start your Gitpod workspace.\"),mdx(\"p\",null,\"Optionally, you can also add a Gitpod badge on your \",mdx(\"inlineCode\",{parentName:\"p\"},\"README\"),\" file:\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-markdown\",metastring:\"filename=README.md\",filename:\"README.md\"}),`[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>)\n`)),mdx(\"h4\",p({},{id:\"sources\"}),\"Sources\"),mdx(\"p\",null,\"Setup configuration was copied from \",mdx(\"a\",p({parentName:\"p\"},{href:\"https://github.com/esttech/theia-dev-conf/\"}),\"esttech/theia-dev-conf\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Deploy Hugo Site Using GitHub Actions","layout":"posts","slug":"deploy-hugo-site-using-github-actions","frontMatter":{"title":"Deploy Hugo Site Using GitHub Actions","publishedDate":"2020-06-28T03:02:37+08:00","tags":["Hugo","GitHub Actions"],"description":"","disableComments":false},"rawContent":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.com/napjoseph/napjoseph.github.io/).\n\nSince this is an\n[Organization Pages-type repository](https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites),\nwe will be using following branches for our workflow:\n\n```bash\n$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n```\n\n### Add your Deploy Key\n\nFollow the tutorial over at\n[peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key)\nand add an SSH deploy key for your project.\n\n### Create your GitHub Action\n\nAfterwards, create a directory for your workflows and add the config file for\nyour new action.\n\n```bash\n$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n```\n\n```yaml filename=.github/workflows/deploy.yml\nname: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n```\n\n### Deployment\n\nAfter merging your pull requests to the `stable` branch, it should automatically\ndeploy to the `master` branch.\n","excerpt":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.co...","serializedContent":{"compiledSource":"var l=Object.defineProperty,c=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var n=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&n(e,a,t[a]);if(i)for(var a of i(t))p.call(t,a)&&n(e,a,t[a]);return e},u=(e,t)=>c(e,d(t));var h=(e,t)=>{var a={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(e!=null&&i)for(var r of i(e))t.indexOf(r)<0&&p.call(e,r)&&(a[r]=e[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:e}=r,t=h(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`After creating a new project using\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://gohugo.io/getting-started/quick-start/\"}),\"Hugo's Quick Start guide\"),`, you\ncan then deploy to `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://pages.github.com/\"}),\"GitHub Pages\"),\".\"),mdx(\"h3\",o({},{id:\"git-branches\"}),\"Git Branches\"),mdx(\"p\",null,`For this site, we are deploying the project hosted at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/napjoseph/napjoseph.github.io/\"}),\"napjoseph/napjoseph.github.io\"),\".\"),mdx(\"p\",null,`Since this is an\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites\"}),\"Organization Pages-type repository\"),`,\nwe will be using following branches for our workflow:`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n`)),mdx(\"h3\",o({},{id:\"add-your-deploy-key\"}),\"Add your Deploy Key\"),mdx(\"p\",null,`Follow the tutorial over at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key\"}),\"peaceiris/actions-gh-pages\"),`\nand add an SSH deploy key for your project.`),mdx(\"h3\",o({},{id:\"create-your-github-action\"}),\"Create your GitHub Action\"),mdx(\"p\",null,`Afterwards, create a directory for your workflows and add the config file for\nyour new action.`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.github/workflows/deploy.yml\",filename:\".github/workflows/deploy.yml\"}),`name: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: \\${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n`)),mdx(\"h3\",o({},{id:\"deployment\"}),\"Deployment\"),mdx(\"p\",null,\"After merging your pull requests to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"stable\"),` branch, it should automatically\ndeploy to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"master\"),\" branch.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}