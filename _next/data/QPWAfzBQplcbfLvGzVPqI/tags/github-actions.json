{"pageProps":{"tag":{"name":"GitHub Actions","slug":"github-actions"},"articles":[{"title":"Deploying a Repository Inside a GitHub Organization to Vercel Using GitHub Actions","layout":"posts","slug":"deploying-a-repository-inside-a-github-organization-to-vercel-using-github-actions","draft":false,"frontMatter":{"title":"Deploying a Repository Inside a GitHub Organization to Vercel Using GitHub Actions","publishedDate":"2023-03-28T20:11:00Z","tags":["GitHub","GitHub Actions","Vercel"],"description":"","disableComments":false},"rawContent":"\n[Vercel](https://vercel.com/) is a popular cloud service platform designed for hosting [Next.js](https://nextjs.org/) applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\n\nIn this blog post, we'll create a GitHub Action that duplicates the content of a repository inside a GitHub Organization to a repository in your personal GitHub account, allowing you to leverage Vercel's free hosting services.\n\n> **NOTE**: This approach may not be suitable for all scenarios, and ensuring proper security measures when dealing with sensitive data is essential.\n\n## Prerequisites\n\n- A personal GitHub account\n- A repository within a GitHub Organization (source repository)\n- A separate repository in your personal account to host the copied files (destination repository)\n\n## Step 1: Generate SSH Keys\n\nYou'll need to generate an SSH Deploy Key to securely push your content from the organization's repository to the external repository. Although you can also use a Personal Access Token, an SSH deploy key is recommended as it minimizes the impact of potential security breaches.\n\n```bash\nssh-keygen -t ed25519 -C \"$(git config user.email)\" -N \"\" -f github-<desitination-repo-name>\n```\n\nReplace the `<desitination-repo-name>` with the name of your destination repository and run the command. Afterwards, you should now have both public and private key files:\n\n- `github-<desitination-repo-name>.pub` (public)\n- `github-<desitination-repo-name>` (private)\n\n## Step 2: Add the private key to the Source Repository\n\n1. Visit the source repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. In the left-hand pane, click \"Secrets\", then \"Actions\".\n4. Click on \"New repository secret\".\n5. Name it `SSH_DEPLOY_KEY` and paste the contents of the private key file.\n6. Click \"Save\".\n\n## Step 3: Add the public key to the Destination Repository\n\n1. Visit the destination repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. In the left-hand side pane, click on \"Deploy keys.\"\n4. Click on \"Add deploy key\".\n5. Paste the contents of the public key file.\n6. Enable \"Allow write access\".\n7. Click \"Save\".\n\n## Step 4: Disable GitHub Actions on the Destination Repository\n\n1. Visit the destination repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. Click on \"Actions\" and then \"General\".\n4. Select \"Disable actions\".\n5. Click \"Save\".\n\n## Step 5: Create a GitHub Action Workflow\n\nCreate a new GitHub Action workflow in your source repository by adding a YAML file in the `.github/workflows` directory. Name the file `push-to-external-repo.yml` and paste the following content:\n\n```yaml filename=.github/workflows/push-to-external-repo.yml\nname: (main) push to external repo\non:\n  push:\n    branches:\n      - main\njobs:\n  push-to-external-repo:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repository\n        uses: actions/checkout@v3\n      - name: push to external repository\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.SSH_DEPLOY_KEY }}\n          publish_dir: .\n          external_repository: <your-username>/<destination-repo-name>\n          publish_branch: main\n          allow_empty_commit: true\n```\n\nReplace `<your-username>` with your GitHub username and `<destination-repo-name>` with the name of the external repository in your personal account.\nThis action will copy everything from your organization's repository to your personal repository, including your GitHub Action workflows, so follow [Step 4](#step-4-disable-github-actions-on-the-destination-repository) to disable GitHub Actions on the destination repository.\n\n## Step 6: Run your workflow\n\nPush something to your `main` branch and see it be pushed to your `<your-username>/<destination-repo-name>` repository.\n\n## Step 7: Set up a project on Vercel\n\n1. On Vercel's \"New Project\" page, choose the account linked to the project under the \"Import Git Repository\" section.\n2. Find your personal repository in the list and select \"Import\".\n3. Vercel will automatically detect the framework and any necessary build settings. You can configure project settings, including build and development settings and environment variables, at this stage or later.\n4. Click the \"Deploy\" button. Vercel will create the project and deploy it based on the chosen configurations.\n","excerpt":"\n[Vercel](https://vercel.com/) is a popular cloud service platform designed for hosting [Next.js](https://nextjs.org/) applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\n...","serializedContent":{"compiledSource":"var c=Object.defineProperty,h=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,t,i)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,o=(e,t)=>{for(var i in t||(t={}))r.call(t,i)&&s(e,i,t[i]);if(a)for(var i of a(t))l.call(t,i)&&s(e,i,t[i]);return e},p=(e,t)=>h(e,d(t));var u=(e,t)=>{var i={};for(var n in e)r.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(e!=null&&a)for(var n of a(e))t.indexOf(n)<0&&l.call(e,n)&&(i[n]=e[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:e}=n,t=u(n,[\"components\"]);return mdx(MDXLayout,p(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",o({parentName:\"p\"},{href:\"https://vercel.com/\"}),\"Vercel\"),\" is a popular cloud service platform designed for hosting \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://nextjs.org/\"}),\"Next.js\"),\" applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\"),mdx(\"p\",null,\"In this blog post, we'll create a GitHub Action that duplicates the content of a repository inside a GitHub Organization to a repository in your personal GitHub account, allowing you to leverage Vercel's free hosting services.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": This approach may not be suitable for all scenarios, and ensuring proper security measures when dealing with sensitive data is essential.\")),mdx(\"h2\",o({},{id:\"prerequisites\"}),\"Prerequisites\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"A personal GitHub account\"),mdx(\"li\",{parentName:\"ul\"},\"A repository within a GitHub Organization (source repository)\"),mdx(\"li\",{parentName:\"ul\"},\"A separate repository in your personal account to host the copied files (destination repository)\")),mdx(\"h2\",o({},{id:\"step-1-generate-ssh-keys\"}),\"Step 1: Generate SSH Keys\"),mdx(\"p\",null,\"You'll need to generate an SSH Deploy Key to securely push your content from the organization's repository to the external repository. Although you can also use a Personal Access Token, an SSH deploy key is recommended as it minimizes the impact of potential security breaches.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`ssh-keygen -t ed25519 -C \"$(git config user.email)\" -N \"\" -f github-<desitination-repo-name>\n`)),mdx(\"p\",null,\"Replace the \",mdx(\"inlineCode\",{parentName:\"p\"},\"<desitination-repo-name>\"),\" with the name of your destination repository and run the command. Afterwards, you should now have both public and private key files:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"github-<desitination-repo-name>.pub\"),\" (public)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"github-<desitination-repo-name>\"),\" (private)\")),mdx(\"h2\",o({},{id:\"step-2-add-the-private-key-to-the-source-repository\"}),\"Step 2: Add the private key to the Source Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the source repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'In the left-hand pane, click \"Secrets\", then \"Actions\".'),mdx(\"li\",{parentName:\"ol\"},'Click on \"New repository secret\".'),mdx(\"li\",{parentName:\"ol\"},\"Name it \",mdx(\"inlineCode\",{parentName:\"li\"},\"SSH_DEPLOY_KEY\"),\" and paste the contents of the private key file.\"),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-3-add-the-public-key-to-the-destination-repository\"}),\"Step 3: Add the public key to the Destination Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the destination repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'In the left-hand side pane, click on \"Deploy keys.\"'),mdx(\"li\",{parentName:\"ol\"},'Click on \"Add deploy key\".'),mdx(\"li\",{parentName:\"ol\"},\"Paste the contents of the public key file.\"),mdx(\"li\",{parentName:\"ol\"},'Enable \"Allow write access\".'),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-4-disable-github-actions-on-the-destination-repository\"}),\"Step 4: Disable GitHub Actions on the Destination Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the destination repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'Click on \"Actions\" and then \"General\".'),mdx(\"li\",{parentName:\"ol\"},'Select \"Disable actions\".'),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-5-create-a-github-action-workflow\"}),\"Step 5: Create a GitHub Action Workflow\"),mdx(\"p\",null,\"Create a new GitHub Action workflow in your source repository by adding a YAML file in the \",mdx(\"inlineCode\",{parentName:\"p\"},\".github/workflows\"),\" directory. Name the file \",mdx(\"inlineCode\",{parentName:\"p\"},\"push-to-external-repo.yml\"),\" and paste the following content:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.github/workflows/push-to-external-repo.yml\",filename:\".github/workflows/push-to-external-repo.yml\"}),`name: (main) push to external repo\non:\n  push:\n    branches:\n      - main\njobs:\n  push-to-external-repo:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repository\n        uses: actions/checkout@v3\n      - name: push to external repository\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: \\${{ secrets.SSH_DEPLOY_KEY }}\n          publish_dir: .\n          external_repository: <your-username>/<destination-repo-name>\n          publish_branch: main\n          allow_empty_commit: true\n`)),mdx(\"p\",null,\"Replace \",mdx(\"inlineCode\",{parentName:\"p\"},\"<your-username>\"),\" with your GitHub username and \",mdx(\"inlineCode\",{parentName:\"p\"},\"<destination-repo-name>\"),` with the name of the external repository in your personal account.\nThis action will copy everything from your organization's repository to your personal repository, including your GitHub Action workflows, so follow `,mdx(\"a\",o({parentName:\"p\"},{href:\"#step-4-disable-github-actions-on-the-destination-repository\"}),\"Step 4\"),\" to disable GitHub Actions on the destination repository.\"),mdx(\"h2\",o({},{id:\"step-6-run-your-workflow\"}),\"Step 6: Run your workflow\"),mdx(\"p\",null,\"Push something to your \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\" branch and see it be pushed to your \",mdx(\"inlineCode\",{parentName:\"p\"},\"<your-username>/<destination-repo-name>\"),\" repository.\"),mdx(\"h2\",o({},{id:\"step-7-set-up-a-project-on-vercel\"}),\"Step 7: Set up a project on Vercel\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},`On Vercel's \"New Project\" page, choose the account linked to the project under the \"Import Git Repository\" section.`),mdx(\"li\",{parentName:\"ol\"},'Find your personal repository in the list and select \"Import\".'),mdx(\"li\",{parentName:\"ol\"},\"Vercel will automatically detect the framework and any necessary build settings. You can configure project settings, including build and development settings and environment variables, at this stage or later.\"),mdx(\"li\",{parentName:\"ol\"},'Click the \"Deploy\" button. Vercel will create the project and deploy it based on the chosen configurations.')))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Deploy Hugo Site Using GitHub Actions","layout":"posts","slug":"deploy-hugo-site-using-github-actions","draft":false,"frontMatter":{"title":"Deploy Hugo Site Using GitHub Actions","publishedDate":"2020-06-28T03:02:37+08:00","tags":["Hugo","GitHub Actions"],"description":"","disableComments":false},"rawContent":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.com/napjoseph/napjoseph.github.io/).\n\nSince this is an\n[Organization Pages-type repository](https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites),\nwe will be using following branches for our workflow:\n\n```bash\n$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n```\n\n### Add your Deploy Key\n\nFollow the tutorial over at\n[peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key)\nand add an SSH deploy key for your project.\n\n### Create your GitHub Action\n\nAfterwards, create a directory for your workflows and add the config file for\nyour new action.\n\n```bash\n$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n```\n\n```yaml filename=.github/workflows/deploy.yml\nname: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n```\n\n### Deployment\n\nAfter merging your pull requests to the `stable` branch, it should automatically\ndeploy to the `master` branch.\n","excerpt":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.co...","serializedContent":{"compiledSource":"var l=Object.defineProperty,c=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var n=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&n(e,a,t[a]);if(i)for(var a of i(t))p.call(t,a)&&n(e,a,t[a]);return e},u=(e,t)=>c(e,d(t));var h=(e,t)=>{var a={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(e!=null&&i)for(var r of i(e))t.indexOf(r)<0&&p.call(e,r)&&(a[r]=e[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:e}=r,t=h(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`After creating a new project using\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://gohugo.io/getting-started/quick-start/\"}),\"Hugo's Quick Start guide\"),`, you\ncan then deploy to `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://pages.github.com/\"}),\"GitHub Pages\"),\".\"),mdx(\"h3\",o({},{id:\"git-branches\"}),\"Git Branches\"),mdx(\"p\",null,`For this site, we are deploying the project hosted at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/napjoseph/napjoseph.github.io/\"}),\"napjoseph/napjoseph.github.io\"),\".\"),mdx(\"p\",null,`Since this is an\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites\"}),\"Organization Pages-type repository\"),`,\nwe will be using following branches for our workflow:`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n`)),mdx(\"h3\",o({},{id:\"add-your-deploy-key\"}),\"Add your Deploy Key\"),mdx(\"p\",null,`Follow the tutorial over at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key\"}),\"peaceiris/actions-gh-pages\"),`\nand add an SSH deploy key for your project.`),mdx(\"h3\",o({},{id:\"create-your-github-action\"}),\"Create your GitHub Action\"),mdx(\"p\",null,`Afterwards, create a directory for your workflows and add the config file for\nyour new action.`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.github/workflows/deploy.yml\",filename:\".github/workflows/deploy.yml\"}),`name: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: \\${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n`)),mdx(\"h3\",o({},{id:\"deployment\"}),\"Deployment\"),mdx(\"p\",null,\"After merging your pull requests to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"stable\"),` branch, it should automatically\ndeploy to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"master\"),\" branch.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}