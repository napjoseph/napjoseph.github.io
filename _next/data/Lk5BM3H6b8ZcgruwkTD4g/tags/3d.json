{"pageProps":{"tag":{"name":"3D","slug":"3d"},"articles":[{"title":"Create a 3D Contribution Chart Using React Three Fiber","layout":"posts","slug":"create-a-3d-contribution-chart-using-react-three-fiber","draft":false,"frontMatter":{"title":"Create a 3D Contribution Chart Using React Three Fiber","publishedDate":"2023-04-02T03:27:00Z","tags":["3D","Data Visualization","React Three Fiber","React","The Wandering Inn","Three.js","TypeScript"],"description":"","disableComments":false},"rawContent":"\nIn this blog post, we will create a 3D visualization of our timeseries data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber), a React renderer for [Three.js](https://threejs.org/). This is inspired by [GitHub Skyline](https://skyline.github.com/), a web application that creates a 3D visualization of a user's GitHub contributions.\n\n![Project Titan](/img/posts/3d-bar-charts/titan.png)\n\n> **NOTE**: You can find the live version at [The Wandering Inndex](https://titan.inndex.omg.lol/) and the full source code on [the wandering-inndex/titan repository](https://github.com/wandering-inndex/titan).\n\nThis is rather long, so here's a table of contents:\n\n- [Step 1: Project Setup](#step-1-project-setup)\n  - [Prerequisites](#prerequisites)\n  - [Create a new Next.js project](#create-a-new-nextjs-project)\n  - [Install Additional Project Dependencies](#install-additional-project-dependencies)\n  - [Clean up the Home Page](#clean-up-the-home-page)\n- [Step 2: Preparing our Data](#step-2-preparing-our-data)\n  - [Creating the Type Definitions](#creating-the-type-definitions)\n  - [Convert the Chapter data to a mapping of dates to values](#convert-the-chapter-data-to-a-mapping-of-dates-to-values)\n  - [Show the parsed Chapter data on the page](#show-the-parsed-chapter-data-on-the-page)\n- [Step 3: Creating the Time-series Data](#step-3-creating-the-time-series-data)\n  - [Defining the Time-series Data Types](#defining-the-time-series-data-types)\n  - [Gregorian Calendar vs ISO 8601 Calendar](#gregorian-calendar-vs-iso-8601-calendar)\n  - [Modified Version](#modified-version)\n  - [Using date-fns](#using-date-fns)\n  - [Converting the ValuesPerDay mapping to our desired data structure](#converting-the-valuesperday-mapping-to-our-desired-data-structure)\n- [Step 4: Show the data in a 2D Grid](#step-4-show-the-data-in-a-2d-grid)\n- [Step 5: Show the Data in a 3D Grid](#step-5-show-the-data-in-a-3d-grid)\n- [Step 6: Adding a helper GUI to customize the chart](#step-6-adding-a-helper-gui-to-customize-the-chart)\n- [Conclusion](#conclusion)\n\n---\n\n## Step 1: Project Setup\n\nIn this step, we will be creating a new project using [Create T3 App](https://create.t3.gg/). If you already have a React project set up, just install the [additional dependencies listed below](#install-additional-project-dependencies) and skip to the [next step](#step-2-preparing-our-data).\n\n### Prerequisites\n\nInstall a version manager for [Node.js](https://nodejs.org/en) for your operating system:\n\n- [Node Version Manager](https://github.com/nvm-sh/nvm) (Linux/macOS)\n- [NVM for Windows](https://github.com/coreybutler/nvm-windows) (Windows)\n\nAfter installing `nvm`, install the latest LTS version of [Node.js](https://nodejs.org/en) by running:\n\n```bash\n# Linux/macOS\n$ nvm install --lts\n\n# Windows\n$ nvm install lts\n```\n\nOnce that's done, we shall install [pnpm](https://pnpm.io/), an alternative to [npm](https://www.npmjs.com/) that is faster and uses less disk space. To install `pnpm`, run:\n\n```bash\n$ npm install -g pnpm\n```\n\n### Create a new Next.js project\n\nFor this project, we will use [Create T3 App](https://create.t3.gg/) to bootstrap our project. Create T3 App is a CLI tool that helps you create a new project with a pre-configured setup for [Next.js](https://nextjs.org/), [TypeScript](https://www.typescriptlang.org/), and [Tailwind CSS](https://tailwindcss.com/).\n\nTo create a new T3 project, run:\n\n```bash\n$ pnpm create t3-app@latest\n#     ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n#    / __| _ \\ __| /  \\_   _| __| |_   _|__ /   /  \\ | _ \\ _ \\\n#   | (__|   / _| / /\\ \\| | | _|    | |  |_ \\  / /\\ \\|  _/  _/\n#    \\___|_|_\\___|_/¯¯\\_\\_| |___|   |_| |___/ /_/¯¯\\_\\_| |_|\n# ? What will your project be called? (my-t3-app) titan\n# ? Will you be using JavaScript or TypeScript? TypeScript\n# ? Which packages would you like to enable? tailwind\n# ? Initialize a new git repository? (Y/n) Yes\n# ? Would you like us to run pnpm install? (Y/n) Yes\n# ? What import alias would you like configured? ~/\n#\n# ✔ titan scaffolded successfully!\n```\n\nFeel free to select any name you'd like for your project. However, for the purpose of this guide, we'll go with `titan`, inspired by a character found in [The Wandering Inn](https://wanderinginn.com/), one of the longest pieces of fiction written in English. The [author](https://www.patreon.com/pirateaba) has been writing consistently since 2016, and we'll utilize their writing data for our visualization.\n\n### Install Additional Project Dependencies\n\nAfter the project is created, change into the project directory:\n\n```bash\n$ cd titan\n```\n\nInstall additional dependencies for our project:\n\n```bash\n$ pnpm add three @types/three @react-three/fiber @react-three/drei leva date-fns yaml\n```\n\n- `three` is a JavaScript 3D library that we will use to create our 3D visualization.\n- `@types/three` is the TypeScript type definitions for `three`.\n- `@react-three/fiber` is a React renderer for `three`.\n- `@react-three/drei` is a collection of React components for `three`.\n- `leva` is a UI library that we will use to create controls for our visualization.\n- `date-fns` is a date utility library that we will use to parse and format dates.\n- `yaml` is a [YAML](https://yaml.org/) parser that we will use to parse our data source.\n\n### Clean up the Home Page\n\nOpen the project in your favorite code editor and delete the contents of `src/pages/index.tsx`. Replace it with the following code:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst Home: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\nAdd a style to your `body` tag by updating `src/styles/globals.css`:\n\n```css filename=src/styles/globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-100;\n  }\n}\n```\n\nAfterwards, you can start the development server by running:\n\n```bash\n$ pnpm dev\n```\n\nIt should show an empty page with our project name at the top.\n\n![Empty Page](/img/posts/3d-bar-charts/step-01-empty-page.png)\n\n## Step 2: Preparing our Data\n\nFor this project, we will be fetching data from [The Wandering Inndex](https://inndex.omg.lol/), a community-driven project that aims to collect data about [The Wandering Inn](https://wanderinginn.com/) and make it available for the public. The raw data for the published chapters is available in [YAML](https://yaml.org/) format, and we will be using the [yaml](https://www.npmjs.com/package/yaml) package to parse the data.\n\n### Creating the Type Definitions\n\nIn [TypeScript](https://www.typescriptlang.org/), [type declarations](https://www.typescriptlang.org/docs/handbook/2/type-declarations.html) are used to define the structure of objects, interfaces, classes, and functions. It provides clarity and documentation to the codebase, making it easier for developers to understand and maintain the project.\n\nTo get started, let's declare the type definitions that we will use in our application. Luckily for us, the data that we will be using already has [type definitions available](https://github.com/wandering-inndex/seed-data/blob/main/types/media.ts). We will be using the `Chapter` interface, which represents the individual chapter data. We will only be using a subset of the available fields from the full type definitions, so let's create a new file at `src/types/chapters.ts` and add the following code:\n\n```ts filename=src/types/chapters.ts\n/** Minimal interface that represents the individual Chapter data. */\nexport interface Chapter {\n  /** Unique ID for the chapter. */\n  id: string;\n  /** Flags for the chapter. */\n  meta: {\n    /** If true, then it will be shown in the table of contents. */\n    show: boolean;\n  };\n  /** Specifies that a chapter is part of a bigger collection. */\n  partOf: {\n    /** Part of a Web Novel Volume. */\n    webNovel?: {\n      /** The volume this is collected under. */\n      ref: number | null;\n      /**\n       * The timestamp when this chapter is originally published. This can be\n       * found via the `meta[property='article:published_time']` selector.\n       */\n      published: string | null;\n      /**\n       * Total words based on https://wordcounter.net/. Without the title,\n       * author's notes, artworks, etc.\n       */\n      totalWords: number | null;\n    };\n  };\n}\n```\n\nWe only want to show the chapters that are marked as to be shown in the table of contents (`meta.show === true`) and is part of a Web Novel Volume (`partOf.webNovel.ref > 0`). We will also be using the `partOf.webNovel.published` field to determine the date that the chapter was published and the `partOf.webNovel.totalWords` field to determine the number of words for that chapter.\n\nWe should also create the type definitions for our Time-related data. Create `src/types/calendar.ts` and add the following:\n\n```ts filename=src/types/calendar.ts\n// TODO: Add type definition for `CalendarWeekData`.\n// TODO: Add type definition for `CalendarYearData`.\n// TODO: Add type definition for `CalendarYearsData`.\n\n/**\n * Maps a value per date string.\n * The date string must be in a valid ISO 8601 format.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @example\n * const map: ValuesPerDay = new Map<string, number>([\n *  [\"2021-01-01\", 1000],\n *  [\"2021-01-02\", 2000],\n *  [\"2021-01-03\", 3000],\n * ]);\n */\nexport type ValuesPerDay = Map<string, number>;\n```\n\nOur goal for this step is to convert the `Chapter` data into a mapping of word counts by date (`ValuesPerDay`).\n\nAfterwards, create a `src/types/index.ts` file and add the following code:\n\n```ts filename=src/types/index.ts\nexport * from './calendar';\nexport * from './chapters';\n```\n\nThis will allow us to import all of our types from a single location (e.g. `import { ValuesPerDay } from \"~/types/\";`).\n\n### Convert the Chapter data to a mapping of dates to values\n\nLet's create a `src/utils/chapters.ts` file and add the following code:\n\n```ts filename=src/utils/chapters.ts\nimport { isMatch, formatISO, parseISO } from 'date-fns';\n\nimport type { Chapter, ValuesPerDay } from '~/types';\n\n/**\n * Checks if a chapter should be included based on the given conditions.\n *\n * @param {Chapter} chapter - The chapter to check.\n * @returns {boolean} - `true` if the chapter should be included, `false`\n * otherwise.\n */\nexport const shouldIncludeChapter = (chapter: Chapter): boolean => {\n  const shouldShow = chapter.meta.show === true;\n  const hasValidWebNovelRef = (chapter.partOf.webNovel?.ref ?? 0) > 0;\n  const hasValidPublishedDate = isMatch(\n    chapter.partOf.webNovel?.published ?? '',\n    \"yyyy-MM-dd'T'HH:mm:ssXXX\"\n  );\n\n  return shouldShow && hasValidWebNovelRef && hasValidPublishedDate;\n};\n\n/** The return data from the `convertChaptersToMapping` function. */\nexport interface ConvertChaptersToMappingOutput {\n  /** This maps a date string to the number of words written on that day. */\n  mapping: ValuesPerDay;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/**\n * Converts an array of `Chapter` objects to a `ConvertChaptersToMappingOutput`.\n *\n * @param {Chapter[]} chapters - The array of `Chapter` objects.\n * @returns {ConvertChaptersToMappingOutput} - The output of the conversion.\n */\nexport const convertChaptersToMapping = (chapters: Chapter[]): ConvertChaptersToMappingOutput => {\n  const mapping: ValuesPerDay = new Map();\n\n  let minYear = Number.POSITIVE_INFINITY;\n  let maxYear = Number.NEGATIVE_INFINITY;\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n\n  for (const chapter of chapters) {\n    if (!shouldIncludeChapter(chapter)) {\n      continue;\n    }\n\n    const publishedDate = chapter.partOf.webNovel?.published ?? '';\n    const totalWords = chapter.partOf.webNovel?.totalWords ?? 0;\n\n    if (publishedDate) {\n      const date = parseISO(publishedDate);\n      const dateKey = formatISO(date, {\n        representation: 'date'\n      });\n\n      const existingWordCount = mapping.get(dateKey) ?? 0;\n      const newWordCount = existingWordCount + totalWords;\n      mapping.set(dateKey, newWordCount);\n\n      const year = date.getFullYear();\n      minYear = Math.min(minYear, year);\n      maxYear = Math.max(maxYear, year);\n      minValue = Math.min(minValue, newWordCount);\n      maxValue = Math.max(maxValue, newWordCount);\n    }\n  }\n\n  return { mapping, minYear, maxYear, minValue, maxValue };\n};\n```\n\nThis file contains a utility function that will help us convert our `Chapter` data into a mapping of dates to word counts. The code is fairly straightforward, but let's go over it in more detail.\n\nIt starts by defining a `shouldIncludeChapter` function that will check if a chapter should be included based on the given conditions. This function will return `true` if the chapter should be included, and `false` otherwise. The conditions are as follows:\n\n- `chapter.meta.show` must be `true`.\n- `chapter.partOf.webNovel.ref` must be greater than 0.\n- `chapter.partOf.webNovel.published` must be a valid date string.\n\nNext, we define a `convertChaptersToMapping` function that will convert an array of `Chapter` objects to a `ConvertChaptersToMappingOutput`. This function will return an object that contains the following properties:\n\n- `mapping`: This maps a date string to the number of words written on that day.\n- `minYear`: The minimum year in the dataset.\n- `maxYear`: The maximum year in the dataset.\n- `minValue`: The minimum value in the dataset.\n- `maxValue`: The maximum value in the dataset.\n\nThe function will loop through each chapter and check if it should be included. If it should be included, it will add the number of words written on that day to the mapping. It will also update the `minYear`, `maxYear`, `minValue`, and `maxValue` properties as needed.\n\nLike before, create a `src/utils/index.ts` file and add the following code:\n\n```ts filename=src/utils/index.ts\nexport * from './chapters';\n```\n\n### Show the parsed Chapter data on the page\n\nLet's update our `src/pages/index.tsx` page to fetch our `Chapter` data from the source repository. Afterwards, we'll convert the data using `convertChaptersToMapping` and show the relevant data on the page.\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping } from '~/utils';\nimport type { Chapter } from '~/types';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n\n  return {\n    props: {\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\n[getServerSideProps](https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props) is a special Next.js function that will run on the server before the page is rendered. We are using this function to fetch the YAML data from [our data source](https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml). We will then convert the data to a mapping of dates to values using the `convertChaptersToMapping` function we created earlier. We are then returning the `minYear`, `maxYear`, `minValue`, and `maxValue` properties as props to our `Home` component. We are then showing the values as a simple HTML list.\n\n![With Values](/img/posts/3d-bar-charts/step-02-with-values.png)\n\n## Step 3: Creating the Time-series Data\n\n### Defining the Time-series Data Types\n\nNow, let's go define the data structure that will be used to visualize the data. We'll start by updating the `src/types/calendar.ts` file and adding the following code to the top:\n\n```ts filename=src/types/calendar.ts\n/**\n * Represents a tuple of a given type `T` and fixed length `N`.\n *\n * @see https://stackoverflow.com/a/74801694\n */\ntype Tuple<T, N extends number, R extends T[] = []> = number extends N\n  ? T[]\n  : R['length'] extends N\n  ? R\n  : Tuple<T, N, [T, ...R]>;\n\n/**\n * An array that represents values per day of the week.\n *\n * For this project, the first day of the week will be Monday, as per ISO 8601:\n *\n * - INDEX 0: MON\n * - INDEX 1: TUE\n * - INDEX 2: WED\n * - INDEX 3: THU\n * - INDEX 4: FRI\n * - INDEX 5: SAT\n * - INDEX 6: SUN\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * If there are no values for that specific day, it will be 0.\n * If that day is not part of the calendar year, it will be -1.\n *\n * @example\n * const week: CalendarWeekData = [1000, 2000, 3000, 4000, 5000, 6000, 7000];\n * const weekWithoutValues: CalendarYearData = [0, 0, 0, 0, 0, 0, 0];\n * const weekWithDaysNotInYear: CalendarYearData = [-1, -1, -1, -1, -1, -1, -1];\n * const weekMixed: CalendarYearData = [-1, -1, 0, 0, 5000, 0, 7000];\n */\nexport type CalendarWeekData = Tuple<number, 7>;\n\n/**\n * An array that represents values per week of the year.\n *\n * Most years have 52 weeks, but if the year starts on a Thursday or is a leap\n * year that starts on a Wednesday, that particular year will have 53 weeks.\n *\n * In ISO 8601, if January 1 is on a Monday, Tuesday, Wednesday, or Thursday, it\n * is in week 1. If January 1 is on a Friday, Saturday or Sunday, it is in week\n * 52 or 53 of the previous year (there is no week 0). December 28 will always\n * be in the last week of its year.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * For this project:\n *\n * - We will *ALWAYS* create a 54-week year.\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1. The total\n *   weeks will be coming from to `date-fns`:\n *   {@link https://date-fns.org/docs/getISOWeeksInYear}\n */\nexport type CalendarYearData = Array<CalendarWeekData>;\n\n/** An array that represents values per year. */\nexport type CalendarYearsData = Array<CalendarYearData>;\n\n// ...\n//\n// Definition for `ValuesPerDay`\n```\n\nOur goal for this step is to convert the `ValuesPerDay` mapping to an array of `CalendarYearData`. A `CalendarYearData` is just an array of `CalendarWeekData` values, which are just arrays of word counts per week.\n\nTo help you visualize this multi-dimensional array, we'll create a 2D grid, where the X-axis represents the week number, the Y-axis represents the day, and the cell value represents the word count.\n\n[![Year Grid](/img/posts/3d-bar-charts/step-03-year-grid.png)](/img/posts/3d-bar-charts/step-03-year-grid.png)\n\nYou may have noticed a few things about this grid:\n\n- The week starts on Monday (index 0) and ends on Sunday (index 6).\n- There are 54 weeks (indexes 0 to 53) instead of the usual 52 or 53 weeks.\n\nFirstly, it's important to note that the beginning of the week [differs across cultures](https://www.timeanddate.com/date/week-numbers.html), and the number of weeks in a year can vary too. Some years have 52 weeks, others have 53 weeks on leap years. Additionally, since the start of the week can vary, the number of weeks can differ as well. For this project, we will use the [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601) as our basis, with some modifications.\n\n### Gregorian Calendar vs ISO 8601 Calendar\n\nISO 8601 is a standard that defines a way to represent dates and times. For further reading, check out [Wikipedia: ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), [Wikipedia: ISO week date](https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar), and [Tableau: ISO-8601 Week-Based Calendar](https://help.tableau.com/current/pro/desktop/en-us/dates_calendar.htm).\n\nHere are some of the differences between the Gregorian Calendar and the ISO 8601 Calendar:\n\n| Gregorian Calendar                       | ISO 8601 Calendar                                                                                                                      |\n| ---------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n| Will always start the year on January 1. | Years always start on the first Monday closest to January 1. This means the year may start anywhere between December 29 and January 4. |\n| Permits weeks to extend across years.    | Weeks have exactly 7 days and start on a Monday. Each week belongs to single year.                                                     |\n| Years can have 365 or 366 days.          | An ISO week-numbering year has 52 or 53 full weeks. That is 364 or 371 days.                                                           |\n\nBelow, you can see the difference when transitioning from December 2004 to January 2005. The Gregorian Calendar starts the year on January 1, while the ISO 8601 Calendar starts the year on January 3.\n\n![Different Calendars](/img/posts/3d-bar-charts/step-03-iso-8601-calendar.png)\n\nCalendar applications will usually use the Gregorian calendar, and will have the option to show the ISO 8601 week numbers, as well.\n\n![Combined Calendars](/img/posts/3d-bar-charts/step-03-combined-calendars.png)\n\n### Modified Version\n\nISO 8601 is a very useful standard, but we need to modify it to fit our requirements:\n\n- Our year will always have 54 weeks (378 days). This ensures that all years have the same number of columns when we show the grids side-by-side.\n  - The extra week will be placed at the start, giving it the index of 0.\n- The week number will follow the ISO 8601 standard, with the following exceptions:\n  - If the date's month is January but the ISO week number is greater than 50, change the week number to 0.\n  - If the date's month is December but the ISO week number is less than 10, change the week number to the max ISO 8601 week number plus 1.\n- Our weeks will start on Monday. The days will have 0 based indexes, so Monday will be 0 and Sunday will be 6.\n- In our data structure, the word counts for each week will be represented as an array of 7 numbers. If the week has unused slots, the values for those days will be represented as negative numbers.\n\nLet's try to visualize this modified calendar:\n\n![Combined and Modified Calendars](/img/posts/3d-bar-charts/step-03-combined-modified-calendars.png)\n\n2004 will end on Week 53, with two unused days at the end (marked as `X` in the chart). 2005 will start on Week 0, with five unused days at the beginning (marked as `X` in the chart). Week 1 will start on January 3. If we continue and fill up our grid for the year 2005 with our dates, we will get:\n\n[![Year 2005 Grid](/img/posts/3d-bar-charts/step-03-year-2005-grid.png)](/img/posts/3d-bar-charts/step-03-year-2005-grid.png)\n\n> **NOTE**: Notice that we have 13 unused days for 2005. Week 0 has 5 at the start, Week 52 has 1 at the end, and Week 53 has all 7 slots unused.\n\nIn our data structure, we will initialize the grid with negative numbers for the unused days, and 0 for the rest:\n\n[![Year 2005 Grid Initialized](/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png)](/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png)\n\n### Using date-fns\n\nTo make our lives easier, we'll use the [date-fns](https://date-fns.org/) library to help us with the ISO 8601 calculations. We will use the [`getISOWeek`](https://date-fns.org/docs/getISOWeek) function to get the week number for a given date, and the [`getISOWeeksInYear`](https://date-fns.org/docs/getISOWeeksInYear) function to get the number of weeks in a given year. We can get the day index by using the [`getDay`](https://date-fns.org/docs/getDay) function and subtracting 1 from the result.\n\nLet's try checking the ISO 8061 values for a few dates. We can create a function that will return an object with the values we need:\n\n```ts\nimport {\n  formatISO,\n  getDay,\n  getISODay,\n  getISOWeek,\n  getISOWeeksInYear,\n  getISOWeekYear\n} from 'date-fns';\n\nconst newDate = (year: number, month: number, day: number): Date => {\n  // The month is 0-based, so January is 0 and December is 11.\n  return new Date(year, month - 1, day, 0, 0, 0, 0);\n};\n\nconst analyzeDate = (date: Date) => {\n  return {\n    // Extracts the YYYY-MM-DD portion of the Date object.\n    formattedDate: formatISO(date, { representation: 'date' }),\n    // The day of the week, 0-6, where Sunday is the first day of the week.\n    gregDay: getDay(date),\n    // The day of the week, 1-7, where Monday is the first day of the week.\n    isoDay: getISODay(date),\n    // The year of the date.\n    gregYear: date.getFullYear(),\n    // The ISO week-numbering year of the date.\n    isoWeekYear: getISOWeekYear(date),\n    // The ISO week-numbering week of the date.\n    isoWeek: getISOWeek(date),\n    // The number of weeks in the ISO week-numbering year.\n    isoWeeksInYear: getISOWeeksInYear(date)\n  };\n};\n```\n\nNow, let's check the results for the dates `2004-12-28` to `2005-01-04`:\n\n```ts\nconsole.table([\n  analyzeDate(newDate(2004, 12, 28)),\n  analyzeDate(newDate(2004, 12, 29)),\n  analyzeDate(newDate(2004, 12, 30)),\n  analyzeDate(newDate(2004, 12, 31)),\n  analyzeDate(newDate(2005, 1, 1)),\n  analyzeDate(newDate(2005, 1, 2)),\n  analyzeDate(newDate(2005, 1, 3)),\n  analyzeDate(newDate(2005, 1, 4))\n]);\n```\n\n| (index) | formattedDate | gregDay | isoDay | gregYear | isoWeekYear | isoWeek | isoWeeksInYear |\n| ------- | ------------- | ------- | ------ | -------- | ----------- | ------- | -------------- |\n| 0       | \"2004-12-28\"  | 2       | 2      | 2004     | 2004        | 53      | 53             |\n| 1       | \"2004-12-29\"  | 3       | 3      | 2004     | 2004        | 53      | 53             |\n| 2       | \"2004-12-30\"  | 4       | 4      | 2004     | 2004        | 53      | 53             |\n| 3       | \"2004-12-31\"  | 5       | 5      | 2004     | 2004        | 53      | 53             |\n| 4       | \"2005-01-01\"  | 6       | 6      | 2005     | 2004        | 53      | 53             |\n| 5       | \"2005-01-02\"  | 0       | 7      | 2005     | 2004        | 53      | 53             |\n| 6       | \"2005-01-03\"  | 1       | 1      | 2005     | 2005        | 1       | 52             |\n| 7       | \"2005-01-04\"  | 2       | 2      | 2005     | 2005        | 1       | 52             |\n\n> **NOTE**: Take note of the differences between the Gregorian and ISO 8601 years and weeks. Using the wrong functions can lead to [unwanted bugs in your application](https://www.youtube.com/watch?v=D3jxx8Yyw1c).\n\n### Converting the ValuesPerDay mapping to our desired data structure\n\nLet's now create a function that will convert our `ValuesPerDay` mapping to an array of `CalendarYearData` data. Create a `src/utils/calendar.ts` file and add the following code:\n\n```ts filename=src/utils/calendar.ts\nimport { getISODay, getISOWeek, getISOWeeksInYear, getYear, parseISO } from 'date-fns';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData, ValuesPerDay } from '~/types';\n\n/** Creates a UTC date. */\nexport const createUtcDate = (year: number, month: number, day: number) =>\n  new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));\n\n/**\n * Extracts the minimum and maximum years from the given `ValuesPerDay`\n * object.\n *\n * @param valuesPerDay - The `ValuesPerDay` object to extract the year\n * range from.\n * @returns An object containing the `minimumYear` and `maximumYear`.\n */\nexport const extractYearRange = (\n  valuesPerDay: ValuesPerDay\n): { minimumYear: number; maximumYear: number } => {\n  let minimumYear = Infinity;\n  let maximumYear = -Infinity;\n\n  for (const dateString of valuesPerDay.keys()) {\n    const year = getYear(parseISO(dateString));\n\n    minimumYear = Math.min(minimumYear, year);\n    maximumYear = Math.max(maximumYear, year);\n  }\n\n  return { minimumYear, maximumYear };\n};\n\n/**\n * Given a date, get its adjusted ISO week number based on the project\n * requirements:\n *\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1.\n *\n * @param {Date} date - The date to get the adjusted ISO week number for.\n * @returns {number} - The adjusted ISO week number.\n */\nexport const getAdjustedISOWeek = (date: Date): number => {\n  const month = date.getMonth();\n  const isoWeek = getISOWeek(date);\n  const isoWeeksInYear = getISOWeeksInYear(date);\n\n  if (month === 0 && isoWeek > 50) {\n    return 0;\n  } else if (month === 11 && isoWeek < 10) {\n    return isoWeeksInYear + 1;\n  }\n\n  return isoWeek;\n};\n\n/**\n * Initializes an empty `CalendarYearData`.\n *\n * If there are no values for that specific day, it will be `0`. If that day is\n * not part of the calendar year, it will be `-1`.\n *\n * @param {number} year - The year to initialize the data for.\n * @returns {CalendarYearData} a `CalendarYearData` with default values.\n */\nexport const initializeEmptyCalendarYearData = (year: number): CalendarYearData => {\n  const firstDateOfYear = createUtcDate(year, 1, 1);\n  const lastDateOfYear = createUtcDate(year, 12, 31);\n  const firstWeekOfYearAdjusted = getAdjustedISOWeek(firstDateOfYear);\n  const lastWeekOfYearAdjusted = getAdjustedISOWeek(lastDateOfYear);\n  const firstDayOfYear = getISODay(firstDateOfYear) - 1;\n  const lastDayOfYear = getISODay(lastDateOfYear) - 1;\n\n  const yearData: CalendarYearData = [\n    ...(Array.from(\n      { length: 54 },\n      (_, weekIndex) =>\n        Array.from({ length: 7 }, (_, dayIndex) => {\n          if (\n            (weekIndex === firstWeekOfYearAdjusted && dayIndex < firstDayOfYear) ||\n            (weekIndex === lastWeekOfYearAdjusted && dayIndex > lastDayOfYear)\n          ) {\n            return -1;\n          } else if (weekIndex < firstWeekOfYearAdjusted || weekIndex > lastWeekOfYearAdjusted) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }) as CalendarWeekData\n    ) as CalendarYearData)\n  ];\n\n  return yearData;\n};\n\n/**\n * Converts a `ValuesPerDay` object to a `CalendarYearsData` object.\n *\n * @param valuesPerDay - The `ValuesPerDay` object to convert.\n * @returns The converted `CalendarYearsData` object.\n */\nexport const convertToCalendarYearData = (valuesPerDay: ValuesPerDay): CalendarYearsData => {\n  const { minimumYear, maximumYear } = extractYearRange(valuesPerDay);\n  const yearsData: CalendarYearsData = [];\n\n  for (let year = minimumYear; year <= maximumYear; year++) {\n    yearsData.push(initializeEmptyCalendarYearData(year));\n  }\n\n  for (const [dateString, value] of valuesPerDay) {\n    const date = parseISO(dateString);\n    const year = getYear(date);\n\n    const yearIndex = year - minimumYear;\n    const weekIndex = getAdjustedISOWeek(date);\n    const dayIndex = getISODay(date) - 1;\n\n    const yearData = yearsData[yearIndex];\n    if (!yearData) continue;\n\n    const weekData = yearData[weekIndex];\n    if (!weekData || weekData[dayIndex] === -1) continue;\n    weekData[dayIndex] = (weekData[dayIndex] ?? 0) + value;\n  }\n\n  return yearsData;\n};\n```\n\nDon't forget to export the functions in the `src/utils/index.ts` file:\n\n```ts filename=src/utils/index.ts\n// ...\nexport * from './calendar';\n```\n\nHere are the recap for each function:\n\n- `createUtcDate`: This function creates a UTC date object given the year, month, and day as input. It takes the year, month, and day, and creates a new Date object with the specified values, ensuring the time components are set to 0 (midnight). By using [`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC), it ensures the date is represented in the UTC timezone.\n- `extractYearRange`: This function takes a `ValuesPerDay` object as input and iterates through the date strings in the object to find the minimum and maximum years. It does this by first initializing the minimum year as `Infinity` and the maximum year as `-Infinity`. Then, for each date string, it parses the date and extracts the year, updating the minimum and maximum years accordingly.\n- `getAdjustedISOWeek`: This function calculates an adjusted ISO week number for a given date based on the project's requirements. It first gets the month and the ISO week number of the input date. Then, it checks if the date falls under the specific conditions (i.e., January with a week number greater than 50, or December with a week number less than 10). If the date meets any of these conditions, it returns the adjusted week number. Otherwise, it returns the original week number.\n- `initializeEmptyCalendarYearData`: This function initializes an empty `CalendarYearData` object for the given year. It first calculates the first and last dates of the year, along with their adjusted ISO week numbers and ISO day numbers (subtracting 1 to have a 0-based index). Then, it creates an array of 54 weeks (maximum possible weeks in a year), where each week is an array of 7 days. It fills the days with 0 if the day is part of the calendar year and -1 if the day is not part of the calendar year, using the calculated week and day numbers.\n- `convertToCalendarYearData`: This function converts a `ValuesPerDay` object into an array of `CalendarYearData` values. It starts by extracting the minimum and maximum years from the input data using the `extractYearRange` function. Then, it initializes an empty `CalendarYearsData` object for each year in the range using the `initializeEmptyCalendarYearData` function. Next, it iterates through the input data, parsing the date strings, and calculating the year, week, and day indexes. It then adds the value to the appropriate day in the corresponding `CalendarYearData`.\n\n## Step 4: Show the data in a 2D Grid\n\nNow that we have the data in the correct format, we can use it to create a 2D grid per year to visualize the data.\n\nCreate a new file called `src/components/FlatGrids.tsx` and add the following code:\n\n```tsx filename=src/components/FlatGrids.tsx\nimport type { FC } from 'react';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData } from '~/types';\n\nconst DAYS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst YearTable: FC<{\n  year: number;\n  data: CalendarYearData;\n}> = ({ year, data }) => {\n  return (\n    <table className=\"table-auto text-center\">\n      <caption className=\"text-xl\">{year}</caption>\n      <thead className=\"sticky top-0\">\n        <tr className=\"uppercase\">\n          <th></th>\n          {DAYS.map((week, index) => {\n            return (\n              <th key={`week-${index}`} className=\"min-w-[50px] border bg-gray-600 text-gray-200\">\n                {week}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((week, index) => {\n          return <WeekRow key={`week-${index}`} week={index} data={week} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst WeekRow: FC<{ week: number; data: CalendarWeekData }> = ({ week, data }) => {\n  return (\n    <tr>\n      <td className=\"px-3 py-1 text-sm\">{week.toString().padStart(2, '0')}</td>\n      {data.map((dayValue, index) => {\n        return (\n          <td\n            key={`day-${index}`}\n            className={`border px-2 py-1 ${dayValue < 0 ? 'bg-gray-200' : 'bg-white'}`}\n          >\n            {dayValue >= 0 && dayValue.toLocaleString('en-US')}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst FlatGrids: FC<{\n  data: CalendarYearsData;\n  startYear: number;\n}> = ({ data, startYear }) => {\n  return (\n    <div>\n      {data.map((yearData, index) => {\n        const year = startYear + index;\n        return <YearTable key={`year-${year}`} year={year} data={yearData} />;\n      })}\n    </div>\n  );\n};\n\nexport default FlatGrids;\n```\n\nThis just shows a simple table for each year, with the week numbers on the left, the days of the week on the top, and the word counts in the cells. If the cell has a negative value, it will only show a gray background.\n\nNext, add the `FlatGrids` component to the Home Page:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport FlatGrids from '~/components/FlatGrids';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n        <FlatGrids data={data} startYear={minYear} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\nAfter saving, you can now see the values in a 2D grid:\n\n![Show Tables Per Year](/img/posts/3d-bar-charts/step-04-show-year-array.png)\n\n## Step 5: Show the Data in a 3D Grid\n\nNow... let's make it 3D!\n\nCreate a new file called `src/components/TitanicGrids.tsx` and add the following code:\n\n```tsx filename=src/components/TitanicGrids.tsx\nimport { type FC, useMemo } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Box } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Temporary interface for the light values. */\ninterface LightValues {\n  /** The position of the light. */\n  position: [number, number, number];\n  /** The intensity of the light. */\n  intensity: number;\n  /** The color of the light. */\n  color: string;\n  /** Whether the light is enabled or not. */\n  enable: boolean;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  // START: The temporary values for the grid.\n  /** The size of each cell in the grid. */\n  const cellSize = 1.0;\n  /** The spacing between each cell in the grid. */\n  const cellSpacing = 0.2;\n  /** The spacing between each grid in the scene. */\n  const gridSpacing = 1.2;\n  /** The color of the cells. */\n  const color = '#a0185a';\n  /** The color of the unused cells. */\n  const unusedColor = '#cccccc';\n  /** The scale of the cells. */\n  const scale = 20;\n  /** The target of the camera. */\n  const target: [number, number, number] = [30, 2, 32];\n  /** Whether the camera should rotate or not. */\n  const rotate = true;\n  /** The speed of the camera rotation. */\n  const speed = 1.0;\n  /** The position of the camera. */\n  const camera: [number, number, number] = [-49, 17, 30];\n  /** The values for the first light. */\n  const light1: LightValues = {\n    position: [90, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  /** The values for the second light. */\n  const light2: LightValues = {\n    position: [-180, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  // END: The temporary values for the grid.\n\n  /** The function to calculate the height of the cells. */\n  const heightScale = useMemo(() => {\n    return (value: number) => (value / maxValue) * scale;\n  }, [maxValue, scale]);\n\n  return (\n    <>\n      <Canvas>\n        <OrbitControls target={target} autoRotate={rotate} autoRotateSpeed={speed} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, index) => {\n          const gridPosition: [number, number, number] = [\n            index * (gridSpacing * (cellSize + cellSpacing) * 7),\n            0,\n            0\n          ];\n          const yearValue = startYear + index;\n          return (\n            <group key={`grid-${yearValue}`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = heightScale(value);\n                  const cellPosition: [number, number, number] = [\n                    (cellSize + cellSpacing) * dayIndex,\n                    cellHeight / 2,\n                    (cellSize + cellSpacing) * weekIndex\n                  ];\n                  return (\n                    <Box\n                      key={`grid-${yearValue}-cell-${weekIndex}-${dayIndex}`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n```\n\nThis component is a bit more complex than the previous one.\n\nA quick explanation on the imported components:\n\n- It uses the `Canvas` component from `@react-three/fiber` to render the 3D scene.\n- The `PerspectiveCamera` is a camera type that simulates the way humans perceive the world. It projects the 3D scene onto a 2D plane, creating a sense of depth by making objects appear smaller as they get farther away.\n- The `OrbitControls` is a helper that allows the user to interact with the 3D scene using mouse or touch inputs. It enables panning, zooming, and orbiting the scene, providing an intuitive way to navigate the 3D space.\n- The [`hemisphereLight`](https://threejs.org/docs/?q=directionalLight#api/en/lights/hemisphereLight) and [`directionalLight`](https://threejs.org/docs/?q=directionalLight#api/en/lights/DirectionalLight) are used to add some lights to the scene.\n- The `Box` component is a convinient wrapper that used to render cuboid shapes.\n- The [`meshPhongMaterial`](https://threejs.org/docs/#api/en/materials/MeshPhongMaterial) is a material that is used to render the surface of the 3D objects. It is a good choice for rendering objects with a shiny surface.\n\nThe calculations for the positions and dimensions are as follows:\n\n- The `heightScale` function is used to calculate the height of the boxes based on its value, the maximum value in the dataset, and the scale factor. The height is calculated by dividing the cell value by the maximum value, then multiplying it by the scale factor. This ensures that the height of each cell is proportional to its value in relation to the `maxValue`.\n- The `gridPosition` determines the position of each year's grid in the 3D space. The X-coordinate is calculated by multiplying the index of the year by the total width of the 7 columns of cells (including spacing between cells), and then by the `gridSpacing` value. This ensures that each year's grid is placed at a consistent distance from the previous grid along the X-axis.\n- The `cellPosition` determines the position of each cell box within a year's grid. It is calculated based on the day and week indexes, `cellSize`, and `cellSpacing`. The X-coordinate is calculated by multiplying the day index by the sum of the `cellSize` and `cellSpacing`. The Y-coordinate is equal to half the cell height, ensuring that the base of each cell rests on the ground. The Z-coordinate is calculated by multiplying the week index by the sum of the `cellSize` and `cellSpacing`. This arrangement ensures that each cell is positioned correctly within the grid.\n\nNow update the index page to use the new component:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport TitanicGrids from '~/components/TitanicGrids';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <TitanicGrids data={data} startYear={minYear} maxValue={maxValue} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\nIf you run the app now, you should see something like this:\n\n![Add 3D Chart](/img/posts/3d-bar-charts/step-05-add-3d-chart.png)\n\nYou can move the camera around by clicking and dragging the left mouse button, or by using touch inputs. You can also zoom in and out by scrolling the mouse wheel, or by pinching the screen. You can use the right mouse button or two finger drag to pan the camera.\n\n## Step 6: Adding a helper GUI to customize the chart\n\nWe're almost done! There is one library we can add to make the chart easier to customize.\n\nOpen your `src/components/TitanicGrids.tsx` file and update it to look like this:\n\n```tsx filename=src/components/TitanicGrids.tsx\nimport { type FC, useMemo } from 'react';\nimport { useControls, Leva } from 'leva';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Box } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const { cellSize, cellSpacing, gridSpacing, color, unusedColor, scale } = useControls('Cells', {\n    /** The size of each cell in the grid. */\n    cellSize: 1.0,\n    /** The spacing between each cell in the grid. */\n    cellSpacing: 0.2,\n    /** The spacing between each grid in the scene. */\n    gridSpacing: 1.2,\n    /** The color of the cells. */\n    color: '#a0185a',\n    /** The color of the unused cells. */\n    unusedColor: '#cccccc',\n    /** The scale of the cells. */\n    scale: {\n      value: 20,\n      min: 1\n    }\n  });\n\n  const { target, rotate, speed, camera } = useControls('Controls', {\n    /** The position of the camera. */\n    camera: [-49, 17, 30],\n    /** The target of the camera. */\n    target: [30, 2, 32],\n    /** Whether the camera should rotate or not. */\n    rotate: true,\n    /** The speed of the camera rotation. */\n    speed: {\n      value: 1.0,\n      step: 0.1,\n      min: 0\n    }\n  });\n\n  /** The values for the first light. */\n  const light1 = useControls('Light 1', {\n    /** The position of the light. */\n    position: {\n      value: [90, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const light2 = useControls('Light 2', {\n    /** The position of the light. */\n    position: {\n      value: [-180, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  /** The function to calculate the height of the cells. */\n  const heightScale = useMemo(() => {\n    return (value: number) => (value / maxValue) * scale;\n  }, [maxValue, scale]);\n\n  return (\n    <>\n      <Leva collapsed />\n      <Canvas>\n        <OrbitControls target={target} autoRotate={rotate} autoRotateSpeed={speed} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, index) => {\n          const gridPosition: [number, number, number] = [\n            index * (gridSpacing * (cellSize + cellSpacing) * 7),\n            0,\n            0\n          ];\n          return (\n            <group key={`grid-${startYear + index}`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = heightScale(value);\n                  const cellPosition: [number, number, number] = [\n                    (cellSize + cellSpacing) * dayIndex,\n                    cellHeight / 2,\n                    (cellSize + cellSpacing) * weekIndex\n                  ];\n                  return (\n                    <Box\n                      key={`${weekIndex}-${dayIndex}`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n```\n\nWe are using the `leva` library to add a panel to the right side of the screen. This floating panel will allow us to change the appearance of the grids in real time.\n\n![Customize 3D Chart](/img/posts/3d-bar-charts/step-06-customize-3d-chart.png)\n\n## Conclusion\n\nIn conclusion, we have successfully created a 3D grid visualization for time-series data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber). To recap the steps we followed:\n\n1. [Project Setup](#step-1-project-setup): We initialized a new React project using [Create T3 App](https://create.t3.gg/) and installed the necessary dependencies.\n2. [Preparing our Data](#step-2-preparing-our-data): We fetched the raw dataset and transformed it into a format suitable for analysis.\n3. [Creating the Time-series Data](#step-3-creating-the-time-series-data): We transformed the data again, this time organizing it by year and week. We also learned the basics of the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard and modified it to fit our needs.\n4. [Show the data in a 2D Grid](#step-4-show-the-data-in-a-2d-grid): We started to visualize the data in a simple 2D grid format, understanding the structure of the data and preparing it for the next step.\n5. [Show the Data in a 3D Grid](#step-5-show-the-data-in-a-3d-grid): We built upon our 2D grid and created a 3D grid representing the data points. This provided a more visually appealing representation of the time-series data.\n6. [Adding a helper GUI to customize the chart](#step-6-adding-a-helper-gui-to-customize-the-chart): We used the [`leva` library](https://github.com/pmndrs/leva) to add a helper interface for customizing the appearance and behavior of the grid elements in real-time.\n\nThis tutorial is just the beginning of what you can do with React Three Fiber. Potential improvements could include:\n\n- Adding tooltips and labels to display more information about each bar on hover.\n- Adding animations to the bars for a more dynamic user experience.\n- Integrating filters and controls for users to modify the data displayed in real-time.\n\nI encourage you to experiment with the code and build upon it to create your own unique 3D grid visualizations. With the foundation laid out in this tutorial, you can now explore the possibilities of React Three Fiber and create even more complex and engaging 3D visualizations.\n\nHappy coding!\n","excerpt":"\nIn this blog post, we will create a 3D visualization of our timeseries data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber), a React renderer for [Three.js](https://threejs.org/). This is inspired by [GitHub Skyline](https://skyline.github.com/), a web application that create...","serializedContent":{"compiledSource":"var h=Object.defineProperty,m=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var s=(a,t,n)=>t in a?h(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n,e=(a,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(a,n,t[n]);if(i)for(var n of i(t))o.call(t,n)&&s(a,n,t[n]);return a},d=(a,t)=>m(a,c(t));var p=(a,t)=>{var n={};for(var r in a)l.call(a,r)&&t.indexOf(r)<0&&(n[r]=a[r]);if(a!=null&&i)for(var r of i(a))t.indexOf(r)<0&&o.call(a,r)&&(n[r]=a[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:a}=r,t=p(r,[\"components\"]);return mdx(MDXLayout,d(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In this blog post, we will create a 3D visualization of our timeseries data using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pmndrs/react-three-fiber\"}),\"React Three Fiber\"),\", a React renderer for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://threejs.org/\"}),\"Three.js\"),\". This is inspired by \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://skyline.github.com/\"}),\"GitHub Skyline\"),\", a web application that creates a 3D visualization of a user's GitHub contributions.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/titan.png\",alt:\"Project Titan\"}))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": You can find the live version at \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://titan.inndex.omg.lol/\"}),\"The Wandering Inndex\"),\" and the full source code on \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/wandering-inndex/titan\"}),\"the wandering-inndex/titan repository\"),\".\")),mdx(\"p\",null,\"This is rather long, so here's a table of contents:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-1-project-setup\"}),\"Step 1: Project Setup\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#prerequisites\"}),\"Prerequisites\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#create-a-new-nextjs-project\"}),\"Create a new Next.js project\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#install-additional-project-dependencies\"}),\"Install Additional Project Dependencies\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#clean-up-the-home-page\"}),\"Clean up the Home Page\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-2-preparing-our-data\"}),\"Step 2: Preparing our Data\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#creating-the-type-definitions\"}),\"Creating the Type Definitions\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#convert-the-chapter-data-to-a-mapping-of-dates-to-values\"}),\"Convert the Chapter data to a mapping of dates to values\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#show-the-parsed-chapter-data-on-the-page\"}),\"Show the parsed Chapter data on the page\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-3-creating-the-time-series-data\"}),\"Step 3: Creating the Time-series Data\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#defining-the-time-series-data-types\"}),\"Defining the Time-series Data Types\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#gregorian-calendar-vs-iso-8601-calendar\"}),\"Gregorian Calendar vs ISO 8601 Calendar\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#modified-version\"}),\"Modified Version\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#using-date-fns\"}),\"Using date-fns\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#converting-the-valuesperday-mapping-to-our-desired-data-structure\"}),\"Converting the ValuesPerDay mapping to our desired data structure\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-4-show-the-data-in-a-2d-grid\"}),\"Step 4: Show the data in a 2D Grid\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-5-show-the-data-in-a-3d-grid\"}),\"Step 5: Show the Data in a 3D Grid\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Step 6: Adding a helper GUI to customize the chart\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#conclusion\"}),\"Conclusion\"))),mdx(\"hr\",null),mdx(\"h2\",e({},{id:\"step-1-project-setup\"}),\"Step 1: Project Setup\"),mdx(\"p\",null,\"In this step, we will be creating a new project using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\". If you already have a React project set up, just install the \",mdx(\"a\",e({parentName:\"p\"},{href:\"#install-additional-project-dependencies\"}),\"additional dependencies listed below\"),\" and skip to the \",mdx(\"a\",e({parentName:\"p\"},{href:\"#step-2-preparing-our-data\"}),\"next step\"),\".\"),mdx(\"h3\",e({},{id:\"prerequisites\"}),\"Prerequisites\"),mdx(\"p\",null,\"Install a version manager for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nodejs.org/en\"}),\"Node.js\"),\" for your operating system:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/nvm-sh/nvm\"}),\"Node Version Manager\"),\" (Linux/macOS)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/coreybutler/nvm-windows\"}),\"NVM for Windows\"),\" (Windows)\")),mdx(\"p\",null,\"After installing \",mdx(\"inlineCode\",{parentName:\"p\"},\"nvm\"),\", install the latest LTS version of \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nodejs.org/en\"}),\"Node.js\"),\" by running:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`# Linux/macOS\n$ nvm install --lts\n\n# Windows\n$ nvm install lts\n`)),mdx(\"p\",null,\"Once that's done, we shall install \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://pnpm.io/\"}),\"pnpm\"),\", an alternative to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.npmjs.com/\"}),\"npm\"),\" that is faster and uses less disk space. To install \",mdx(\"inlineCode\",{parentName:\"p\"},\"pnpm\"),\", run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ npm install -g pnpm\n`)),mdx(\"h3\",e({},{id:\"create-a-new-nextjs-project\"}),\"Create a new Next.js project\"),mdx(\"p\",null,\"For this project, we will use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\" to bootstrap our project. Create T3 App is a CLI tool that helps you create a new project with a pre-configured setup for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nextjs.org/\"}),\"Next.js\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/\"}),\"TypeScript\"),\", and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://tailwindcss.com/\"}),\"Tailwind CSS\"),\".\"),mdx(\"p\",null,\"To create a new T3 project, run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm create t3-app@latest\n#     ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n#    / __| _ \\\\ __| /  \\\\_   _| __| |_   _|__ /   /  \\\\ | _ \\\\ _ \\\\\n#   | (__|   / _| / /\\\\ \\\\| | | _|    | |  |_ \\\\  / /\\\\ \\\\|  _/  _/\n#    \\\\___|_|_\\\\___|_/\\xAF\\xAF\\\\_\\\\_| |___|   |_| |___/ /_/\\xAF\\xAF\\\\_\\\\_| |_|\n# ? What will your project be called? (my-t3-app) titan\n# ? Will you be using JavaScript or TypeScript? TypeScript\n# ? Which packages would you like to enable? tailwind\n# ? Initialize a new git repository? (Y/n) Yes\n# ? Would you like us to run pnpm install? (Y/n) Yes\n# ? What import alias would you like configured? ~/\n#\n# \\u2714 titan scaffolded successfully!\n`)),mdx(\"p\",null,\"Feel free to select any name you'd like for your project. However, for the purpose of this guide, we'll go with \",mdx(\"inlineCode\",{parentName:\"p\"},\"titan\"),\", inspired by a character found in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\", one of the longest pieces of fiction written in English. The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.patreon.com/pirateaba\"}),\"author\"),\" has been writing consistently since 2016, and we'll utilize their writing data for our visualization.\"),mdx(\"h3\",e({},{id:\"install-additional-project-dependencies\"}),\"Install Additional Project Dependencies\"),mdx(\"p\",null,\"After the project is created, change into the project directory:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ cd titan\n`)),mdx(\"p\",null,\"Install additional dependencies for our project:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm add three @types/three @react-three/fiber @react-three/drei leva date-fns yaml\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\" is a JavaScript 3D library that we will use to create our 3D visualization.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"@types/three\"),\" is the TypeScript type definitions for \",mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"@react-three/fiber\"),\" is a React renderer for \",mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"@react-three/drei\"),\" is a collection of React components for \",mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"leva\"),\" is a UI library that we will use to create controls for our visualization.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"date-fns\"),\" is a date utility library that we will use to parse and format dates.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"yaml\"),\" is a \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://yaml.org/\"}),\"YAML\"),\" parser that we will use to parse our data source.\")),mdx(\"h3\",e({},{id:\"clean-up-the-home-page\"}),\"Clean up the Home Page\"),mdx(\"p\",null,\"Open the project in your favorite code editor and delete the contents of \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/pages/index.tsx\"),\". Replace it with the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst Home: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"Add a style to your \",mdx(\"inlineCode\",{parentName:\"p\"},\"body\"),\" tag by updating \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/styles/globals.css\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-css\",metastring:\"filename=src/styles/globals.css\",filename:\"src/styles/globals.css\"}),`@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-100;\n  }\n}\n`)),mdx(\"p\",null,\"Afterwards, you can start the development server by running:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm dev\n`)),mdx(\"p\",null,\"It should show an empty page with our project name at the top.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-01-empty-page.png\",alt:\"Empty Page\"}))),mdx(\"h2\",e({},{id:\"step-2-preparing-our-data\"}),\"Step 2: Preparing our Data\"),mdx(\"p\",null,\"For this project, we will be fetching data from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://inndex.omg.lol/\"}),\"The Wandering Inndex\"),\", a community-driven project that aims to collect data about \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\" and make it available for the public. The raw data for the published chapters is available in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://yaml.org/\"}),\"YAML\"),\" format, and we will be using the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.npmjs.com/package/yaml\"}),\"yaml\"),\" package to parse the data.\"),mdx(\"h3\",e({},{id:\"creating-the-type-definitions\"}),\"Creating the Type Definitions\"),mdx(\"p\",null,\"In \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/\"}),\"TypeScript\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/docs/handbook/2/type-declarations.html\"}),\"type declarations\"),\" are used to define the structure of objects, interfaces, classes, and functions. It provides clarity and documentation to the codebase, making it easier for developers to understand and maintain the project.\"),mdx(\"p\",null,\"To get started, let's declare the type definitions that we will use in our application. Luckily for us, the data that we will be using already has \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/wandering-inndex/seed-data/blob/main/types/media.ts\"}),\"type definitions available\"),\". We will be using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" interface, which represents the individual chapter data. We will only be using a subset of the available fields from the full type definitions, so let's create a new file at \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/chapters.ts\"),\" and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/chapters.ts\",filename:\"src/types/chapters.ts\"}),`/** Minimal interface that represents the individual Chapter data. */\nexport interface Chapter {\n  /** Unique ID for the chapter. */\n  id: string;\n  /** Flags for the chapter. */\n  meta: {\n    /** If true, then it will be shown in the table of contents. */\n    show: boolean;\n  };\n  /** Specifies that a chapter is part of a bigger collection. */\n  partOf: {\n    /** Part of a Web Novel Volume. */\n    webNovel?: {\n      /** The volume this is collected under. */\n      ref: number | null;\n      /**\n       * The timestamp when this chapter is originally published. This can be\n       * found via the \\`meta[property='article:published_time']\\` selector.\n       */\n      published: string | null;\n      /**\n       * Total words based on https://wordcounter.net/. Without the title,\n       * author's notes, artworks, etc.\n       */\n      totalWords: number | null;\n    };\n  };\n}\n`)),mdx(\"p\",null,\"We only want to show the chapters that are marked as to be shown in the table of contents (\",mdx(\"inlineCode\",{parentName:\"p\"},\"meta.show === true\"),\") and is part of a Web Novel Volume (\",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.ref > 0\"),\"). We will also be using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.published\"),\" field to determine the date that the chapter was published and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.totalWords\"),\" field to determine the number of words for that chapter.\"),mdx(\"p\",null,\"We should also create the type definitions for our Time-related data. Create \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/calendar.ts\"),\" and add the following:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/calendar.ts\",filename:\"src/types/calendar.ts\"}),`// TODO: Add type definition for \\`CalendarWeekData\\`.\n// TODO: Add type definition for \\`CalendarYearData\\`.\n// TODO: Add type definition for \\`CalendarYearsData\\`.\n\n/**\n * Maps a value per date string.\n * The date string must be in a valid ISO 8601 format.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @example\n * const map: ValuesPerDay = new Map<string, number>([\n *  [\"2021-01-01\", 1000],\n *  [\"2021-01-02\", 2000],\n *  [\"2021-01-03\", 3000],\n * ]);\n */\nexport type ValuesPerDay = Map<string, number>;\n`)),mdx(\"p\",null,\"Our goal for this step is to convert the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data into a mapping of word counts by date (\",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\").\"),mdx(\"p\",null,\"Afterwards, create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/index.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/index.ts\",filename:\"src/types/index.ts\"}),`export * from './calendar';\nexport * from './chapters';\n`)),mdx(\"p\",null,\"This will allow us to import all of our types from a single location (e.g. \",mdx(\"inlineCode\",{parentName:\"p\"},'import { ValuesPerDay } from \"~/types/\";'),\").\"),mdx(\"h3\",e({},{id:\"convert-the-chapter-data-to-a-mapping-of-dates-to-values\"}),\"Convert the Chapter data to a mapping of dates to values\"),mdx(\"p\",null,\"Let's create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/chapters.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/chapters.ts\",filename:\"src/utils/chapters.ts\"}),`import { isMatch, formatISO, parseISO } from 'date-fns';\n\nimport type { Chapter, ValuesPerDay } from '~/types';\n\n/**\n * Checks if a chapter should be included based on the given conditions.\n *\n * @param {Chapter} chapter - The chapter to check.\n * @returns {boolean} - \\`true\\` if the chapter should be included, \\`false\\`\n * otherwise.\n */\nexport const shouldIncludeChapter = (chapter: Chapter): boolean => {\n  const shouldShow = chapter.meta.show === true;\n  const hasValidWebNovelRef = (chapter.partOf.webNovel?.ref ?? 0) > 0;\n  const hasValidPublishedDate = isMatch(\n    chapter.partOf.webNovel?.published ?? '',\n    \"yyyy-MM-dd'T'HH:mm:ssXXX\"\n  );\n\n  return shouldShow && hasValidWebNovelRef && hasValidPublishedDate;\n};\n\n/** The return data from the \\`convertChaptersToMapping\\` function. */\nexport interface ConvertChaptersToMappingOutput {\n  /** This maps a date string to the number of words written on that day. */\n  mapping: ValuesPerDay;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/**\n * Converts an array of \\`Chapter\\` objects to a \\`ConvertChaptersToMappingOutput\\`.\n *\n * @param {Chapter[]} chapters - The array of \\`Chapter\\` objects.\n * @returns {ConvertChaptersToMappingOutput} - The output of the conversion.\n */\nexport const convertChaptersToMapping = (chapters: Chapter[]): ConvertChaptersToMappingOutput => {\n  const mapping: ValuesPerDay = new Map();\n\n  let minYear = Number.POSITIVE_INFINITY;\n  let maxYear = Number.NEGATIVE_INFINITY;\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n\n  for (const chapter of chapters) {\n    if (!shouldIncludeChapter(chapter)) {\n      continue;\n    }\n\n    const publishedDate = chapter.partOf.webNovel?.published ?? '';\n    const totalWords = chapter.partOf.webNovel?.totalWords ?? 0;\n\n    if (publishedDate) {\n      const date = parseISO(publishedDate);\n      const dateKey = formatISO(date, {\n        representation: 'date'\n      });\n\n      const existingWordCount = mapping.get(dateKey) ?? 0;\n      const newWordCount = existingWordCount + totalWords;\n      mapping.set(dateKey, newWordCount);\n\n      const year = date.getFullYear();\n      minYear = Math.min(minYear, year);\n      maxYear = Math.max(maxYear, year);\n      minValue = Math.min(minValue, newWordCount);\n      maxValue = Math.max(maxValue, newWordCount);\n    }\n  }\n\n  return { mapping, minYear, maxYear, minValue, maxValue };\n};\n`)),mdx(\"p\",null,\"This file contains a utility function that will help us convert our \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data into a mapping of dates to word counts. The code is fairly straightforward, but let's go over it in more detail.\"),mdx(\"p\",null,\"It starts by defining a \",mdx(\"inlineCode\",{parentName:\"p\"},\"shouldIncludeChapter\"),\" function that will check if a chapter should be included based on the given conditions. This function will return \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\" if the chapter should be included, and \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\" otherwise. The conditions are as follows:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.meta.show\"),\" must be \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.partOf.webNovel.ref\"),\" must be greater than 0.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.partOf.webNovel.published\"),\" must be a valid date string.\")),mdx(\"p\",null,\"Next, we define a \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" function that will convert an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" objects to a \",mdx(\"inlineCode\",{parentName:\"p\"},\"ConvertChaptersToMappingOutput\"),\". This function will return an object that contains the following properties:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"mapping\"),\": This maps a date string to the number of words written on that day.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"minYear\"),\": The minimum year in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"maxYear\"),\": The maximum year in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"minValue\"),\": The minimum value in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"maxValue\"),\": The maximum value in the dataset.\")),mdx(\"p\",null,\"The function will loop through each chapter and check if it should be included. If it should be included, it will add the number of words written on that day to the mapping. It will also update the \",mdx(\"inlineCode\",{parentName:\"p\"},\"minYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"minValue\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxValue\"),\" properties as needed.\"),mdx(\"p\",null,\"Like before, create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/index.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/index.ts\",filename:\"src/utils/index.ts\"}),`export * from './chapters';\n`)),mdx(\"h3\",e({},{id:\"show-the-parsed-chapter-data-on-the-page\"}),\"Show the parsed Chapter data on the page\"),mdx(\"p\",null,\"Let's update our \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/pages/index.tsx\"),\" page to fetch our \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data from the source repository. Afterwards, we'll convert the data using \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" and show the relevant data on the page.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping } from '~/utils';\nimport type { Chapter } from '~/types';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n\n  return {\n    props: {\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\"}),\"getServerSideProps\"),\" is a special Next.js function that will run on the server before the page is rendered. We are using this function to fetch the YAML data from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\"}),\"our data source\"),\". We will then convert the data to a mapping of dates to values using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" function we created earlier. We are then returning the \",mdx(\"inlineCode\",{parentName:\"p\"},\"minYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"minValue\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxValue\"),\" properties as props to our \",mdx(\"inlineCode\",{parentName:\"p\"},\"Home\"),\" component. We are then showing the values as a simple HTML list.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-02-with-values.png\",alt:\"With Values\"}))),mdx(\"h2\",e({},{id:\"step-3-creating-the-time-series-data\"}),\"Step 3: Creating the Time-series Data\"),mdx(\"h3\",e({},{id:\"defining-the-time-series-data-types\"}),\"Defining the Time-series Data Types\"),mdx(\"p\",null,\"Now, let's go define the data structure that will be used to visualize the data. We'll start by updating the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/calendar.ts\"),\" file and adding the following code to the top:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/calendar.ts\",filename:\"src/types/calendar.ts\"}),`/**\n * Represents a tuple of a given type \\`T\\` and fixed length \\`N\\`.\n *\n * @see https://stackoverflow.com/a/74801694\n */\ntype Tuple<T, N extends number, R extends T[] = []> = number extends N\n  ? T[]\n  : R['length'] extends N\n  ? R\n  : Tuple<T, N, [T, ...R]>;\n\n/**\n * An array that represents values per day of the week.\n *\n * For this project, the first day of the week will be Monday, as per ISO 8601:\n *\n * - INDEX 0: MON\n * - INDEX 1: TUE\n * - INDEX 2: WED\n * - INDEX 3: THU\n * - INDEX 4: FRI\n * - INDEX 5: SAT\n * - INDEX 6: SUN\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * If there are no values for that specific day, it will be 0.\n * If that day is not part of the calendar year, it will be -1.\n *\n * @example\n * const week: CalendarWeekData = [1000, 2000, 3000, 4000, 5000, 6000, 7000];\n * const weekWithoutValues: CalendarYearData = [0, 0, 0, 0, 0, 0, 0];\n * const weekWithDaysNotInYear: CalendarYearData = [-1, -1, -1, -1, -1, -1, -1];\n * const weekMixed: CalendarYearData = [-1, -1, 0, 0, 5000, 0, 7000];\n */\nexport type CalendarWeekData = Tuple<number, 7>;\n\n/**\n * An array that represents values per week of the year.\n *\n * Most years have 52 weeks, but if the year starts on a Thursday or is a leap\n * year that starts on a Wednesday, that particular year will have 53 weeks.\n *\n * In ISO 8601, if January 1 is on a Monday, Tuesday, Wednesday, or Thursday, it\n * is in week 1. If January 1 is on a Friday, Saturday or Sunday, it is in week\n * 52 or 53 of the previous year (there is no week 0). December 28 will always\n * be in the last week of its year.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * For this project:\n *\n * - We will *ALWAYS* create a 54-week year.\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1. The total\n *   weeks will be coming from to \\`date-fns\\`:\n *   {@link https://date-fns.org/docs/getISOWeeksInYear}\n */\nexport type CalendarYearData = Array<CalendarWeekData>;\n\n/** An array that represents values per year. */\nexport type CalendarYearsData = Array<CalendarYearData>;\n\n// ...\n//\n// Definition for \\`ValuesPerDay\\`\n`)),mdx(\"p\",null,\"Our goal for this step is to convert the \",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\" mapping to an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\". A \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\" is just an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarWeekData\"),\" values, which are just arrays of word counts per week.\"),mdx(\"p\",null,\"To help you visualize this multi-dimensional array, we'll create a 2D grid, where the X-axis represents the week number, the Y-axis represents the day, and the cell value represents the word count.\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-grid.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-grid.png\",alt:\"Year Grid\"})))),mdx(\"p\",null,\"You may have noticed a few things about this grid:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The week starts on Monday (index 0) and ends on Sunday (index 6).\"),mdx(\"li\",{parentName:\"ul\"},\"There are 54 weeks (indexes 0 to 53) instead of the usual 52 or 53 weeks.\")),mdx(\"p\",null,\"Firstly, it's important to note that the beginning of the week \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.timeanddate.com/date/week-numbers.html\"}),\"differs across cultures\"),\", and the number of weeks in a year can vary too. Some years have 52 weeks, others have 53 weeks on leap years. Additionally, since the start of the week can vary, the number of weeks can differ as well. For this project, we will use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"ISO 8601 standard\"),\" as our basis, with some modifications.\"),mdx(\"h3\",e({},{id:\"gregorian-calendar-vs-iso-8601-calendar\"}),\"Gregorian Calendar vs ISO 8601 Calendar\"),mdx(\"p\",null,\"ISO 8601 is a standard that defines a way to represent dates and times. For further reading, check out \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"Wikipedia: ISO 8601\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar\"}),\"Wikipedia: ISO week date\"),\", and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://help.tableau.com/current/pro/desktop/en-us/dates_calendar.htm\"}),\"Tableau: ISO-8601 Week-Based Calendar\"),\".\"),mdx(\"p\",null,\"Here are some of the differences between the Gregorian Calendar and the ISO 8601 Calendar:\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Gregorian Calendar\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"ISO 8601 Calendar\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Will always start the year on January 1.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Years always start on the first Monday closest to January 1. This means the year may start anywhere between December 29 and January 4.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Permits weeks to extend across years.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Weeks have exactly 7 days and start on a Monday. Each week belongs to single year.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Years can have 365 or 366 days.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"An ISO week-numbering year has 52 or 53 full weeks. That is 364 or 371 days.\")))),mdx(\"p\",null,\"Below, you can see the difference when transitioning from December 2004 to January 2005. The Gregorian Calendar starts the year on January 1, while the ISO 8601 Calendar starts the year on January 3.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-iso-8601-calendar.png\",alt:\"Different Calendars\"}))),mdx(\"p\",null,\"Calendar applications will usually use the Gregorian calendar, and will have the option to show the ISO 8601 week numbers, as well.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-combined-calendars.png\",alt:\"Combined Calendars\"}))),mdx(\"h3\",e({},{id:\"modified-version\"}),\"Modified Version\"),mdx(\"p\",null,\"ISO 8601 is a very useful standard, but we need to modify it to fit our requirements:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Our year will always have 54 weeks (378 days). This ensures that all years have the same number of columns when we show the grids side-by-side.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"The extra week will be placed at the start, giving it the index of 0.\"))),mdx(\"li\",{parentName:\"ul\"},\"The week number will follow the ISO 8601 standard, with the following exceptions:\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"If the date's month is January but the ISO week number is greater than 50, change the week number to 0.\"),mdx(\"li\",{parentName:\"ul\"},\"If the date's month is December but the ISO week number is less than 10, change the week number to the max ISO 8601 week number plus 1.\"))),mdx(\"li\",{parentName:\"ul\"},\"Our weeks will start on Monday. The days will have 0 based indexes, so Monday will be 0 and Sunday will be 6.\"),mdx(\"li\",{parentName:\"ul\"},\"In our data structure, the word counts for each week will be represented as an array of 7 numbers. If the week has unused slots, the values for those days will be represented as negative numbers.\")),mdx(\"p\",null,\"Let's try to visualize this modified calendar:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-combined-modified-calendars.png\",alt:\"Combined and Modified Calendars\"}))),mdx(\"p\",null,\"2004 will end on Week 53, with two unused days at the end (marked as \",mdx(\"inlineCode\",{parentName:\"p\"},\"X\"),\" in the chart). 2005 will start on Week 0, with five unused days at the beginning (marked as \",mdx(\"inlineCode\",{parentName:\"p\"},\"X\"),\" in the chart). Week 1 will start on January 3. If we continue and fill up our grid for the year 2005 with our dates, we will get:\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-2005-grid.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-2005-grid.png\",alt:\"Year 2005 Grid\"})))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Notice that we have 13 unused days for 2005. Week 0 has 5 at the start, Week 52 has 1 at the end, and Week 53 has all 7 slots unused.\")),mdx(\"p\",null,\"In our data structure, we will initialize the grid with negative numbers for the unused days, and 0 for the rest:\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png\",alt:\"Year 2005 Grid Initialized\"})))),mdx(\"h3\",e({},{id:\"using-date-fns\"}),\"Using date-fns\"),mdx(\"p\",null,\"To make our lives easier, we'll use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/\"}),\"date-fns\"),\" library to help us with the ISO 8601 calculations. We will use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getISOWeek\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getISOWeek\")),\" function to get the week number for a given date, and the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getISOWeeksInYear\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getISOWeeksInYear\")),\" function to get the number of weeks in a given year. We can get the day index by using the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getDay\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getDay\")),\" function and subtracting 1 from the result.\"),mdx(\"p\",null,\"Let's try checking the ISO 8061 values for a few dates. We can create a function that will return an object with the values we need:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\"}),`import {\n  formatISO,\n  getDay,\n  getISODay,\n  getISOWeek,\n  getISOWeeksInYear,\n  getISOWeekYear\n} from 'date-fns';\n\nconst newDate = (year: number, month: number, day: number): Date => {\n  // The month is 0-based, so January is 0 and December is 11.\n  return new Date(year, month - 1, day, 0, 0, 0, 0);\n};\n\nconst analyzeDate = (date: Date) => {\n  return {\n    // Extracts the YYYY-MM-DD portion of the Date object.\n    formattedDate: formatISO(date, { representation: 'date' }),\n    // The day of the week, 0-6, where Sunday is the first day of the week.\n    gregDay: getDay(date),\n    // The day of the week, 1-7, where Monday is the first day of the week.\n    isoDay: getISODay(date),\n    // The year of the date.\n    gregYear: date.getFullYear(),\n    // The ISO week-numbering year of the date.\n    isoWeekYear: getISOWeekYear(date),\n    // The ISO week-numbering week of the date.\n    isoWeek: getISOWeek(date),\n    // The number of weeks in the ISO week-numbering year.\n    isoWeeksInYear: getISOWeeksInYear(date)\n  };\n};\n`)),mdx(\"p\",null,\"Now, let's check the results for the dates \",mdx(\"inlineCode\",{parentName:\"p\"},\"2004-12-28\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"2005-01-04\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\"}),`console.table([\n  analyzeDate(newDate(2004, 12, 28)),\n  analyzeDate(newDate(2004, 12, 29)),\n  analyzeDate(newDate(2004, 12, 30)),\n  analyzeDate(newDate(2004, 12, 31)),\n  analyzeDate(newDate(2005, 1, 1)),\n  analyzeDate(newDate(2005, 1, 2)),\n  analyzeDate(newDate(2005, 1, 3)),\n  analyzeDate(newDate(2005, 1, 4))\n]);\n`)),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"(index)\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"formattedDate\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"gregDay\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoDay\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"gregYear\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeekYear\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeek\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeeksInYear\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-28\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-29\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-30\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-31\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-01\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-02\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"7\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-03\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"52\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"7\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-04\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"52\")))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Take note of the differences between the Gregorian and ISO 8601 years and weeks. Using the wrong functions can lead to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.youtube.com/watch?v=D3jxx8Yyw1c\"}),\"unwanted bugs in your application\"),\".\")),mdx(\"h3\",e({},{id:\"converting-the-valuesperday-mapping-to-our-desired-data-structure\"}),\"Converting the ValuesPerDay mapping to our desired data structure\"),mdx(\"p\",null,\"Let's now create a function that will convert our \",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\" mapping to an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\" data. Create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/calendar.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/calendar.ts\",filename:\"src/utils/calendar.ts\"}),`import { getISODay, getISOWeek, getISOWeeksInYear, getYear, parseISO } from 'date-fns';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData, ValuesPerDay } from '~/types';\n\n/** Creates a UTC date. */\nexport const createUtcDate = (year: number, month: number, day: number) =>\n  new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));\n\n/**\n * Extracts the minimum and maximum years from the given \\`ValuesPerDay\\`\n * object.\n *\n * @param valuesPerDay - The \\`ValuesPerDay\\` object to extract the year\n * range from.\n * @returns An object containing the \\`minimumYear\\` and \\`maximumYear\\`.\n */\nexport const extractYearRange = (\n  valuesPerDay: ValuesPerDay\n): { minimumYear: number; maximumYear: number } => {\n  let minimumYear = Infinity;\n  let maximumYear = -Infinity;\n\n  for (const dateString of valuesPerDay.keys()) {\n    const year = getYear(parseISO(dateString));\n\n    minimumYear = Math.min(minimumYear, year);\n    maximumYear = Math.max(maximumYear, year);\n  }\n\n  return { minimumYear, maximumYear };\n};\n\n/**\n * Given a date, get its adjusted ISO week number based on the project\n * requirements:\n *\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1.\n *\n * @param {Date} date - The date to get the adjusted ISO week number for.\n * @returns {number} - The adjusted ISO week number.\n */\nexport const getAdjustedISOWeek = (date: Date): number => {\n  const month = date.getMonth();\n  const isoWeek = getISOWeek(date);\n  const isoWeeksInYear = getISOWeeksInYear(date);\n\n  if (month === 0 && isoWeek > 50) {\n    return 0;\n  } else if (month === 11 && isoWeek < 10) {\n    return isoWeeksInYear + 1;\n  }\n\n  return isoWeek;\n};\n\n/**\n * Initializes an empty \\`CalendarYearData\\`.\n *\n * If there are no values for that specific day, it will be \\`0\\`. If that day is\n * not part of the calendar year, it will be \\`-1\\`.\n *\n * @param {number} year - The year to initialize the data for.\n * @returns {CalendarYearData} a \\`CalendarYearData\\` with default values.\n */\nexport const initializeEmptyCalendarYearData = (year: number): CalendarYearData => {\n  const firstDateOfYear = createUtcDate(year, 1, 1);\n  const lastDateOfYear = createUtcDate(year, 12, 31);\n  const firstWeekOfYearAdjusted = getAdjustedISOWeek(firstDateOfYear);\n  const lastWeekOfYearAdjusted = getAdjustedISOWeek(lastDateOfYear);\n  const firstDayOfYear = getISODay(firstDateOfYear) - 1;\n  const lastDayOfYear = getISODay(lastDateOfYear) - 1;\n\n  const yearData: CalendarYearData = [\n    ...(Array.from(\n      { length: 54 },\n      (_, weekIndex) =>\n        Array.from({ length: 7 }, (_, dayIndex) => {\n          if (\n            (weekIndex === firstWeekOfYearAdjusted && dayIndex < firstDayOfYear) ||\n            (weekIndex === lastWeekOfYearAdjusted && dayIndex > lastDayOfYear)\n          ) {\n            return -1;\n          } else if (weekIndex < firstWeekOfYearAdjusted || weekIndex > lastWeekOfYearAdjusted) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }) as CalendarWeekData\n    ) as CalendarYearData)\n  ];\n\n  return yearData;\n};\n\n/**\n * Converts a \\`ValuesPerDay\\` object to a \\`CalendarYearsData\\` object.\n *\n * @param valuesPerDay - The \\`ValuesPerDay\\` object to convert.\n * @returns The converted \\`CalendarYearsData\\` object.\n */\nexport const convertToCalendarYearData = (valuesPerDay: ValuesPerDay): CalendarYearsData => {\n  const { minimumYear, maximumYear } = extractYearRange(valuesPerDay);\n  const yearsData: CalendarYearsData = [];\n\n  for (let year = minimumYear; year <= maximumYear; year++) {\n    yearsData.push(initializeEmptyCalendarYearData(year));\n  }\n\n  for (const [dateString, value] of valuesPerDay) {\n    const date = parseISO(dateString);\n    const year = getYear(date);\n\n    const yearIndex = year - minimumYear;\n    const weekIndex = getAdjustedISOWeek(date);\n    const dayIndex = getISODay(date) - 1;\n\n    const yearData = yearsData[yearIndex];\n    if (!yearData) continue;\n\n    const weekData = yearData[weekIndex];\n    if (!weekData || weekData[dayIndex] === -1) continue;\n    weekData[dayIndex] = (weekData[dayIndex] ?? 0) + value;\n  }\n\n  return yearsData;\n};\n`)),mdx(\"p\",null,\"Don't forget to export the functions in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/index.ts\"),\" file:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/index.ts\",filename:\"src/utils/index.ts\"}),`// ...\nexport * from './calendar';\n`)),mdx(\"p\",null,\"Here are the recap for each function:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"createUtcDate\"),\": This function creates a UTC date object given the year, month, and day as input. It takes the year, month, and day, and creates a new Date object with the specified values, ensuring the time components are set to 0 (midnight). By using \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"Date.UTC\")),\", it ensures the date is represented in the UTC timezone.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"extractYearRange\"),\": This function takes a \",mdx(\"inlineCode\",{parentName:\"li\"},\"ValuesPerDay\"),\" object as input and iterates through the date strings in the object to find the minimum and maximum years. It does this by first initializing the minimum year as \",mdx(\"inlineCode\",{parentName:\"li\"},\"Infinity\"),\" and the maximum year as \",mdx(\"inlineCode\",{parentName:\"li\"},\"-Infinity\"),\". Then, for each date string, it parses the date and extracts the year, updating the minimum and maximum years accordingly.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"getAdjustedISOWeek\"),\": This function calculates an adjusted ISO week number for a given date based on the project's requirements. It first gets the month and the ISO week number of the input date. Then, it checks if the date falls under the specific conditions (i.e., January with a week number greater than 50, or December with a week number less than 10). If the date meets any of these conditions, it returns the adjusted week number. Otherwise, it returns the original week number.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"initializeEmptyCalendarYearData\"),\": This function initializes an empty \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\" object for the given year. It first calculates the first and last dates of the year, along with their adjusted ISO week numbers and ISO day numbers (subtracting 1 to have a 0-based index). Then, it creates an array of 54 weeks (maximum possible weeks in a year), where each week is an array of 7 days. It fills the days with 0 if the day is part of the calendar year and -1 if the day is not part of the calendar year, using the calculated week and day numbers.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"convertToCalendarYearData\"),\": This function converts a \",mdx(\"inlineCode\",{parentName:\"li\"},\"ValuesPerDay\"),\" object into an array of \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\" values. It starts by extracting the minimum and maximum years from the input data using the \",mdx(\"inlineCode\",{parentName:\"li\"},\"extractYearRange\"),\" function. Then, it initializes an empty \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearsData\"),\" object for each year in the range using the \",mdx(\"inlineCode\",{parentName:\"li\"},\"initializeEmptyCalendarYearData\"),\" function. Next, it iterates through the input data, parsing the date strings, and calculating the year, week, and day indexes. It then adds the value to the appropriate day in the corresponding \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\".\")),mdx(\"h2\",e({},{id:\"step-4-show-the-data-in-a-2d-grid\"}),\"Step 4: Show the data in a 2D Grid\"),mdx(\"p\",null,\"Now that we have the data in the correct format, we can use it to create a 2D grid per year to visualize the data.\"),mdx(\"p\",null,\"Create a new file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/FlatGrids.tsx\"),\" and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/components/FlatGrids.tsx\",filename:\"src/components/FlatGrids.tsx\"}),`import type { FC } from 'react';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData } from '~/types';\n\nconst DAYS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst YearTable: FC<{\n  year: number;\n  data: CalendarYearData;\n}> = ({ year, data }) => {\n  return (\n    <table className=\"table-auto text-center\">\n      <caption className=\"text-xl\">{year}</caption>\n      <thead className=\"sticky top-0\">\n        <tr className=\"uppercase\">\n          <th></th>\n          {DAYS.map((week, index) => {\n            return (\n              <th key={\\`week-\\${index}\\`} className=\"min-w-[50px] border bg-gray-600 text-gray-200\">\n                {week}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((week, index) => {\n          return <WeekRow key={\\`week-\\${index}\\`} week={index} data={week} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst WeekRow: FC<{ week: number; data: CalendarWeekData }> = ({ week, data }) => {\n  return (\n    <tr>\n      <td className=\"px-3 py-1 text-sm\">{week.toString().padStart(2, '0')}</td>\n      {data.map((dayValue, index) => {\n        return (\n          <td\n            key={\\`day-\\${index}\\`}\n            className={\\`border px-2 py-1 \\${dayValue < 0 ? 'bg-gray-200' : 'bg-white'}\\`}\n          >\n            {dayValue >= 0 && dayValue.toLocaleString('en-US')}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst FlatGrids: FC<{\n  data: CalendarYearsData;\n  startYear: number;\n}> = ({ data, startYear }) => {\n  return (\n    <div>\n      {data.map((yearData, index) => {\n        const year = startYear + index;\n        return <YearTable key={\\`year-\\${year}\\`} year={year} data={yearData} />;\n      })}\n    </div>\n  );\n};\n\nexport default FlatGrids;\n`)),mdx(\"p\",null,\"This just shows a simple table for each year, with the week numbers on the left, the days of the week on the top, and the word counts in the cells. If the cell has a negative value, it will only show a gray background.\"),mdx(\"p\",null,\"Next, add the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FlatGrids\"),\" component to the Home Page:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport FlatGrids from '~/components/FlatGrids';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n        <FlatGrids data={data} startYear={minYear} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"After saving, you can now see the values in a 2D grid:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-04-show-year-array.png\",alt:\"Show Tables Per Year\"}))),mdx(\"h2\",e({},{id:\"step-5-show-the-data-in-a-3d-grid\"}),\"Step 5: Show the Data in a 3D Grid\"),mdx(\"p\",null,\"Now... let's make it 3D!\"),mdx(\"p\",null,\"Create a new file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/TitanicGrids.tsx\"),\" and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/components/TitanicGrids.tsx\",filename:\"src/components/TitanicGrids.tsx\"}),`import { type FC, useMemo } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Box } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Temporary interface for the light values. */\ninterface LightValues {\n  /** The position of the light. */\n  position: [number, number, number];\n  /** The intensity of the light. */\n  intensity: number;\n  /** The color of the light. */\n  color: string;\n  /** Whether the light is enabled or not. */\n  enable: boolean;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  // START: The temporary values for the grid.\n  /** The size of each cell in the grid. */\n  const cellSize = 1.0;\n  /** The spacing between each cell in the grid. */\n  const cellSpacing = 0.2;\n  /** The spacing between each grid in the scene. */\n  const gridSpacing = 1.2;\n  /** The color of the cells. */\n  const color = '#a0185a';\n  /** The color of the unused cells. */\n  const unusedColor = '#cccccc';\n  /** The scale of the cells. */\n  const scale = 20;\n  /** The target of the camera. */\n  const target: [number, number, number] = [30, 2, 32];\n  /** Whether the camera should rotate or not. */\n  const rotate = true;\n  /** The speed of the camera rotation. */\n  const speed = 1.0;\n  /** The position of the camera. */\n  const camera: [number, number, number] = [-49, 17, 30];\n  /** The values for the first light. */\n  const light1: LightValues = {\n    position: [90, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  /** The values for the second light. */\n  const light2: LightValues = {\n    position: [-180, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  // END: The temporary values for the grid.\n\n  /** The function to calculate the height of the cells. */\n  const heightScale = useMemo(() => {\n    return (value: number) => (value / maxValue) * scale;\n  }, [maxValue, scale]);\n\n  return (\n    <>\n      <Canvas>\n        <OrbitControls target={target} autoRotate={rotate} autoRotateSpeed={speed} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, index) => {\n          const gridPosition: [number, number, number] = [\n            index * (gridSpacing * (cellSize + cellSpacing) * 7),\n            0,\n            0\n          ];\n          const yearValue = startYear + index;\n          return (\n            <group key={\\`grid-\\${yearValue}\\`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = heightScale(value);\n                  const cellPosition: [number, number, number] = [\n                    (cellSize + cellSpacing) * dayIndex,\n                    cellHeight / 2,\n                    (cellSize + cellSpacing) * weekIndex\n                  ];\n                  return (\n                    <Box\n                      key={\\`grid-\\${yearValue}-cell-\\${weekIndex}-\\${dayIndex}\\`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n`)),mdx(\"p\",null,\"This component is a bit more complex than the previous one.\"),mdx(\"p\",null,\"A quick explanation on the imported components:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"It uses the \",mdx(\"inlineCode\",{parentName:\"li\"},\"Canvas\"),\" component from \",mdx(\"inlineCode\",{parentName:\"li\"},\"@react-three/fiber\"),\" to render the 3D scene.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"PerspectiveCamera\"),\" is a camera type that simulates the way humans perceive the world. It projects the 3D scene onto a 2D plane, creating a sense of depth by making objects appear smaller as they get farther away.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"OrbitControls\"),\" is a helper that allows the user to interact with the 3D scene using mouse or touch inputs. It enables panning, zooming, and orbiting the scene, providing an intuitive way to navigate the 3D space.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/?q=directionalLight#api/en/lights/hemisphereLight\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"hemisphereLight\")),\" and \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/?q=directionalLight#api/en/lights/DirectionalLight\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"directionalLight\")),\" are used to add some lights to the scene.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),\" component is a convinient wrapper that used to render cuboid shapes.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/#api/en/materials/MeshPhongMaterial\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"meshPhongMaterial\")),\" is a material that is used to render the surface of the 3D objects. It is a good choice for rendering objects with a shiny surface.\")),mdx(\"p\",null,\"The calculations for the positions and dimensions are as follows:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"heightScale\"),\" function is used to calculate the height of the boxes based on its value, the maximum value in the dataset, and the scale factor. The height is calculated by dividing the cell value by the maximum value, then multiplying it by the scale factor. This ensures that the height of each cell is proportional to its value in relation to the \",mdx(\"inlineCode\",{parentName:\"li\"},\"maxValue\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"gridPosition\"),\" determines the position of each year's grid in the 3D space. The X-coordinate is calculated by multiplying the index of the year by the total width of the 7 columns of cells (including spacing between cells), and then by the \",mdx(\"inlineCode\",{parentName:\"li\"},\"gridSpacing\"),\" value. This ensures that each year's grid is placed at a consistent distance from the previous grid along the X-axis.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellPosition\"),\" determines the position of each cell box within a year's grid. It is calculated based on the day and week indexes, \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSize\"),\", and \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSpacing\"),\". The X-coordinate is calculated by multiplying the day index by the sum of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSize\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSpacing\"),\". The Y-coordinate is equal to half the cell height, ensuring that the base of each cell rests on the ground. The Z-coordinate is calculated by multiplying the week index by the sum of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSize\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSpacing\"),\". This arrangement ensures that each cell is positioned correctly within the grid.\")),mdx(\"p\",null,\"Now update the index page to use the new component:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport TitanicGrids from '~/components/TitanicGrids';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <TitanicGrids data={data} startYear={minYear} maxValue={maxValue} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"If you run the app now, you should see something like this:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-05-add-3d-chart.png\",alt:\"Add 3D Chart\"}))),mdx(\"p\",null,\"You can move the camera around by clicking and dragging the left mouse button, or by using touch inputs. You can also zoom in and out by scrolling the mouse wheel, or by pinching the screen. You can use the right mouse button or two finger drag to pan the camera.\"),mdx(\"h2\",e({},{id:\"step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Step 6: Adding a helper GUI to customize the chart\"),mdx(\"p\",null,\"We're almost done! There is one library we can add to make the chart easier to customize.\"),mdx(\"p\",null,\"Open your \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/TitanicGrids.tsx\"),\" file and update it to look like this:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/components/TitanicGrids.tsx\",filename:\"src/components/TitanicGrids.tsx\"}),`import { type FC, useMemo } from 'react';\nimport { useControls, Leva } from 'leva';\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, PerspectiveCamera, Box } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const { cellSize, cellSpacing, gridSpacing, color, unusedColor, scale } = useControls('Cells', {\n    /** The size of each cell in the grid. */\n    cellSize: 1.0,\n    /** The spacing between each cell in the grid. */\n    cellSpacing: 0.2,\n    /** The spacing between each grid in the scene. */\n    gridSpacing: 1.2,\n    /** The color of the cells. */\n    color: '#a0185a',\n    /** The color of the unused cells. */\n    unusedColor: '#cccccc',\n    /** The scale of the cells. */\n    scale: {\n      value: 20,\n      min: 1\n    }\n  });\n\n  const { target, rotate, speed, camera } = useControls('Controls', {\n    /** The position of the camera. */\n    camera: [-49, 17, 30],\n    /** The target of the camera. */\n    target: [30, 2, 32],\n    /** Whether the camera should rotate or not. */\n    rotate: true,\n    /** The speed of the camera rotation. */\n    speed: {\n      value: 1.0,\n      step: 0.1,\n      min: 0\n    }\n  });\n\n  /** The values for the first light. */\n  const light1 = useControls('Light 1', {\n    /** The position of the light. */\n    position: {\n      value: [90, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const light2 = useControls('Light 2', {\n    /** The position of the light. */\n    position: {\n      value: [-180, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  /** The function to calculate the height of the cells. */\n  const heightScale = useMemo(() => {\n    return (value: number) => (value / maxValue) * scale;\n  }, [maxValue, scale]);\n\n  return (\n    <>\n      <Leva collapsed />\n      <Canvas>\n        <OrbitControls target={target} autoRotate={rotate} autoRotateSpeed={speed} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, index) => {\n          const gridPosition: [number, number, number] = [\n            index * (gridSpacing * (cellSize + cellSpacing) * 7),\n            0,\n            0\n          ];\n          return (\n            <group key={\\`grid-\\${startYear + index}\\`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = heightScale(value);\n                  const cellPosition: [number, number, number] = [\n                    (cellSize + cellSpacing) * dayIndex,\n                    cellHeight / 2,\n                    (cellSize + cellSpacing) * weekIndex\n                  ];\n                  return (\n                    <Box\n                      key={\\`\\${weekIndex}-\\${dayIndex}\\`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n`)),mdx(\"p\",null,\"We are using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"leva\"),\" library to add a panel to the right side of the screen. This floating panel will allow us to change the appearance of the grids in real time.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-06-customize-3d-chart.png\",alt:\"Customize 3D Chart\"}))),mdx(\"h2\",e({},{id:\"conclusion\"}),\"Conclusion\"),mdx(\"p\",null,\"In conclusion, we have successfully created a 3D grid visualization for time-series data using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pmndrs/react-three-fiber\"}),\"React Three Fiber\"),\". To recap the steps we followed:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-1-project-setup\"}),\"Project Setup\"),\": We initialized a new React project using \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\" and installed the necessary dependencies.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-2-preparing-our-data\"}),\"Preparing our Data\"),\": We fetched the raw dataset and transformed it into a format suitable for analysis.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-3-creating-the-time-series-data\"}),\"Creating the Time-series Data\"),\": We transformed the data again, this time organizing it by year and week. We also learned the basics of the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"ISO 8601\"),\" standard and modified it to fit our needs.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-4-show-the-data-in-a-2d-grid\"}),\"Show the data in a 2D Grid\"),\": We started to visualize the data in a simple 2D grid format, understanding the structure of the data and preparing it for the next step.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-5-show-the-data-in-a-3d-grid\"}),\"Show the Data in a 3D Grid\"),\": We built upon our 2D grid and created a 3D grid representing the data points. This provided a more visually appealing representation of the time-series data.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Adding a helper GUI to customize the chart\"),\": We used the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pmndrs/leva\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"leva\"),\" library\"),\" to add a helper interface for customizing the appearance and behavior of the grid elements in real-time.\")),mdx(\"p\",null,\"This tutorial is just the beginning of what you can do with React Three Fiber. Potential improvements could include:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Adding tooltips and labels to display more information about each bar on hover.\"),mdx(\"li\",{parentName:\"ul\"},\"Adding animations to the bars for a more dynamic user experience.\"),mdx(\"li\",{parentName:\"ul\"},\"Integrating filters and controls for users to modify the data displayed in real-time.\")),mdx(\"p\",null,\"I encourage you to experiment with the code and build upon it to create your own unique 3D grid visualizations. With the foundation laid out in this tutorial, you can now explore the possibilities of React Three Fiber and create even more complex and engaging 3D visualizations.\"),mdx(\"p\",null,\"Happy coding!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}