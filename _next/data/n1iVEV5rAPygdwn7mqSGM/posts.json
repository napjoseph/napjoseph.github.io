{"pageProps":{"articles":[{"title":"Create a 3D Contribution Chart Using React Three Fiber","layout":"posts","slug":"create-a-3d-contribution-chart-using-react-three-fiber","draft":false,"frontMatter":{"title":"Create a 3D Contribution Chart Using React Three Fiber","publishedDate":"2023-04-02T03:27:00Z","tags":["3D","Data Visualization","React Three Fiber","React","The Wandering Inn","Three.js","TypeScript"],"description":"","disableComments":false},"rawContent":"\nIn this tutorial, we will create a 3D grid visualization of our timeseries data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber), a React renderer for [Three.js](https://threejs.org/). By following these steps, you'll gain a deeper understanding of how to work with time-series data, create compelling visualizations, and customize them in real-time.\n\n![Project Titan](/img/posts/3d-bar-charts/titan.png)\n\n> **NOTE**: You can find the live version at [The Wandering Inndex](https://titan.inndex.omg.lol/) and the full source code on the [wandering-inndex/titan](https://github.com/wandering-inndex/titan) repository. This project is inspired by [GitHub Skyline](https://skyline.github.com/), a web application that creates a 3D visualization of a user's GitHub contributions.\n\nAs this is a lengthy post, here's a table of contents to help you navigate:\n\n- [Step 1: Project Setup](#step-1-project-setup)\n  - [Prerequisites](#prerequisites)\n  - [Create a new Next.js project](#create-a-new-nextjs-project)\n  - [Install Additional Project Dependencies](#install-additional-project-dependencies)\n  - [Clean up the Home Page](#clean-up-the-home-page)\n- [Step 2: Preparing our Data](#step-2-preparing-our-data)\n  - [Creating the Type Definitions](#creating-the-type-definitions)\n  - [Convert the Chapter data to a mapping of dates to values](#convert-the-chapter-data-to-a-mapping-of-dates-to-values)\n  - [Show the parsed Chapter data on the page](#show-the-parsed-chapter-data-on-the-page)\n- [Step 3: Creating the Time-series Data](#step-3-creating-the-time-series-data)\n  - [Defining the Time-series Data Types](#defining-the-time-series-data-types)\n  - [Gregorian Calendar vs ISO 8601 Calendar](#gregorian-calendar-vs-iso-8601-calendar)\n  - [Modified Version](#modified-version)\n  - [Using date-fns](#using-date-fns)\n  - [Converting the ValuesPerDay mapping to our desired data structure](#converting-the-valuesperday-mapping-to-our-desired-data-structure)\n- [Step 4: Show the data in a 2D Grid](#step-4-show-the-data-in-a-2d-grid)\n- [Step 5: Show the Data in a 3D Grid](#step-5-show-the-data-in-a-3d-grid)\n- [Step 6: Adding a helper GUI to customize the chart](#step-6-adding-a-helper-gui-to-customize-the-chart)\n- [Conclusion](#conclusion)\n\n## Step 1: Project Setup\n\nIn this initial step, we will create a new project utilizing [Create T3 App](https://create.t3.gg/). If you already have a [React](https://react.dev/) project in place, simply install the [additional dependencies](#install-additional-project-dependencies) mentioned below and proceed to the [following step](#step-2-preparing-our-data).\n\n### Prerequisites\n\nFirst, install a version manager for [Node.js](https://nodejs.org/en) compatible with your operating system:\n\n- [Node Version Manager](https://github.com/nvm-sh/nvm) (Linux/macOS)\n- [NVM for Windows](https://github.com/coreybutler/nvm-windows) (Windows)\n\nAfter installing `nvm`, install the latest [LTS version](https://en.wikipedia.org/wiki/Long-term_support) of `node` by executing:\n\n```bash\n# Linux/macOS\n$ nvm install --lts\n\n# Windows\n$ nvm install lts\n```\n\nNext, we'll install [pnpm](https://pnpm.io/), a faster and more efficient alternative to [npm](https://www.npmjs.com/). To install `pnpm`, run:\n\n```bash\n$ npm install -g pnpm\n```\n\n### Create a new Next.js project\n\nFor our project, we'll use [Create T3 App](https://create.t3.gg/), a command-line tool that helps you generate a new React project with pre-configured setups for [Next.js](https://nextjs.org/), [TypeScript](https://www.typescriptlang.org/), and [Tailwind CSS](https://tailwindcss.com/).\n\nTo create a new T3 project, execute:\n\n```bash\n$ pnpm create t3-app@latest\n#     ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n#    / __| _ \\ __| /  \\_   _| __| |_   _|__ /   /  \\ | _ \\ _ \\\n#   | (__|   / _| / /\\ \\| | | _|    | |  |_ \\  / /\\ \\|  _/  _/\n#    \\___|_|_\\___|_/¯¯\\_\\_| |___|   |_| |___/ /_/¯¯\\_\\_| |_|\n# ? What will your project be called? (my-t3-app) titan\n# ? Will you be using JavaScript or TypeScript? TypeScript\n# ? Which packages would you like to enable? tailwind\n# ? Initialize a new git repository? (Y/n) Yes\n# ? Would you like us to run pnpm install? (Y/n) Yes\n# ? What import alias would you like configured? ~/\n#\n# ✔ titan scaffolded successfully!\n```\n\nYou can choose any project name you prefer. For this guide, we'll use `titan`, which is inspired by a character in [The Wandering Inn](https://wanderinginn.com/), one of the longest pieces of English fiction. The [author](https://www.patreon.com/pirateaba) has been consistently writing since 2016, and we'll use their writing data for our visualization.\n\n### Install Additional Project Dependencies\n\nOnce the project is created, navigate to the project directory:\n\n```bash\n$ cd titan\n```\n\nNow, install the necessary dependencies for our project:\n\n```bash\n$ pnpm add three @types/three @react-three/fiber @react-three/drei leva date-fns yaml\n```\n\n- [`three`](https://threejs.org/) is a JavaScript 3D library that we will use to create our 3D visualization.\n- [`@types/three`](https://www.npmjs.com/package/@types/three) provides TypeScript type definitions for `three`.\n- [`@react-three/fiber`](https://github.com/pmndrs/react-three-fiber) serves as a React renderer for `three`.\n- [`@react-three/drei`](https://github.com/pmndrs/drei) offers a suite of React components for `@react-three/fiber`.\n- [`leva`](https://github.com/pmndrs/leva) is a GUI library for building controls for our visualization.\n- [`date-fns`](https://date-fns.org/) is a date utility library for parsing and formatting dates.\n- [`yaml`](https://github.com/eemeli/yaml) is a [YAML](https://yaml.org/) data parser.\n\n### Clean up the Home Page\n\nOpen the project directory in your preferred code editor and replace the contents of `src/pages/index.tsx` with the following code:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst Home: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n```\n\nUpdate the look of your `body` tag by modifying `src/styles/globals.css`:\n\n```css filename=src/styles/globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-100;\n  }\n}\n```\n\nFinally, start the development server by running:\n\n```bash\n$ pnpm dev\n```\n\nYou should now see an empty page with the project name at the top.\n\n![Empty Page](/img/posts/3d-bar-charts/step-01-empty-page.png)\n\n## Step 2: Preparing our Data\n\nIn this step, we'll fetch our data from [The Wandering Inndex](https://inndex.omg.lol/), a community-driven project that compiles and analyzes data about [The Wandering Inn](https://wanderinginn.com/) for public access. The raw data for the published chapters is in [YAML format](https://yaml.org/), and we'll use the [`yaml`](https://www.npmjs.com/package/yaml) package to parse it and convert it to our desired format.\n\n### Creating the Type Definitions\n\nIn [TypeScript](https://www.typescriptlang.org/), [type declarations](https://www.typescriptlang.org/docs/handbook/2/type-declarations.html) define the structure of objects, interfaces, classes, and functions. This enhances clarity and documentation within the codebase, making it more comprehensible and maintainable for developers.\n\nFirst, let's declare the type definitions for our application. Conveniently, the data we're working with already has [type definitions available](https://github.com/wandering-inndex/seed-data/blob/main/types/media.ts) available. We'll use the `Chapter` interface, which represents data about individual chapters. Since we'll only use a portion of the available fields from the complete type definitions, create a new file at `src/types/chapters.ts` and insert the following code:\n\n```ts filename=src/types/chapters.ts\n/** Minimal interface that represents the individual Chapter data. */\nexport interface Chapter {\n  /** Unique ID for the chapter. */\n  id: string;\n  /** Flags for the chapter. */\n  meta: {\n    /** If true, then it will be shown in the table of contents. */\n    show: boolean;\n  };\n  /** Specifies that a chapter is part of a bigger collection. */\n  partOf: {\n    /** Part of a Web Novel Volume. */\n    webNovel?: {\n      /** The volume this is collected under. */\n      ref: number | null;\n      /**\n       * The timestamp when this chapter is originally published. This can be\n       * found via the `meta[property='article:published_time']` selector.\n       */\n      published: string | null;\n      /**\n       * Total words based on https://wordcounter.net/. Without the title,\n       * author's notes, artworks, etc.\n       */\n      totalWords: number | null;\n    };\n  };\n}\n```\n\nWe want to display chapters that are being shown in the [Table of Contents page](https://wanderinginn.com/table-of-contents/) (`meta.show === true`) and are part of a Web Novel Volume (`partOf.webNovel.ref > 0`). Additionally, we'll use the `partOf.webNovel.published` field to determine the chapter's publication date and the `partOf.webNovel.totalWords` field to identify the chapter's word count.\n\nNext, create the type definitions for our time-related data. Create `src/types/calendar.ts` and include the following:\n\n```ts filename=src/types/calendar.ts\n// TODO: Add type definition for `CalendarWeekData`.\n// TODO: Add type definition for `CalendarYearData`.\n// TODO: Add type definition for `CalendarYearsData`.\n\n/**\n * Maps a value per date string.\n * The date string must be in a valid ISO 8601 format.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @example\n * const map: ValuesPerDay = new Map<string, number>([\n *  [\"2021-01-01\", 1000],\n *  [\"2021-01-02\", 2000],\n *  [\"2021-01-03\", 3000],\n * ]);\n */\nexport type ValuesPerDay = Map<string, number>;\n```\n\nThen, create a `src/types/index.ts` file and insert the following code:\n\n```ts filename=src/types/index.ts\nexport * from './calendar';\nexport * from './chapters';\n```\n\nThis allows us to import all our types from a single location (e.g. `import { ValuesPerDay } from \"~/types/\";`).\n\nOur goal for this step is to transform the `Chapter` data into a mapping of word counts by date (`ValuesPerDay`).\n\n### Convert the Chapter data to a mapping of dates to values\n\nNow, create a `src/utils/chapters.ts` file and add the following code:\n\n```ts filename=src/utils/chapters.ts\nimport { isMatch, formatISO, parseISO } from 'date-fns';\n\nimport type { Chapter, ValuesPerDay } from '~/types';\n\n/**\n * Checks if a chapter should be included based on the given conditions.\n *\n * @param {Chapter} chapter - The chapter to check.\n * @returns {boolean} - `true` if the chapter should be included, `false`\n * otherwise.\n */\nexport const shouldIncludeChapter = (chapter: Chapter): boolean => {\n  const shouldShow = chapter.meta.show === true;\n  const hasValidWebNovelRef = (chapter.partOf.webNovel?.ref ?? 0) > 0;\n  const hasValidPublishedDate = isMatch(\n    chapter.partOf.webNovel?.published ?? '',\n    \"yyyy-MM-dd'T'HH:mm:ssXXX\"\n  );\n\n  return shouldShow && hasValidWebNovelRef && hasValidPublishedDate;\n};\n\n/** The return data from the `convertChaptersToMapping` function. */\nexport interface ConvertChaptersToMappingOutput {\n  /** This maps a date string to the number of words written on that day. */\n  mapping: ValuesPerDay;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/**\n * Converts an array of `Chapter` objects to a `ConvertChaptersToMappingOutput`.\n *\n * @param {Chapter[]} chapters - The array of `Chapter` objects.\n * @returns {ConvertChaptersToMappingOutput} - The output of the conversion.\n */\nexport const convertChaptersToMapping = (chapters: Chapter[]): ConvertChaptersToMappingOutput => {\n  const mapping: ValuesPerDay = new Map();\n\n  let minYear = Number.POSITIVE_INFINITY;\n  let maxYear = Number.NEGATIVE_INFINITY;\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n\n  for (const chapter of chapters) {\n    if (!shouldIncludeChapter(chapter)) {\n      continue;\n    }\n\n    const publishedDate = chapter.partOf.webNovel?.published ?? '';\n    const totalWords = chapter.partOf.webNovel?.totalWords ?? 0;\n\n    if (publishedDate) {\n      const date = parseISO(publishedDate);\n      const dateKey = formatISO(date, {\n        representation: 'date'\n      });\n\n      const existingWordCount = mapping.get(dateKey) ?? 0;\n      const newWordCount = existingWordCount + totalWords;\n      mapping.set(dateKey, newWordCount);\n\n      const year = date.getFullYear();\n      minYear = Math.min(minYear, year);\n      maxYear = Math.max(maxYear, year);\n      minValue = Math.min(minValue, newWordCount);\n      maxValue = Math.max(maxValue, newWordCount);\n    }\n  }\n\n  return { mapping, minYear, maxYear, minValue, maxValue };\n};\n```\n\nThis file contains a utility function that converts our `Chapter` data into a mapping of dates to word counts (`ValuesPerDay`). The code is relatively straightforward, but let's examine it more closely.\n\nFirst, we define a `shouldIncludeChapter` function to verify whether a chapter should be included based on specific conditions. This function returns `true` if the chapter meets the conditions and `false` otherwise. The conditions are:\n\n- `chapter.meta.show` must be `true`.\n- `chapter.partOf.webNovel.ref` must be greater than 0.\n- `chapter.partOf.webNovel.published` must be a valid date string.\n\nNext, we define a `convertChaptersToMapping` function that converts an array of `Chapter` objects to an object with the following properties:\n\n- `mapping`: This maps a date string to the number of words written on that day.\n- `minYear`: The earliest year in the dataset.\n- `maxYear`: The latest year in the dataset.\n- `minValue`: The smallest value in the dataset.\n- `maxValue`: The largest value in the dataset.\n\nThe function iterates through each `Chapter`, verifying if it should be included. If so, it adds the number of words written on that day to the mapping. It also updates the `minYear`, `maxYear`, `minValue`, and `maxValue` properties as needed.\n\nFinally, let's create a `src/utils/index.ts` file and add the following code:\n\n```ts filename=src/utils/index.ts\nexport * from './chapters';\n```\n\n### Show the parsed Chapter data on the page\n\nUpdate the `src/pages/index.tsx` page to fetch our `Chapter` data from the source repository. Then, use the `convertChaptersToMapping` function to convert the data and display the relevant information on the page.\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping } from '~/utils';\nimport type { Chapter } from '~/types';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n\n  return {\n    props: {\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\n[`getServerSideProps`](https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props) is a unique Next.js function that runs on the server before the page is rendered. We use this function to fetch the YAML data from our data source. We then convert the data to a mapping of dates to values using the `convertChaptersToMapping` function we created earlier. We return the outputs as props to our Home page component, displaying the values as a simple HTML unordered list.\n\n![With Values](/img/posts/3d-bar-charts/step-02-with-values.png)\n\n## Step 3: Creating the Time-series Data\n\nIn this step, we'll organize the data by year and week. This process involves creating utility functions that calculate the week numbers using a modified ISO 8601 standard.\n\n### Defining the Time-series Data Types\n\nFirst, let's update the `src/types/calendar.ts` file to define the data structure we will use to visualize the data. Add the following code to the top:\n\n```ts filename=src/types/calendar.ts\n/**\n * Represents a tuple of a given type `T` and fixed length `N`.\n *\n * @see https://stackoverflow.com/a/74801694\n */\ntype Tuple<T, N extends number, R extends T[] = []> = number extends N\n  ? T[]\n  : R['length'] extends N\n  ? R\n  : Tuple<T, N, [T, ...R]>;\n\n/**\n * An array that represents values per day of the week.\n *\n * For this project, the first day of the week will be Monday, as per ISO 8601:\n *\n * - INDEX 0: MON\n * - INDEX 1: TUE\n * - INDEX 2: WED\n * - INDEX 3: THU\n * - INDEX 4: FRI\n * - INDEX 5: SAT\n * - INDEX 6: SUN\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * If there are no values for that specific day, it will be 0.\n * If that day is not part of the calendar year, it will be -1.\n *\n * @example\n * const week: CalendarWeekData = [1000, 2000, 3000, 4000, 5000, 6000, 7000];\n * const weekWithoutValues: CalendarYearData = [0, 0, 0, 0, 0, 0, 0];\n * const weekWithDaysNotInYear: CalendarYearData = [-1, -1, -1, -1, -1, -1, -1];\n * const weekMixed: CalendarYearData = [-1, -1, 0, 0, 5000, 0, 7000];\n */\nexport type CalendarWeekData = Tuple<number, 7>;\n\n/**\n * An array that represents values per week of the year.\n *\n * Most years have 52 weeks, but if the year starts on a Thursday or is a leap\n * year that starts on a Wednesday, that particular year will have 53 weeks.\n *\n * In ISO 8601, if January 1 is on a Monday, Tuesday, Wednesday, or Thursday, it\n * is in week 1. If January 1 is on a Friday, Saturday or Sunday, it is in week\n * 52 or 53 of the previous year (there is no week 0). December 28 will always\n * be in the last week of its year.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * For this project:\n *\n * - We will *ALWAYS* create a 54-week year.\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1. The total\n *   weeks will be coming from to `date-fns`:\n *   {@link https://date-fns.org/docs/getISOWeeksInYear}\n */\nexport type CalendarYearData = Array<CalendarWeekData>;\n\n/** An array that represents values per year. */\nexport type CalendarYearsData = Array<CalendarYearData>;\n\n// ...\n//\n// Definition for `ValuesPerDay`\n```\n\nOur objective is to transform the `ValuesPerDay` mapping we created previosly into an array of `CalendarYearData`. A `CalendarYearData` consists of an array of `CalendarWeekData` values, which are themselves arrays of word counts per week.\n\nTo help visualize this multi-dimensional array, imagine a 2D grid where one axis represents the week number, another axis represents the day of the week, and the cell value represents the word count.\n\n[![Year Grid](/img/posts/3d-bar-charts/step-03-year-grid.png)](/img/posts/3d-bar-charts/step-03-year-grid.png)\n\nSome key points to note about this grid:\n\n- The week starts on Monday (index 0) and ends on Sunday (index 6).\n- There are 54 weeks (indexes 0 to 53) instead of the usual 52 or 53 weeks.\n\nIt's essential to recognize that the start of the week [varies across cultures](https://www.timeanddate.com/date/week-numbers.html), as does the number of weeks in a year. Some years have 52 weeks, while others have 53 weeks during leap years. Additionally, since the start of the week can differ, the number of weeks can also vary. In this project, we will use the [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601) standard as our basis, with some modifications.\n\n### Gregorian Calendar vs ISO 8601 Calendar\n\nISO 8601 is a standard that defines how to represent dates and times. For further information, check out the articles for [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar), and [ISO-8601 Week-Based Calendar](https://help.tableau.com/current/pro/desktop/en-us/dates_calendar.htm).\n\nHere are some key differences between the Gregorian Calendar and the ISO 8601 Calendar:\n\n| Gregorian Calendar                   | ISO 8601 Calendar                                                                                                                |\n| ------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------- |\n| The year always starts on January 1. | The year starts on the first Monday closest to January 1, meaning the year may begin anywhere between December 29 and January 4. |\n| Weeks can extend across years.       | Each week has exactly 7 days, starts on Monday, and belongs to a single year.                                                    |\n| Years can have 365 or 366 days.      | A year has 52 or 53 full weeks, which is 364 or 371 days.                                                                        |\n\nThe following example demonstrates the difference when transitioning from December 2004 to January 2005. The Gregorian Calendar starts the year on January 1, while the ISO 8601 Calendar starts the year on January 3.\n\n![Different Calendars](/img/posts/3d-bar-charts/step-03-iso-8601-calendar.png)\n\nCalendar applications typically use the Gregorian calendar but offer the option to show ISO 8601 week numbers.\n\n![Combined Calendars](/img/posts/3d-bar-charts/step-03-combined-calendars.png)\n\n### Modified Version\n\nWhile ISO 8601 is a valuable standard, we must modify it to suit our needs:\n\n- Our year will always have 54 weeks (378 days), ensuring all years have the same number of columns when displayed side-by-side in grids.\n  - The extra week will be placed at the beginning, assigned an index of 0.\n- The week number will follow the ISO 8601 standard, with a few exceptions:\n  - If the date's month is January, but the ISO week number is greater than 50, change the week number to 0.\n  - If the date's month is December, but the ISO week number is less than 10, change the week number to the last ISO 8601 week number of that year plus 1.\n- Our weeks will start on Monday, with days having 0-based indexes, so Monday will be 0 and Sunday will be 6.\n- In our data structure, the word counts for each week will be represented as an array of 7 numbers. If the week has unused slots, the values for those days will be represented as negative numbers.\n\nLet's visualize this modified calendar:\n\n![Combined and Modified Calendars](/img/posts/3d-bar-charts/step-03-combined-modified-calendars.png)\n\nIn 2004, Week 53 will end with two unused days at the end (marked as `X` in the chart). In 2005, Week 0 will start with five unused days at the beginning (marked as `X` in the chart), and Week 1 will start on January 3. If we continue and fill up our grid for the year 2005 with our dates, we will get:\n\n[![Year 2005 Grid](/img/posts/3d-bar-charts/step-03-year-2005-grid.png)](/img/posts/3d-bar-charts/step-03-year-2005-grid.png)\n\n> **NOTE**: Notice that we have 13 unused days for 2005. Week 0 has 5 at the start, Week 52 has 1 at the end, and Week 53 has all 7 slots unused.\n\nIn our data structure, we will initialize the grid with negative numbers for the unused days and 0 for the rest:\n\n[![Year 2005 Grid Initialized](/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png)](/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png)\n\n### Using date-fns\n\nWe'll use the [date-fns](https://date-fns.org/) library to simplify our ISO 8601 calculations. We will use the [`getISOWeek`](https://date-fns.org/docs/getISOWeek) function to get the week number for a given date, and the [`getISOWeeksInYear`](https://date-fns.org/docs/getISOWeeksInYear) function to get the number of weeks in a given year. We can get the day index by using the [`getDay`](https://date-fns.org/docs/getDay) function and subtracting 1 from the result.\n\nLet's try checking the values for `2004-12-28` to `2005-01-04`:\n\n```ts\nimport {\n  formatISO,\n  getDay,\n  getISODay,\n  getISOWeek,\n  getISOWeeksInYear,\n  getISOWeekYear\n} from 'date-fns';\n\nconst newDate = (year: number, month: number, day: number): Date => {\n  // The month is 0-based, so January is 0 and December is 11.\n  return new Date(year, month - 1, day, 0, 0, 0, 0);\n};\n\nconst analyzeDate = (date: Date) => {\n  return {\n    // Extracts the YYYY-MM-DD portion of the Date object.\n    formattedDate: formatISO(date, { representation: 'date' }),\n    // The day of the week, 0-6, where Sunday is the first day of the week.\n    gregDay: getDay(date),\n    // The day of the week, 1-7, where Monday is the first day of the week.\n    isoDay: getISODay(date),\n    // The year of the date.\n    gregYear: date.getFullYear(),\n    // The ISO week-numbering year of the date.\n    isoWeekYear: getISOWeekYear(date),\n    // The ISO week-numbering week of the date.\n    isoWeek: getISOWeek(date),\n    // The number of weeks in the ISO week-numbering year.\n    isoWeeksInYear: getISOWeeksInYear(date)\n  };\n};\n\nconsole.table([\n  analyzeDate(newDate(2004, 12, 28)),\n  analyzeDate(newDate(2004, 12, 29)),\n  analyzeDate(newDate(2004, 12, 30)),\n  analyzeDate(newDate(2004, 12, 31)),\n  analyzeDate(newDate(2005, 1, 1)),\n  analyzeDate(newDate(2005, 1, 2)),\n  analyzeDate(newDate(2005, 1, 3)),\n  analyzeDate(newDate(2005, 1, 4))\n]);\n```\n\n| (index) | formattedDate | gregDay | isoDay | gregYear | isoWeekYear | isoWeek | isoWeeksInYear |\n| ------- | ------------- | ------- | ------ | -------- | ----------- | ------- | -------------- |\n| 0       | \"2004-12-28\"  | 2       | 2      | 2004     | 2004        | 53      | 53             |\n| 1       | \"2004-12-29\"  | 3       | 3      | 2004     | 2004        | 53      | 53             |\n| 2       | \"2004-12-30\"  | 4       | 4      | 2004     | 2004        | 53      | 53             |\n| 3       | \"2004-12-31\"  | 5       | 5      | 2004     | 2004        | 53      | 53             |\n| 4       | \"2005-01-01\"  | 6       | 6      | 2005     | 2004        | 53      | 53             |\n| 5       | \"2005-01-02\"  | 0       | 7      | 2005     | 2004        | 53      | 53             |\n| 6       | \"2005-01-03\"  | 1       | 1      | 2005     | 2005        | 1       | 52             |\n| 7       | \"2005-01-04\"  | 2       | 2      | 2005     | 2005        | 1       | 52             |\n\n> **NOTE**: Take note of the differences between the Gregorian and ISO 8601 years and weeks. Using the wrong functions can lead to [unwanted bugs in your application](https://www.youtube.com/watch?v=D3jxx8Yyw1c).\n\n### Converting the ValuesPerDay mapping to our desired data structure\n\nNow let's build a function to convert our `ValuesPerDay` mapping into an array of `CalendarYearData`. First, create a `src/utils/calendar.ts` file and include the following code:\n\n```ts filename=src/utils/calendar.ts\nimport { getISODay, getISOWeek, getISOWeeksInYear, getYear, parseISO } from 'date-fns';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData, ValuesPerDay } from '~/types';\n\n/** Creates a UTC date. */\nexport const createUtcDate = (year: number, month: number, day: number) =>\n  new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));\n\n/**\n * Extracts the minimum and maximum years from the given `ValuesPerDay`\n * object.\n *\n * @param valuesPerDay - The `ValuesPerDay` object to extract the year\n * range from.\n * @returns An object containing the `minimumYear` and `maximumYear`.\n */\nexport const extractYearRange = (\n  valuesPerDay: ValuesPerDay\n): { minimumYear: number; maximumYear: number } => {\n  let minimumYear = Infinity;\n  let maximumYear = -Infinity;\n\n  for (const dateString of valuesPerDay.keys()) {\n    const year = getYear(parseISO(dateString));\n\n    minimumYear = Math.min(minimumYear, year);\n    maximumYear = Math.max(maximumYear, year);\n  }\n\n  return { minimumYear, maximumYear };\n};\n\n/**\n * Given a date, get its adjusted ISO week number based on the project\n * requirements:\n *\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1.\n *\n * @param {Date} date - The date to get the adjusted ISO week number for.\n * @returns {number} - The adjusted ISO week number.\n */\nexport const getAdjustedISOWeek = (date: Date): number => {\n  const month = date.getMonth();\n  const isoWeek = getISOWeek(date);\n  const isoWeeksInYear = getISOWeeksInYear(date);\n\n  if (month === 0 && isoWeek > 50) {\n    return 0;\n  } else if (month === 11 && isoWeek < 10) {\n    return isoWeeksInYear + 1;\n  }\n\n  return isoWeek;\n};\n\n/**\n * Initializes an empty `CalendarYearData`.\n *\n * If there are no values for that specific day, it will be `0`. If that day is\n * not part of the calendar year, it will be `-1`.\n *\n * @param {number} year - The year to initialize the data for.\n * @returns {CalendarYearData} a `CalendarYearData` with default values.\n */\nexport const initializeEmptyCalendarYearData = (year: number): CalendarYearData => {\n  const firstDateOfYear = createUtcDate(year, 1, 1);\n  const lastDateOfYear = createUtcDate(year, 12, 31);\n  const firstWeekOfYearAdjusted = getAdjustedISOWeek(firstDateOfYear);\n  const lastWeekOfYearAdjusted = getAdjustedISOWeek(lastDateOfYear);\n  const firstDayOfYear = getISODay(firstDateOfYear) - 1;\n  const lastDayOfYear = getISODay(lastDateOfYear) - 1;\n\n  const yearData: CalendarYearData = [\n    ...(Array.from(\n      { length: 54 },\n      (_, weekIndex) =>\n        Array.from({ length: 7 }, (_, dayIndex) => {\n          if (\n            (weekIndex === firstWeekOfYearAdjusted && dayIndex < firstDayOfYear) ||\n            (weekIndex === lastWeekOfYearAdjusted && dayIndex > lastDayOfYear)\n          ) {\n            return -1;\n          } else if (weekIndex < firstWeekOfYearAdjusted || weekIndex > lastWeekOfYearAdjusted) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }) as CalendarWeekData\n    ) as CalendarYearData)\n  ];\n\n  return yearData;\n};\n\n/**\n * Converts a `ValuesPerDay` object to a `CalendarYearsData` object.\n *\n * @param valuesPerDay - The `ValuesPerDay` object to convert.\n * @returns The converted `CalendarYearsData` object.\n */\nexport const convertToCalendarYearData = (valuesPerDay: ValuesPerDay): CalendarYearsData => {\n  const { minimumYear, maximumYear } = extractYearRange(valuesPerDay);\n  const yearsData: CalendarYearsData = [];\n\n  for (let year = minimumYear; year <= maximumYear; year++) {\n    yearsData.push(initializeEmptyCalendarYearData(year));\n  }\n\n  for (const [dateString, value] of valuesPerDay) {\n    const date = parseISO(dateString);\n    const year = getYear(date);\n\n    const yearIndex = year - minimumYear;\n    const weekIndex = getAdjustedISOWeek(date);\n    const dayIndex = getISODay(date) - 1;\n\n    const yearData = yearsData[yearIndex];\n    if (!yearData) continue;\n\n    const weekData = yearData[weekIndex];\n    if (!weekData || weekData[dayIndex] === -1) continue;\n    weekData[dayIndex] = (weekData[dayIndex] ?? 0) + value;\n  }\n\n  return yearsData;\n};\n```\n\nRemember to export the functions in the `src/utils/index.ts` file:\n\n```ts filename=src/utils/index.ts\n// ...\nexport * from './calendar';\n```\n\nLet's recap the purpose of each function:\n\n- `createUtcDate`: This function generates a UTC date object using the given year, month, and day as input. It takes these values, creates a new Date object, and sets the time components to 0 (midnight). By using [`Date.UTC`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC), the date is represented in the UTC timezone.\n- `extractYearRange`: Given a `ValuesPerDay` object, this function iterates through the date strings and determines the minimum and maximum years. It initializes the minimum year to `Infinity` and the maximum year to `-Infinity`. For each date string, the function parses the date, extracts the year, and updates the minimum and maximum years as needed.\n- `getAdjustedISOWeek`: This function computes an adjusted ISO week number for a specific date based on the project requirements. First, it retrieves the month and ISO week number of the input date. Then, it checks if the date meets certain conditions (i.e., January with a week number greater than 50 or December with a week number less than 10). If the date satisfies any of these conditions, the adjusted week number is returned; otherwise, the original week number is returned.\n- `initializeEmptyCalendarYearData`: This function initializes an empty `CalendarYearData` object for a specified year. It calculates the first and last dates of the year, along with their adjusted ISO week numbers and ISO day numbers (subtracting 1 for a 0-based index). Then, it creates an array of 54 weeks (the maximum possible number of weeks in a year), where each week is an array of 7 days. Days that are part of the calendar year are filled with 0, while days that are not part of the calendar year are filled with -1, using the calculated week and day numbers.\n- `convertToCalendarYearData`: This function transforms a `ValuesPerDay` object into an array of `CalendarYearData` values. First, it uses the `extractYearRange` function to determine the minimum and maximum years from the input data. Then, for each year in the range, it initializes an empty `CalendarYearsData` object using the `initializeEmptyCalendarYearData` function. Next, it iterates through the input data, parsing the date strings and calculating the year, week, and day indexes. Finally, it adds the value to the appropriate day in the corresponding `CalendarYearData`.\n\n## Step 4: Show the data in a 2D Grid\n\nWith the data converted, we can now create a 2D grid for each year to visualize it in a calendar-like format.\n\nFirst, create a new file named `src/components/FlatGrids.tsx` and insert the following code:\n\n```tsx filename=src/components/FlatGrids.tsx\nimport type { FC } from 'react';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData } from '~/types';\n\nconst DAYS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst YearTable: FC<{\n  year: number;\n  data: CalendarYearData;\n}> = ({ year, data }) => {\n  return (\n    <table className=\"table-auto text-center\">\n      <caption className=\"text-xl\">{year}</caption>\n      <thead className=\"sticky top-0\">\n        <tr className=\"uppercase\">\n          <th></th>\n          {DAYS.map((week, index) => {\n            return (\n              <th key={`week-${index}`} className=\"min-w-[50px] border bg-gray-600 text-gray-200\">\n                {week}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((week, index) => {\n          return <WeekRow key={`week-${index}`} week={index} data={week} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst WeekRow: FC<{ week: number; data: CalendarWeekData }> = ({ week, data }) => {\n  return (\n    <tr>\n      <td className=\"px-3 py-1 text-sm\">{week.toString().padStart(2, '0')}</td>\n      {data.map((dayValue, index) => {\n        return (\n          <td\n            key={`day-${index}`}\n            className={`border px-2 py-1 ${dayValue < 0 ? 'bg-gray-200' : 'bg-white'}`}\n          >\n            {dayValue >= 0 && dayValue.toLocaleString('en-US')}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst FlatGrids: FC<{\n  data: CalendarYearsData;\n  startYear: number;\n}> = ({ data, startYear }) => {\n  return (\n    <div>\n      {data.map((yearData, index) => {\n        const year = startYear + index;\n        return <YearTable key={`year-${year}`} year={year} data={yearData} />;\n      })}\n    </div>\n  );\n};\n\nexport default FlatGrids;\n```\n\nNow, incorporate the `FlatGrids` component into the Home Page:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport FlatGrids from '~/components/FlatGrids';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n        <FlatGrids data={data} startYear={minYear} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\nOnce you save the changes, you'll be able to see the values in a 2D grid:\n\n![Show Tables Per Year](/img/posts/3d-bar-charts/step-04-show-year-array.png)\n\nOur code will display a simple table for each year, with week numbers on the left, days of the week on the top, and word counts in the cells. Cells with unused slots (negative values) will have a gray background.\n\n## Step 5: Show the Data in a 3D Grid\n\nNow, it's time to bring our visualization into the third dimension!\n\nFirst, create a custom hook at `src/hooks/useGridCalculations.ts` to calculate the grid parameters:\n\n```tsx filename=src/hooks/useGridCalculations.ts\nimport { useMemo } from 'react';\n\nimport type { CalendarYearsData } from '~/types';\n\n/** Creates a set of calculations for the grid. */\nexport const useGridCalculations = (\n  /** The data to be used for the calculations. */\n  data: CalendarYearsData,\n  /** The spacing between the grids. */\n  gridSpacing: number,\n  /** The length of each cell in the grid. */\n  cellSize: number,\n  /** The spacing between the cells. */\n  cellSpacing: number,\n  /** The scale of the cells. */\n  scale: number,\n  /** The maximum value of the data. */\n  maxValue: number\n) => {\n  return useMemo(() => {\n    /** Calculates the distance of a cell from the origin. */\n    const cellDistance = (items: number): number => {\n      // prettier-ignore\n      return (cellSize * items) + (cellSpacing * (items - 1));\n    };\n\n    /** Calculates the distance of grid from the origin. */\n    const gridDistance = (items: number): number => {\n      // prettier-ignore\n      return (gridWidth * items) + (gridSpacing * (items - 1));\n    };\n\n    /** Calculates the scaled height of the cells based on the maximum value. */\n    const calcCellHeight = (value: number) => {\n      return value >= 0 ? (value / maxValue) * scale : 0;\n    };\n\n    /** Calculates the adjusted starting position of a cell. */\n    const calcCellPosition = (index: number): number => {\n      // prettier-ignore\n      return ((cellSize + cellSpacing) * index) + (cellSize / 2);\n    };\n\n    /** Calculates the starting position of the grid. */\n    const calcGridPosition = (index: number): [number, number, number] => {\n      return [(cellDistance(7) + gridSpacing) * index, 0, 0];\n    };\n\n    const gridWidth = cellDistance(7);\n    const gridLength = cellDistance(54);\n    const totalWidth = gridDistance(data.length);\n    const totalLength = gridLength;\n\n    /** The center of the Canvas. */\n    const center: [number, number, number] = [totalWidth / 2, 0, totalLength / 2];\n\n    return { calcCellHeight, calcGridPosition, calcCellPosition, center };\n  }, [data, gridSpacing, cellSize, cellSpacing, maxValue, scale]);\n};\n```\n\nDon't forget to export it from `src/hooks/index.ts`:\n\n```tsx filename=src/hooks/index.ts\nexport * from './useGridCalculations';\n```\n\nAfter that, create a new file called `src/components/TitanicGrids.tsx` and add the following code:\n\n```tsx filename=src/components/TitanicGrids.tsximport { type FC, useId } from \"react\";\nimport { Canvas } from '@react-three/fiber';\nimport { Box, PerspectiveCamera, OrbitControls } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\nimport { useGridCalculations } from '~/hooks';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const id = useId();\n\n  // START: The temporary values for the grid.\n  /** The size of each cell in the grid. */\n  const cellSize = 1.0;\n  /** The spacing between each cell in the grid. */\n  const cellSpacing = 0.2;\n  /** The spacing between each grid in the scene. */\n  const gridSpacing = 1.4;\n  /** The color of the cells. */\n  const color = '#a0185a';\n  /** The color of the unused cells. */\n  const unusedColor = '#cccccc';\n  /** The scale of the cells. */\n  const scale = 20.0;\n  /** Whether the camera should rotate or not. */\n  const rotate = true;\n  /** The speed of the camera rotation. */\n  const speed = 1.0;\n  /** The position of the camera. */\n  const camera: [number, number, number] = [-50, 25, 29];\n  /** Temporary interface for the light values. */\n  interface LightValues {\n    /** The position of the light. */\n    position: [number, number, number];\n    /** The intensity of the light. */\n    intensity: number;\n    /** The color of the light. */\n    color: string;\n    /** Whether the light is enabled or not. */\n    enable: boolean;\n  }\n  /** The values for the first light. */\n  const light1: LightValues = {\n    position: [90, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  /** The values for the second light. */\n  const light2: LightValues = {\n    position: [-180, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  // END: The temporary values for the grid.\n\n  const { calcCellHeight, calcGridPosition, calcCellPosition, center } = useGridCalculations(\n    data,\n    gridSpacing,\n    cellSize,\n    cellSpacing,\n    scale,\n    maxValue\n  );\n\n  return (\n    <>\n      <Canvas>\n        <OrbitControls autoRotate={rotate} autoRotateSpeed={speed} target={center} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, yearIndex) => {\n          const forYear = startYear + yearIndex;\n          const gridPosition = calcGridPosition(yearIndex);\n          return (\n            <group key={`${id}-grid-${forYear}`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = calcCellHeight(value);\n                  const cellPosition: [number, number, number] = [\n                    calcCellPosition(dayIndex),\n                    cellHeight / 2,\n                    calcCellPosition(weekIndex)\n                  ];\n\n                  return (\n                    <Box\n                      key={`${id}-grid-${weekIndex}-${dayIndex}`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n```\n\nThis component is more complex than the previous one, so let's break it down.\n\nHere's a brief overview of the 3D components we imported:\n\n- The `Canvas` component from `@react-three/fiber` renders the 3D scene.\n- The `PerspectiveCamera` simulates human perception by projecting the 3D scene onto a 2D plane, creating depth by making objects appear smaller as they recede into the distance.\n- The `OrbitControls` helper enables interaction with the 3D scene using mouse or touch inputs, providing an intuitive way to navigate the 3D space through panning, zooming, and orbiting.\n- The [`hemisphereLight`](https://threejs.org/docs/?q=directionalLight#api/en/lights/hemisphereLight) and [`directionalLight`](https://threejs.org/docs/?q=directionalLight#api/en/lights/DirectionalLight) add lighting to the scene.\n- The `Box` component is a convenient wrapper for rendering cuboid shapes.\n- The [`meshPhongMaterial`](https://threejs.org/docs/#api/en/materials/MeshPhongMaterial) is a type of material suitable for 3D objects with shiny surfaces.\n\nHere's an explanation of the position and dimension calculations:\n\n![3D Plane Calculation](/img/posts/3d-bar-charts/step-05-3d-plane-calculation.png)\n\n- The `calcCellHeight` function calculates `Box` heights based on their value, the maximum value in the dataset, and the `scale` factor. The final height is determined by dividing the cell value by the maximum value, and then multiplying by the `scale` factor. This ensures that each cell's height is proportional to its value compared to the maximum value in the data set.\n- The `calcCellPosition` calculates the distance of a cell from point `[0, 0, 0]` of a grid. It takes in an index value and multiplies it by the sum of the `cellSize` and `cellSpacing` values. This ensures that each cell is consistently spaced from the previous cell along the X- and Z-axes. We add half the cell size to the result to ensure that the cell starts at the correct position since objects are positioned from their center.\n- The `calcGridPosition` calculates the position of each year's grid in the 3D space. The X-coordinate is determined by multiplying the index of the year by the total width of the 7 columns of cells (including cell spacing), and then by the `gridSpacing` value. This ensures that each year's grid is consistently spaced from the previous grid along the X-axis.\n- We can then calculate for the `center` of the Canvas by calculating the `gridWidth` (7 cells for 7 days) and `gridLength` (54 cells for 54 weeks) and then dividing each by 2. This gives us the center of the grid, which we can use to center the camera and the orbit controls.\n\n> **NOTE**: For more information about the triplet of numbers used to represent a position in 3D space, see the Three.js documentation about [`Vector3`](https://threejs.org/docs/#api/en/math/Vector3).\n\nNow, update the index page to use the new component:\n\n```tsx filename=src/pages/index.tsx\nimport type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport TitanicGrids from '~/components/TitanicGrids';\n\nconst URL = `https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <TitanicGrids data={data} startYear={minYear} maxValue={maxValue} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n```\n\nRunning the app now should display something like this:\n\n![Add 3D Chart](/img/posts/3d-bar-charts/step-05-add-3d-chart.png)\n\nYou can move the camera around by clicking and dragging the left mouse button or using touch inputs. Zoom in and out by scrolling the mouse wheel or pinching the screen. Pan the camera using the right mouse button or a two-finger drag.\n\n## Step 6: Adding a helper GUI to customize the chart\n\nWe're nearly finished! To make our chart easier to customize, let's add one more library.\n\nOpen the `src/components/TitanicGrids.tsx` file and update it with the following:\n\n```tsx filename=src/components/TitanicGrids.tsx\nimport { type FC, useId } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Box, PerspectiveCamera, OrbitControls } from '@react-three/drei';\nimport { useControls, Leva } from 'leva';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\nimport { useGridCalculations } from '~/hooks';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const id = useId();\n\n  const { cellSize, cellSpacing, gridSpacing, color, unusedColor, scale } = useControls('Cells', {\n    /** The length of each cell in the grid. */\n    cellSize: {\n      value: 1.0,\n      step: 0.05,\n      min: 1.0\n    },\n    /** The spacing between each cell in the grid. */\n    cellSpacing: {\n      value: 0.2,\n      step: 0.05,\n      min: 0.1\n    },\n    /** The scale of the cells. */\n    scale: {\n      value: 20.0,\n      step: 1.0,\n      min: 0.0\n    },\n    /** The spacing between each grid in the scene. */\n    gridSpacing: {\n      value: 1.4,\n      step: 0.05,\n      min: 0.1\n    },\n    /** The color of the regular cells. */\n    color: '#a0185a',\n    /** The color of the unused cells. */\n    unusedColor: '#cccccc'\n  });\n\n  const { rotate, speed, camera } = useControls('Controls', {\n    /** The position of the camera. */\n    camera: [-50, 25, 29],\n    /** Whether the camera should rotate or not. */\n    rotate: true,\n    /** The speed of the camera rotation. */\n    speed: {\n      value: 1.0,\n      step: 0.1,\n      min: 0.0\n    }\n  });\n\n  const light1 = useControls('Light 1', {\n    /** The position of the light. */\n    position: {\n      value: [90, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const light2 = useControls('Light 2', {\n    /** The position of the light. */\n    position: {\n      value: [-180, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const { calcCellHeight, calcGridPosition, calcCellPosition, center } = useGridCalculations(\n    data,\n    gridSpacing,\n    cellSize,\n    cellSpacing,\n    scale,\n    maxValue\n  );\n\n  return (\n    <>\n      <Leva collapsed={false} />\n      <Canvas>\n        <OrbitControls autoRotate={rotate} autoRotateSpeed={speed} target={center} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, yearIndex) => {\n          const forYear = startYear + yearIndex;\n          const gridPosition = calcGridPosition(yearIndex);\n          return (\n            <group key={`${id}-grid-${forYear}`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = calcCellHeight(value);\n                  const cellPosition: [number, number, number] = [\n                    calcCellPosition(dayIndex),\n                    cellHeight / 2,\n                    calcCellPosition(weekIndex)\n                  ];\n\n                  return (\n                    <Box\n                      key={`${id}-grid-${weekIndex}-${dayIndex}`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n```\n\nWe're using the [`leva` library](https://github.com/pmndrs/leva) to add a helper panel on the right side of the screen. This floating panel enables real-time modification of the grid's appearance.\n\n![Customize 3D Chart](/img/posts/3d-bar-charts/step-06-customize-3d-chart.png)\n\nWe can change the size of the cells, the spacing between them, the color of the cells, and more. We can also enable/disable the camera rotation and change its speed. We can also enable/disable the two lights in the scene and change their position, intensity, and color. The panel also shows the current values of the controls. This is very useful for debugging and tweaking the grid's appearance.\n\n## Conclusion\n\nGive yourself a pat on the back! We have successfully created a 3D grid visualization for time-series data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber). You can find the live version at [The Wandering Inndex](https://titan.inndex.omg.lol/) and the full source code on the [wandering-inndex/titan](https://github.com/wandering-inndex/titan) repository.\n\nLet's review the steps we took:\n\n1. [Project Setup](#step-1-project-setup): We initialized a new React project using [Create T3 App](https://create.t3.gg/) and installed the required dependencies.\n2. [Preparing our Data](#step-2-preparing-our-data): We retrieved the raw dataset and transformed it into a suitable format for analysis.\n3. [Creating the Time-series Data](#step-3-creating-the-time-series-data): We further transformed the data, organizing it by year and week. We also learned about the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard and adapted it to our needs.\n4. [Show the data in a 2D Grid](#step-4-show-the-data-in-a-2d-grid): We began visualizing the data in a simple 2D grid format to understand the data structure and prepare for the next step.\n5. [Show the Data in a 3D Grid](#step-5-show-the-data-in-a-3d-grid): We built upon the 2D grid to create a 3D grid representing data points, providing a more visually appealing representation of the time-series data.\n6. [Adding a helper GUI to customize the chart](#step-6-adding-a-helper-gui-to-customize-the-chart): We added a helper interface that allows real-time customization of the grid elements' appearance and behavior.\n\nThis tutorial serves as a starting point for what you can achieve with React Three Fiber. Potential enhancements could include:\n\n- Adding tooltips and labels to show more information about each bar when hovering.\n- Adding animations to the bars like a growing animation when the data is first loaded.\n- Adding filters to enable users to modify the displayed data in real-time.\n\nI encourage you to experiment with the code and build upon it to create your own unique 3D grid visualizations.\n\nHappy coding!\n","excerpt":"\nIn this tutorial, we will create a 3D grid visualization of our timeseries data using [React Three Fiber](https://github.com/pmndrs/react-three-fiber), a React renderer for [Three.js](https://threejs.org/). By following these steps, you'll gain a deeper understanding of how to work with time-series...","serializedContent":{"compiledSource":"var m=Object.defineProperty,h=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var s=(a,t,n)=>t in a?m(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n,e=(a,t)=>{for(var n in t||(t={}))l.call(t,n)&&s(a,n,t[n]);if(i)for(var n of i(t))o.call(t,n)&&s(a,n,t[n]);return a},p=(a,t)=>h(a,c(t));var d=(a,t)=>{var n={};for(var r in a)l.call(a,r)&&t.indexOf(r)<0&&(n[r]=a[r]);if(a!=null&&i)for(var r of i(a))t.indexOf(r)<0&&o.call(a,r)&&(n[r]=a[r]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var r=n,{components:a}=r,t=d(r,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In this tutorial, we will create a 3D grid visualization of our timeseries data using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pmndrs/react-three-fiber\"}),\"React Three Fiber\"),\", a React renderer for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://threejs.org/\"}),\"Three.js\"),\". By following these steps, you'll gain a deeper understanding of how to work with time-series data, create compelling visualizations, and customize them in real-time.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/titan.png\",alt:\"Project Titan\"}))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": You can find the live version at \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://titan.inndex.omg.lol/\"}),\"The Wandering Inndex\"),\" and the full source code on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/wandering-inndex/titan\"}),\"wandering-inndex/titan\"),\" repository. This project is inspired by \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://skyline.github.com/\"}),\"GitHub Skyline\"),\", a web application that creates a 3D visualization of a user's GitHub contributions.\")),mdx(\"p\",null,\"As this is a lengthy post, here's a table of contents to help you navigate:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-1-project-setup\"}),\"Step 1: Project Setup\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#prerequisites\"}),\"Prerequisites\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#create-a-new-nextjs-project\"}),\"Create a new Next.js project\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#install-additional-project-dependencies\"}),\"Install Additional Project Dependencies\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#clean-up-the-home-page\"}),\"Clean up the Home Page\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-2-preparing-our-data\"}),\"Step 2: Preparing our Data\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#creating-the-type-definitions\"}),\"Creating the Type Definitions\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#convert-the-chapter-data-to-a-mapping-of-dates-to-values\"}),\"Convert the Chapter data to a mapping of dates to values\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#show-the-parsed-chapter-data-on-the-page\"}),\"Show the parsed Chapter data on the page\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-3-creating-the-time-series-data\"}),\"Step 3: Creating the Time-series Data\"),mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#defining-the-time-series-data-types\"}),\"Defining the Time-series Data Types\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#gregorian-calendar-vs-iso-8601-calendar\"}),\"Gregorian Calendar vs ISO 8601 Calendar\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#modified-version\"}),\"Modified Version\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#using-date-fns\"}),\"Using date-fns\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#converting-the-valuesperday-mapping-to-our-desired-data-structure\"}),\"Converting the ValuesPerDay mapping to our desired data structure\")))),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-4-show-the-data-in-a-2d-grid\"}),\"Step 4: Show the data in a 2D Grid\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-5-show-the-data-in-a-3d-grid\"}),\"Step 5: Show the Data in a 3D Grid\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Step 6: Adding a helper GUI to customize the chart\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#conclusion\"}),\"Conclusion\"))),mdx(\"h2\",e({},{id:\"step-1-project-setup\"}),\"Step 1: Project Setup\"),mdx(\"p\",null,\"In this initial step, we will create a new project utilizing \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\". If you already have a \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://react.dev/\"}),\"React\"),\" project in place, simply install the \",mdx(\"a\",e({parentName:\"p\"},{href:\"#install-additional-project-dependencies\"}),\"additional dependencies\"),\" mentioned below and proceed to the \",mdx(\"a\",e({parentName:\"p\"},{href:\"#step-2-preparing-our-data\"}),\"following step\"),\".\"),mdx(\"h3\",e({},{id:\"prerequisites\"}),\"Prerequisites\"),mdx(\"p\",null,\"First, install a version manager for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nodejs.org/en\"}),\"Node.js\"),\" compatible with your operating system:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/nvm-sh/nvm\"}),\"Node Version Manager\"),\" (Linux/macOS)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/coreybutler/nvm-windows\"}),\"NVM for Windows\"),\" (Windows)\")),mdx(\"p\",null,\"After installing \",mdx(\"inlineCode\",{parentName:\"p\"},\"nvm\"),\", install the latest \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Long-term_support\"}),\"LTS version\"),\" of \",mdx(\"inlineCode\",{parentName:\"p\"},\"node\"),\" by executing:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`# Linux/macOS\n$ nvm install --lts\n\n# Windows\n$ nvm install lts\n`)),mdx(\"p\",null,\"Next, we'll install \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://pnpm.io/\"}),\"pnpm\"),\", a faster and more efficient alternative to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.npmjs.com/\"}),\"npm\"),\". To install \",mdx(\"inlineCode\",{parentName:\"p\"},\"pnpm\"),\", run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ npm install -g pnpm\n`)),mdx(\"h3\",e({},{id:\"create-a-new-nextjs-project\"}),\"Create a new Next.js project\"),mdx(\"p\",null,\"For our project, we'll use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\", a command-line tool that helps you generate a new React project with pre-configured setups for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://nextjs.org/\"}),\"Next.js\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/\"}),\"TypeScript\"),\", and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://tailwindcss.com/\"}),\"Tailwind CSS\"),\".\"),mdx(\"p\",null,\"To create a new T3 project, execute:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm create t3-app@latest\n#     ___ ___ ___   __ _____ ___   _____ ____    __   ___ ___\n#    / __| _ \\\\ __| /  \\\\_   _| __| |_   _|__ /   /  \\\\ | _ \\\\ _ \\\\\n#   | (__|   / _| / /\\\\ \\\\| | | _|    | |  |_ \\\\  / /\\\\ \\\\|  _/  _/\n#    \\\\___|_|_\\\\___|_/\\xAF\\xAF\\\\_\\\\_| |___|   |_| |___/ /_/\\xAF\\xAF\\\\_\\\\_| |_|\n# ? What will your project be called? (my-t3-app) titan\n# ? Will you be using JavaScript or TypeScript? TypeScript\n# ? Which packages would you like to enable? tailwind\n# ? Initialize a new git repository? (Y/n) Yes\n# ? Would you like us to run pnpm install? (Y/n) Yes\n# ? What import alias would you like configured? ~/\n#\n# \\u2714 titan scaffolded successfully!\n`)),mdx(\"p\",null,\"You can choose any project name you prefer. For this guide, we'll use \",mdx(\"inlineCode\",{parentName:\"p\"},\"titan\"),\", which is inspired by a character in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\", one of the longest pieces of English fiction. The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.patreon.com/pirateaba\"}),\"author\"),\" has been consistently writing since 2016, and we'll use their writing data for our visualization.\"),mdx(\"h3\",e({},{id:\"install-additional-project-dependencies\"}),\"Install Additional Project Dependencies\"),mdx(\"p\",null,\"Once the project is created, navigate to the project directory:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ cd titan\n`)),mdx(\"p\",null,\"Now, install the necessary dependencies for our project:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm add three @types/three @react-three/fiber @react-three/drei leva date-fns yaml\n`)),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"three\")),\" is a JavaScript 3D library that we will use to create our 3D visualization.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.npmjs.com/package/@types/three\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"@types/three\")),\" provides TypeScript type definitions for \",mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pmndrs/react-three-fiber\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"@react-three/fiber\")),\" serves as a React renderer for \",mdx(\"inlineCode\",{parentName:\"li\"},\"three\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pmndrs/drei\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"@react-three/drei\")),\" offers a suite of React components for \",mdx(\"inlineCode\",{parentName:\"li\"},\"@react-three/fiber\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pmndrs/leva\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"leva\")),\" is a GUI library for building controls for our visualization.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://date-fns.org/\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"date-fns\")),\" is a date utility library for parsing and formatting dates.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/eemeli/yaml\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"yaml\")),\" is a \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://yaml.org/\"}),\"YAML\"),\" data parser.\")),mdx(\"h3\",e({},{id:\"clean-up-the-home-page\"}),\"Clean up the Home Page\"),mdx(\"p\",null,\"Open the project directory in your preferred code editor and replace the contents of \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/pages/index.tsx\"),\" with the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage } from 'next';\nimport Head from 'next/head';\n\nconst Home: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n      </main>\n    </>\n  );\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"Update the look of your \",mdx(\"inlineCode\",{parentName:\"p\"},\"body\"),\" tag by modifying \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/styles/globals.css\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-css\",metastring:\"filename=src/styles/globals.css\",filename:\"src/styles/globals.css\"}),`@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    @apply bg-gray-100;\n  }\n}\n`)),mdx(\"p\",null,\"Finally, start the development server by running:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-bash\"}),`$ pnpm dev\n`)),mdx(\"p\",null,\"You should now see an empty page with the project name at the top.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-01-empty-page.png\",alt:\"Empty Page\"}))),mdx(\"h2\",e({},{id:\"step-2-preparing-our-data\"}),\"Step 2: Preparing our Data\"),mdx(\"p\",null,\"In this step, we'll fetch our data from \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://inndex.omg.lol/\"}),\"The Wandering Inndex\"),\", a community-driven project that compiles and analyzes data about \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\" for public access. The raw data for the published chapters is in \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://yaml.org/\"}),\"YAML format\"),\", and we'll use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.npmjs.com/package/yaml\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"yaml\")),\" package to parse it and convert it to our desired format.\"),mdx(\"h3\",e({},{id:\"creating-the-type-definitions\"}),\"Creating the Type Definitions\"),mdx(\"p\",null,\"In \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/\"}),\"TypeScript\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.typescriptlang.org/docs/handbook/2/type-declarations.html\"}),\"type declarations\"),\" define the structure of objects, interfaces, classes, and functions. This enhances clarity and documentation within the codebase, making it more comprehensible and maintainable for developers.\"),mdx(\"p\",null,\"First, let's declare the type definitions for our application. Conveniently, the data we're working with already has \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/wandering-inndex/seed-data/blob/main/types/media.ts\"}),\"type definitions available\"),\" available. We'll use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" interface, which represents data about individual chapters. Since we'll only use a portion of the available fields from the complete type definitions, create a new file at \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/chapters.ts\"),\" and insert the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/chapters.ts\",filename:\"src/types/chapters.ts\"}),`/** Minimal interface that represents the individual Chapter data. */\nexport interface Chapter {\n  /** Unique ID for the chapter. */\n  id: string;\n  /** Flags for the chapter. */\n  meta: {\n    /** If true, then it will be shown in the table of contents. */\n    show: boolean;\n  };\n  /** Specifies that a chapter is part of a bigger collection. */\n  partOf: {\n    /** Part of a Web Novel Volume. */\n    webNovel?: {\n      /** The volume this is collected under. */\n      ref: number | null;\n      /**\n       * The timestamp when this chapter is originally published. This can be\n       * found via the \\`meta[property='article:published_time']\\` selector.\n       */\n      published: string | null;\n      /**\n       * Total words based on https://wordcounter.net/. Without the title,\n       * author's notes, artworks, etc.\n       */\n      totalWords: number | null;\n    };\n  };\n}\n`)),mdx(\"p\",null,\"We want to display chapters that are being shown in the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://wanderinginn.com/table-of-contents/\"}),\"Table of Contents page\"),\" (\",mdx(\"inlineCode\",{parentName:\"p\"},\"meta.show === true\"),\") and are part of a Web Novel Volume (\",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.ref > 0\"),\"). Additionally, we'll use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.published\"),\" field to determine the chapter's publication date and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"partOf.webNovel.totalWords\"),\" field to identify the chapter's word count.\"),mdx(\"p\",null,\"Next, create the type definitions for our time-related data. Create \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/calendar.ts\"),\" and include the following:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/calendar.ts\",filename:\"src/types/calendar.ts\"}),`// TODO: Add type definition for \\`CalendarWeekData\\`.\n// TODO: Add type definition for \\`CalendarYearData\\`.\n// TODO: Add type definition for \\`CalendarYearsData\\`.\n\n/**\n * Maps a value per date string.\n * The date string must be in a valid ISO 8601 format.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @example\n * const map: ValuesPerDay = new Map<string, number>([\n *  [\"2021-01-01\", 1000],\n *  [\"2021-01-02\", 2000],\n *  [\"2021-01-03\", 3000],\n * ]);\n */\nexport type ValuesPerDay = Map<string, number>;\n`)),mdx(\"p\",null,\"Then, create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/index.ts\"),\" file and insert the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/index.ts\",filename:\"src/types/index.ts\"}),`export * from './calendar';\nexport * from './chapters';\n`)),mdx(\"p\",null,\"This allows us to import all our types from a single location (e.g. \",mdx(\"inlineCode\",{parentName:\"p\"},'import { ValuesPerDay } from \"~/types/\";'),\").\"),mdx(\"p\",null,\"Our goal for this step is to transform the \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data into a mapping of word counts by date (\",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\").\"),mdx(\"h3\",e({},{id:\"convert-the-chapter-data-to-a-mapping-of-dates-to-values\"}),\"Convert the Chapter data to a mapping of dates to values\"),mdx(\"p\",null,\"Now, create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/chapters.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/chapters.ts\",filename:\"src/utils/chapters.ts\"}),`import { isMatch, formatISO, parseISO } from 'date-fns';\n\nimport type { Chapter, ValuesPerDay } from '~/types';\n\n/**\n * Checks if a chapter should be included based on the given conditions.\n *\n * @param {Chapter} chapter - The chapter to check.\n * @returns {boolean} - \\`true\\` if the chapter should be included, \\`false\\`\n * otherwise.\n */\nexport const shouldIncludeChapter = (chapter: Chapter): boolean => {\n  const shouldShow = chapter.meta.show === true;\n  const hasValidWebNovelRef = (chapter.partOf.webNovel?.ref ?? 0) > 0;\n  const hasValidPublishedDate = isMatch(\n    chapter.partOf.webNovel?.published ?? '',\n    \"yyyy-MM-dd'T'HH:mm:ssXXX\"\n  );\n\n  return shouldShow && hasValidWebNovelRef && hasValidPublishedDate;\n};\n\n/** The return data from the \\`convertChaptersToMapping\\` function. */\nexport interface ConvertChaptersToMappingOutput {\n  /** This maps a date string to the number of words written on that day. */\n  mapping: ValuesPerDay;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/**\n * Converts an array of \\`Chapter\\` objects to a \\`ConvertChaptersToMappingOutput\\`.\n *\n * @param {Chapter[]} chapters - The array of \\`Chapter\\` objects.\n * @returns {ConvertChaptersToMappingOutput} - The output of the conversion.\n */\nexport const convertChaptersToMapping = (chapters: Chapter[]): ConvertChaptersToMappingOutput => {\n  const mapping: ValuesPerDay = new Map();\n\n  let minYear = Number.POSITIVE_INFINITY;\n  let maxYear = Number.NEGATIVE_INFINITY;\n  let minValue = Number.POSITIVE_INFINITY;\n  let maxValue = Number.NEGATIVE_INFINITY;\n\n  for (const chapter of chapters) {\n    if (!shouldIncludeChapter(chapter)) {\n      continue;\n    }\n\n    const publishedDate = chapter.partOf.webNovel?.published ?? '';\n    const totalWords = chapter.partOf.webNovel?.totalWords ?? 0;\n\n    if (publishedDate) {\n      const date = parseISO(publishedDate);\n      const dateKey = formatISO(date, {\n        representation: 'date'\n      });\n\n      const existingWordCount = mapping.get(dateKey) ?? 0;\n      const newWordCount = existingWordCount + totalWords;\n      mapping.set(dateKey, newWordCount);\n\n      const year = date.getFullYear();\n      minYear = Math.min(minYear, year);\n      maxYear = Math.max(maxYear, year);\n      minValue = Math.min(minValue, newWordCount);\n      maxValue = Math.max(maxValue, newWordCount);\n    }\n  }\n\n  return { mapping, minYear, maxYear, minValue, maxValue };\n};\n`)),mdx(\"p\",null,\"This file contains a utility function that converts our \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data into a mapping of dates to word counts (\",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\"). The code is relatively straightforward, but let's examine it more closely.\"),mdx(\"p\",null,\"First, we define a \",mdx(\"inlineCode\",{parentName:\"p\"},\"shouldIncludeChapter\"),\" function to verify whether a chapter should be included based on specific conditions. This function returns \",mdx(\"inlineCode\",{parentName:\"p\"},\"true\"),\" if the chapter meets the conditions and \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\" otherwise. The conditions are:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.meta.show\"),\" must be \",mdx(\"inlineCode\",{parentName:\"li\"},\"true\"),\".\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.partOf.webNovel.ref\"),\" must be greater than 0.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"chapter.partOf.webNovel.published\"),\" must be a valid date string.\")),mdx(\"p\",null,\"Next, we define a \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" function that converts an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" objects to an object with the following properties:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"mapping\"),\": This maps a date string to the number of words written on that day.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"minYear\"),\": The earliest year in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"maxYear\"),\": The latest year in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"minValue\"),\": The smallest value in the dataset.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"maxValue\"),\": The largest value in the dataset.\")),mdx(\"p\",null,\"The function iterates through each \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\", verifying if it should be included. If so, it adds the number of words written on that day to the mapping. It also updates the \",mdx(\"inlineCode\",{parentName:\"p\"},\"minYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxYear\"),\", \",mdx(\"inlineCode\",{parentName:\"p\"},\"minValue\"),\", and \",mdx(\"inlineCode\",{parentName:\"p\"},\"maxValue\"),\" properties as needed.\"),mdx(\"p\",null,\"Finally, let's create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/index.ts\"),\" file and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/index.ts\",filename:\"src/utils/index.ts\"}),`export * from './chapters';\n`)),mdx(\"h3\",e({},{id:\"show-the-parsed-chapter-data-on-the-page\"}),\"Show the parsed Chapter data on the page\"),mdx(\"p\",null,\"Update the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/pages/index.tsx\"),\" page to fetch our \",mdx(\"inlineCode\",{parentName:\"p\"},\"Chapter\"),\" data from the source repository. Then, use the \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" function to convert the data and display the relevant information on the page.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping } from '~/utils';\nimport type { Chapter } from '~/types';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n\n  return {\n    props: {\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getServerSideProps\")),\" is a unique Next.js function that runs on the server before the page is rendered. We use this function to fetch the YAML data from our data source. We then convert the data to a mapping of dates to values using the \",mdx(\"inlineCode\",{parentName:\"p\"},\"convertChaptersToMapping\"),\" function we created earlier. We return the outputs as props to our Home page component, displaying the values as a simple HTML unordered list.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-02-with-values.png\",alt:\"With Values\"}))),mdx(\"h2\",e({},{id:\"step-3-creating-the-time-series-data\"}),\"Step 3: Creating the Time-series Data\"),mdx(\"p\",null,\"In this step, we'll organize the data by year and week. This process involves creating utility functions that calculate the week numbers using a modified ISO 8601 standard.\"),mdx(\"h3\",e({},{id:\"defining-the-time-series-data-types\"}),\"Defining the Time-series Data Types\"),mdx(\"p\",null,\"First, let's update the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/types/calendar.ts\"),\" file to define the data structure we will use to visualize the data. Add the following code to the top:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/types/calendar.ts\",filename:\"src/types/calendar.ts\"}),`/**\n * Represents a tuple of a given type \\`T\\` and fixed length \\`N\\`.\n *\n * @see https://stackoverflow.com/a/74801694\n */\ntype Tuple<T, N extends number, R extends T[] = []> = number extends N\n  ? T[]\n  : R['length'] extends N\n  ? R\n  : Tuple<T, N, [T, ...R]>;\n\n/**\n * An array that represents values per day of the week.\n *\n * For this project, the first day of the week will be Monday, as per ISO 8601:\n *\n * - INDEX 0: MON\n * - INDEX 1: TUE\n * - INDEX 2: WED\n * - INDEX 3: THU\n * - INDEX 4: FRI\n * - INDEX 5: SAT\n * - INDEX 6: SUN\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * If there are no values for that specific day, it will be 0.\n * If that day is not part of the calendar year, it will be -1.\n *\n * @example\n * const week: CalendarWeekData = [1000, 2000, 3000, 4000, 5000, 6000, 7000];\n * const weekWithoutValues: CalendarYearData = [0, 0, 0, 0, 0, 0, 0];\n * const weekWithDaysNotInYear: CalendarYearData = [-1, -1, -1, -1, -1, -1, -1];\n * const weekMixed: CalendarYearData = [-1, -1, 0, 0, 5000, 0, 7000];\n */\nexport type CalendarWeekData = Tuple<number, 7>;\n\n/**\n * An array that represents values per week of the year.\n *\n * Most years have 52 weeks, but if the year starts on a Thursday or is a leap\n * year that starts on a Wednesday, that particular year will have 53 weeks.\n *\n * In ISO 8601, if January 1 is on a Monday, Tuesday, Wednesday, or Thursday, it\n * is in week 1. If January 1 is on a Friday, Saturday or Sunday, it is in week\n * 52 or 53 of the previous year (there is no week 0). December 28 will always\n * be in the last week of its year.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * For this project:\n *\n * - We will *ALWAYS* create a 54-week year.\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1. The total\n *   weeks will be coming from to \\`date-fns\\`:\n *   {@link https://date-fns.org/docs/getISOWeeksInYear}\n */\nexport type CalendarYearData = Array<CalendarWeekData>;\n\n/** An array that represents values per year. */\nexport type CalendarYearsData = Array<CalendarYearData>;\n\n// ...\n//\n// Definition for \\`ValuesPerDay\\`\n`)),mdx(\"p\",null,\"Our objective is to transform the \",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\" mapping we created previosly into an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\". A \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\" consists of an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarWeekData\"),\" values, which are themselves arrays of word counts per week.\"),mdx(\"p\",null,\"To help visualize this multi-dimensional array, imagine a 2D grid where one axis represents the week number, another axis represents the day of the week, and the cell value represents the word count.\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-grid.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-grid.png\",alt:\"Year Grid\"})))),mdx(\"p\",null,\"Some key points to note about this grid:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The week starts on Monday (index 0) and ends on Sunday (index 6).\"),mdx(\"li\",{parentName:\"ul\"},\"There are 54 weeks (indexes 0 to 53) instead of the usual 52 or 53 weeks.\")),mdx(\"p\",null,\"It's essential to recognize that the start of the week \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.timeanddate.com/date/week-numbers.html\"}),\"varies across cultures\"),\", as does the number of weeks in a year. Some years have 52 weeks, while others have 53 weeks during leap years. Additionally, since the start of the week can differ, the number of weeks can also vary. In this project, we will use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"ISO 8601 standard\"),\" standard as our basis, with some modifications.\"),mdx(\"h3\",e({},{id:\"gregorian-calendar-vs-iso-8601-calendar\"}),\"Gregorian Calendar vs ISO 8601 Calendar\"),mdx(\"p\",null,\"ISO 8601 is a standard that defines how to represent dates and times. For further information, check out the articles for \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"ISO 8601\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/ISO_week_date#Relation_with_the_Gregorian_calendar\"}),\"ISO week date\"),\", and \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://help.tableau.com/current/pro/desktop/en-us/dates_calendar.htm\"}),\"ISO-8601 Week-Based Calendar\"),\".\"),mdx(\"p\",null,\"Here are some key differences between the Gregorian Calendar and the ISO 8601 Calendar:\"),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"Gregorian Calendar\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"ISO 8601 Calendar\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"The year always starts on January 1.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"The year starts on the first Monday closest to January 1, meaning the year may begin anywhere between December 29 and January 4.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Weeks can extend across years.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Each week has exactly 7 days, starts on Monday, and belongs to a single year.\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"Years can have 365 or 366 days.\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"A year has 52 or 53 full weeks, which is 364 or 371 days.\")))),mdx(\"p\",null,\"The following example demonstrates the difference when transitioning from December 2004 to January 2005. The Gregorian Calendar starts the year on January 1, while the ISO 8601 Calendar starts the year on January 3.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-iso-8601-calendar.png\",alt:\"Different Calendars\"}))),mdx(\"p\",null,\"Calendar applications typically use the Gregorian calendar but offer the option to show ISO 8601 week numbers.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-combined-calendars.png\",alt:\"Combined Calendars\"}))),mdx(\"h3\",e({},{id:\"modified-version\"}),\"Modified Version\"),mdx(\"p\",null,\"While ISO 8601 is a valuable standard, we must modify it to suit our needs:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Our year will always have 54 weeks (378 days), ensuring all years have the same number of columns when displayed side-by-side in grids.\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"The extra week will be placed at the beginning, assigned an index of 0.\"))),mdx(\"li\",{parentName:\"ul\"},\"The week number will follow the ISO 8601 standard, with a few exceptions:\",mdx(\"ul\",{parentName:\"li\"},mdx(\"li\",{parentName:\"ul\"},\"If the date's month is January, but the ISO week number is greater than 50, change the week number to 0.\"),mdx(\"li\",{parentName:\"ul\"},\"If the date's month is December, but the ISO week number is less than 10, change the week number to the last ISO 8601 week number of that year plus 1.\"))),mdx(\"li\",{parentName:\"ul\"},\"Our weeks will start on Monday, with days having 0-based indexes, so Monday will be 0 and Sunday will be 6.\"),mdx(\"li\",{parentName:\"ul\"},\"In our data structure, the word counts for each week will be represented as an array of 7 numbers. If the week has unused slots, the values for those days will be represented as negative numbers.\")),mdx(\"p\",null,\"Let's visualize this modified calendar:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-03-combined-modified-calendars.png\",alt:\"Combined and Modified Calendars\"}))),mdx(\"p\",null,\"In 2004, Week 53 will end with two unused days at the end (marked as \",mdx(\"inlineCode\",{parentName:\"p\"},\"X\"),\" in the chart). In 2005, Week 0 will start with five unused days at the beginning (marked as \",mdx(\"inlineCode\",{parentName:\"p\"},\"X\"),\" in the chart), and Week 1 will start on January 3. If we continue and fill up our grid for the year 2005 with our dates, we will get:\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-2005-grid.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-2005-grid.png\",alt:\"Year 2005 Grid\"})))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Notice that we have 13 unused days for 2005. Week 0 has 5 at the start, Week 52 has 1 at the end, and Week 53 has all 7 slots unused.\")),mdx(\"p\",null,\"In our data structure, we will initialize the grid with negative numbers for the unused days and 0 for the rest:\"),mdx(\"p\",null,mdx(\"a\",e({parentName:\"p\"},{href:\"/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png\"}),mdx(\"img\",e({parentName:\"a\"},{src:\"/img/posts/3d-bar-charts/step-03-year-2005-grid-initialized.png\",alt:\"Year 2005 Grid Initialized\"})))),mdx(\"h3\",e({},{id:\"using-date-fns\"}),\"Using date-fns\"),mdx(\"p\",null,\"We'll use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/\"}),\"date-fns\"),\" library to simplify our ISO 8601 calculations. We will use the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getISOWeek\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getISOWeek\")),\" function to get the week number for a given date, and the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getISOWeeksInYear\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getISOWeeksInYear\")),\" function to get the number of weeks in a given year. We can get the day index by using the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://date-fns.org/docs/getDay\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"getDay\")),\" function and subtracting 1 from the result.\"),mdx(\"p\",null,\"Let's try checking the values for \",mdx(\"inlineCode\",{parentName:\"p\"},\"2004-12-28\"),\" to \",mdx(\"inlineCode\",{parentName:\"p\"},\"2005-01-04\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\"}),`import {\n  formatISO,\n  getDay,\n  getISODay,\n  getISOWeek,\n  getISOWeeksInYear,\n  getISOWeekYear\n} from 'date-fns';\n\nconst newDate = (year: number, month: number, day: number): Date => {\n  // The month is 0-based, so January is 0 and December is 11.\n  return new Date(year, month - 1, day, 0, 0, 0, 0);\n};\n\nconst analyzeDate = (date: Date) => {\n  return {\n    // Extracts the YYYY-MM-DD portion of the Date object.\n    formattedDate: formatISO(date, { representation: 'date' }),\n    // The day of the week, 0-6, where Sunday is the first day of the week.\n    gregDay: getDay(date),\n    // The day of the week, 1-7, where Monday is the first day of the week.\n    isoDay: getISODay(date),\n    // The year of the date.\n    gregYear: date.getFullYear(),\n    // The ISO week-numbering year of the date.\n    isoWeekYear: getISOWeekYear(date),\n    // The ISO week-numbering week of the date.\n    isoWeek: getISOWeek(date),\n    // The number of weeks in the ISO week-numbering year.\n    isoWeeksInYear: getISOWeeksInYear(date)\n  };\n};\n\nconsole.table([\n  analyzeDate(newDate(2004, 12, 28)),\n  analyzeDate(newDate(2004, 12, 29)),\n  analyzeDate(newDate(2004, 12, 30)),\n  analyzeDate(newDate(2004, 12, 31)),\n  analyzeDate(newDate(2005, 1, 1)),\n  analyzeDate(newDate(2005, 1, 2)),\n  analyzeDate(newDate(2005, 1, 3)),\n  analyzeDate(newDate(2005, 1, 4))\n]);\n`)),mdx(\"table\",null,mdx(\"thead\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"thead\"},mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"(index)\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"formattedDate\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"gregDay\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoDay\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"gregYear\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeekYear\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeek\"),mdx(\"th\",e({parentName:\"tr\"},{align:null}),\"isoWeeksInYear\"))),mdx(\"tbody\",{parentName:\"table\"},mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-28\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-29\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-30\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"3\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2004-12-31\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"4\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-01\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"5\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-02\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"0\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"7\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2004\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"53\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"6\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-03\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"52\")),mdx(\"tr\",{parentName:\"tbody\"},mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"7\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),'\"2005-01-04\"'),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"2005\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"1\"),mdx(\"td\",e({parentName:\"tr\"},{align:null}),\"52\")))),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Take note of the differences between the Gregorian and ISO 8601 years and weeks. Using the wrong functions can lead to \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.youtube.com/watch?v=D3jxx8Yyw1c\"}),\"unwanted bugs in your application\"),\".\")),mdx(\"h3\",e({},{id:\"converting-the-valuesperday-mapping-to-our-desired-data-structure\"}),\"Converting the ValuesPerDay mapping to our desired data structure\"),mdx(\"p\",null,\"Now let's build a function to convert our \",mdx(\"inlineCode\",{parentName:\"p\"},\"ValuesPerDay\"),\" mapping into an array of \",mdx(\"inlineCode\",{parentName:\"p\"},\"CalendarYearData\"),\". First, create a \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/calendar.ts\"),\" file and include the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/calendar.ts\",filename:\"src/utils/calendar.ts\"}),`import { getISODay, getISOWeek, getISOWeeksInYear, getYear, parseISO } from 'date-fns';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData, ValuesPerDay } from '~/types';\n\n/** Creates a UTC date. */\nexport const createUtcDate = (year: number, month: number, day: number) =>\n  new Date(Date.UTC(year, month - 1, day, 0, 0, 0, 0));\n\n/**\n * Extracts the minimum and maximum years from the given \\`ValuesPerDay\\`\n * object.\n *\n * @param valuesPerDay - The \\`ValuesPerDay\\` object to extract the year\n * range from.\n * @returns An object containing the \\`minimumYear\\` and \\`maximumYear\\`.\n */\nexport const extractYearRange = (\n  valuesPerDay: ValuesPerDay\n): { minimumYear: number; maximumYear: number } => {\n  let minimumYear = Infinity;\n  let maximumYear = -Infinity;\n\n  for (const dateString of valuesPerDay.keys()) {\n    const year = getYear(parseISO(dateString));\n\n    minimumYear = Math.min(minimumYear, year);\n    maximumYear = Math.max(maximumYear, year);\n  }\n\n  return { minimumYear, maximumYear };\n};\n\n/**\n * Given a date, get its adjusted ISO week number based on the project\n * requirements:\n *\n * - If a date's month is January and its week number is greater than 50, it\n *   will be changed to week 0.\n * - If a date's month is December and its week number is less than 10, it\n *   will be changed to the number of ISO 8601 weeks in that year + 1.\n *\n * @param {Date} date - The date to get the adjusted ISO week number for.\n * @returns {number} - The adjusted ISO week number.\n */\nexport const getAdjustedISOWeek = (date: Date): number => {\n  const month = date.getMonth();\n  const isoWeek = getISOWeek(date);\n  const isoWeeksInYear = getISOWeeksInYear(date);\n\n  if (month === 0 && isoWeek > 50) {\n    return 0;\n  } else if (month === 11 && isoWeek < 10) {\n    return isoWeeksInYear + 1;\n  }\n\n  return isoWeek;\n};\n\n/**\n * Initializes an empty \\`CalendarYearData\\`.\n *\n * If there are no values for that specific day, it will be \\`0\\`. If that day is\n * not part of the calendar year, it will be \\`-1\\`.\n *\n * @param {number} year - The year to initialize the data for.\n * @returns {CalendarYearData} a \\`CalendarYearData\\` with default values.\n */\nexport const initializeEmptyCalendarYearData = (year: number): CalendarYearData => {\n  const firstDateOfYear = createUtcDate(year, 1, 1);\n  const lastDateOfYear = createUtcDate(year, 12, 31);\n  const firstWeekOfYearAdjusted = getAdjustedISOWeek(firstDateOfYear);\n  const lastWeekOfYearAdjusted = getAdjustedISOWeek(lastDateOfYear);\n  const firstDayOfYear = getISODay(firstDateOfYear) - 1;\n  const lastDayOfYear = getISODay(lastDateOfYear) - 1;\n\n  const yearData: CalendarYearData = [\n    ...(Array.from(\n      { length: 54 },\n      (_, weekIndex) =>\n        Array.from({ length: 7 }, (_, dayIndex) => {\n          if (\n            (weekIndex === firstWeekOfYearAdjusted && dayIndex < firstDayOfYear) ||\n            (weekIndex === lastWeekOfYearAdjusted && dayIndex > lastDayOfYear)\n          ) {\n            return -1;\n          } else if (weekIndex < firstWeekOfYearAdjusted || weekIndex > lastWeekOfYearAdjusted) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }) as CalendarWeekData\n    ) as CalendarYearData)\n  ];\n\n  return yearData;\n};\n\n/**\n * Converts a \\`ValuesPerDay\\` object to a \\`CalendarYearsData\\` object.\n *\n * @param valuesPerDay - The \\`ValuesPerDay\\` object to convert.\n * @returns The converted \\`CalendarYearsData\\` object.\n */\nexport const convertToCalendarYearData = (valuesPerDay: ValuesPerDay): CalendarYearsData => {\n  const { minimumYear, maximumYear } = extractYearRange(valuesPerDay);\n  const yearsData: CalendarYearsData = [];\n\n  for (let year = minimumYear; year <= maximumYear; year++) {\n    yearsData.push(initializeEmptyCalendarYearData(year));\n  }\n\n  for (const [dateString, value] of valuesPerDay) {\n    const date = parseISO(dateString);\n    const year = getYear(date);\n\n    const yearIndex = year - minimumYear;\n    const weekIndex = getAdjustedISOWeek(date);\n    const dayIndex = getISODay(date) - 1;\n\n    const yearData = yearsData[yearIndex];\n    if (!yearData) continue;\n\n    const weekData = yearData[weekIndex];\n    if (!weekData || weekData[dayIndex] === -1) continue;\n    weekData[dayIndex] = (weekData[dayIndex] ?? 0) + value;\n  }\n\n  return yearsData;\n};\n`)),mdx(\"p\",null,\"Remember to export the functions in the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/utils/index.ts\"),\" file:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-ts\",metastring:\"filename=src/utils/index.ts\",filename:\"src/utils/index.ts\"}),`// ...\nexport * from './calendar';\n`)),mdx(\"p\",null,\"Let's recap the purpose of each function:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"createUtcDate\"),\": This function generates a UTC date object using the given year, month, and day as input. It takes these values, creates a new Date object, and sets the time components to 0 (midnight). By using \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"Date.UTC\")),\", the date is represented in the UTC timezone.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"extractYearRange\"),\": Given a \",mdx(\"inlineCode\",{parentName:\"li\"},\"ValuesPerDay\"),\" object, this function iterates through the date strings and determines the minimum and maximum years. It initializes the minimum year to \",mdx(\"inlineCode\",{parentName:\"li\"},\"Infinity\"),\" and the maximum year to \",mdx(\"inlineCode\",{parentName:\"li\"},\"-Infinity\"),\". For each date string, the function parses the date, extracts the year, and updates the minimum and maximum years as needed.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"getAdjustedISOWeek\"),\": This function computes an adjusted ISO week number for a specific date based on the project requirements. First, it retrieves the month and ISO week number of the input date. Then, it checks if the date meets certain conditions (i.e., January with a week number greater than 50 or December with a week number less than 10). If the date satisfies any of these conditions, the adjusted week number is returned; otherwise, the original week number is returned.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"initializeEmptyCalendarYearData\"),\": This function initializes an empty \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\" object for a specified year. It calculates the first and last dates of the year, along with their adjusted ISO week numbers and ISO day numbers (subtracting 1 for a 0-based index). Then, it creates an array of 54 weeks (the maximum possible number of weeks in a year), where each week is an array of 7 days. Days that are part of the calendar year are filled with 0, while days that are not part of the calendar year are filled with -1, using the calculated week and day numbers.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"convertToCalendarYearData\"),\": This function transforms a \",mdx(\"inlineCode\",{parentName:\"li\"},\"ValuesPerDay\"),\" object into an array of \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\" values. First, it uses the \",mdx(\"inlineCode\",{parentName:\"li\"},\"extractYearRange\"),\" function to determine the minimum and maximum years from the input data. Then, for each year in the range, it initializes an empty \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearsData\"),\" object using the \",mdx(\"inlineCode\",{parentName:\"li\"},\"initializeEmptyCalendarYearData\"),\" function. Next, it iterates through the input data, parsing the date strings and calculating the year, week, and day indexes. Finally, it adds the value to the appropriate day in the corresponding \",mdx(\"inlineCode\",{parentName:\"li\"},\"CalendarYearData\"),\".\")),mdx(\"h2\",e({},{id:\"step-4-show-the-data-in-a-2d-grid\"}),\"Step 4: Show the data in a 2D Grid\"),mdx(\"p\",null,\"With the data converted, we can now create a 2D grid for each year to visualize it in a calendar-like format.\"),mdx(\"p\",null,\"First, create a new file named \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/FlatGrids.tsx\"),\" and insert the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/components/FlatGrids.tsx\",filename:\"src/components/FlatGrids.tsx\"}),`import type { FC } from 'react';\n\nimport type { CalendarWeekData, CalendarYearData, CalendarYearsData } from '~/types';\n\nconst DAYS = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n\nconst YearTable: FC<{\n  year: number;\n  data: CalendarYearData;\n}> = ({ year, data }) => {\n  return (\n    <table className=\"table-auto text-center\">\n      <caption className=\"text-xl\">{year}</caption>\n      <thead className=\"sticky top-0\">\n        <tr className=\"uppercase\">\n          <th></th>\n          {DAYS.map((week, index) => {\n            return (\n              <th key={\\`week-\\${index}\\`} className=\"min-w-[50px] border bg-gray-600 text-gray-200\">\n                {week}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((week, index) => {\n          return <WeekRow key={\\`week-\\${index}\\`} week={index} data={week} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nconst WeekRow: FC<{ week: number; data: CalendarWeekData }> = ({ week, data }) => {\n  return (\n    <tr>\n      <td className=\"px-3 py-1 text-sm\">{week.toString().padStart(2, '0')}</td>\n      {data.map((dayValue, index) => {\n        return (\n          <td\n            key={\\`day-\\${index}\\`}\n            className={\\`border px-2 py-1 \\${dayValue < 0 ? 'bg-gray-200' : 'bg-white'}\\`}\n          >\n            {dayValue >= 0 && dayValue.toLocaleString('en-US')}\n          </td>\n        );\n      })}\n    </tr>\n  );\n};\n\nconst FlatGrids: FC<{\n  data: CalendarYearsData;\n  startYear: number;\n}> = ({ data, startYear }) => {\n  return (\n    <div>\n      {data.map((yearData, index) => {\n        const year = startYear + index;\n        return <YearTable key={\\`year-\\${year}\\`} year={year} data={yearData} />;\n      })}\n    </div>\n  );\n};\n\nexport default FlatGrids;\n`)),mdx(\"p\",null,\"Now, incorporate the \",mdx(\"inlineCode\",{parentName:\"p\"},\"FlatGrids\"),\" component into the Home Page:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport FlatGrids from '~/components/FlatGrids';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum year in the dataset. */\n  maxYear: number;\n  /** The minimum value in the dataset. */\n  minValue: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxYear, minValue, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <ul>\n          <li>Minimum Year: {minYear}</li>\n          <li>Maximum Year: {maxYear}</li>\n          <li>Minimum Value: {minValue.toLocaleString('en-US')}</li>\n          <li>Maximum Value: {maxValue.toLocaleString('en-US')}</li>\n        </ul>\n        <FlatGrids data={data} startYear={minYear} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxYear, minValue, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxYear,\n      minValue,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"Once you save the changes, you'll be able to see the values in a 2D grid:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-04-show-year-array.png\",alt:\"Show Tables Per Year\"}))),mdx(\"p\",null,\"Our code will display a simple table for each year, with week numbers on the left, days of the week on the top, and word counts in the cells. Cells with unused slots (negative values) will have a gray background.\"),mdx(\"h2\",e({},{id:\"step-5-show-the-data-in-a-3d-grid\"}),\"Step 5: Show the Data in a 3D Grid\"),mdx(\"p\",null,\"Now, it's time to bring our visualization into the third dimension!\"),mdx(\"p\",null,\"First, create a custom hook at \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/hooks/useGridCalculations.ts\"),\" to calculate the grid parameters:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/hooks/useGridCalculations.ts\",filename:\"src/hooks/useGridCalculations.ts\"}),`import { useMemo } from 'react';\n\nimport type { CalendarYearsData } from '~/types';\n\n/** Creates a set of calculations for the grid. */\nexport const useGridCalculations = (\n  /** The data to be used for the calculations. */\n  data: CalendarYearsData,\n  /** The spacing between the grids. */\n  gridSpacing: number,\n  /** The length of each cell in the grid. */\n  cellSize: number,\n  /** The spacing between the cells. */\n  cellSpacing: number,\n  /** The scale of the cells. */\n  scale: number,\n  /** The maximum value of the data. */\n  maxValue: number\n) => {\n  return useMemo(() => {\n    /** Calculates the distance of a cell from the origin. */\n    const cellDistance = (items: number): number => {\n      // prettier-ignore\n      return (cellSize * items) + (cellSpacing * (items - 1));\n    };\n\n    /** Calculates the distance of grid from the origin. */\n    const gridDistance = (items: number): number => {\n      // prettier-ignore\n      return (gridWidth * items) + (gridSpacing * (items - 1));\n    };\n\n    /** Calculates the scaled height of the cells based on the maximum value. */\n    const calcCellHeight = (value: number) => {\n      return value >= 0 ? (value / maxValue) * scale : 0;\n    };\n\n    /** Calculates the adjusted starting position of a cell. */\n    const calcCellPosition = (index: number): number => {\n      // prettier-ignore\n      return ((cellSize + cellSpacing) * index) + (cellSize / 2);\n    };\n\n    /** Calculates the starting position of the grid. */\n    const calcGridPosition = (index: number): [number, number, number] => {\n      return [(cellDistance(7) + gridSpacing) * index, 0, 0];\n    };\n\n    const gridWidth = cellDistance(7);\n    const gridLength = cellDistance(54);\n    const totalWidth = gridDistance(data.length);\n    const totalLength = gridLength;\n\n    /** The center of the Canvas. */\n    const center: [number, number, number] = [totalWidth / 2, 0, totalLength / 2];\n\n    return { calcCellHeight, calcGridPosition, calcCellPosition, center };\n  }, [data, gridSpacing, cellSize, cellSpacing, maxValue, scale]);\n};\n`)),mdx(\"p\",null,\"Don't forget to export it from \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/hooks/index.ts\"),\":\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/hooks/index.ts\",filename:\"src/hooks/index.ts\"}),`export * from './useGridCalculations';\n`)),mdx(\"p\",null,\"After that, create a new file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/TitanicGrids.tsx\"),\" and add the following code:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:'filename=src/components/TitanicGrids.tsximport { type FC, useId } from \"react\";',filename:\"src/components/TitanicGrids.tsximport\",\"{\":!0,type:!0,\"FC,\":!0,useId:!0,\"}\":!0,from:!0,'\"react\";':!0}),`import { Canvas } from '@react-three/fiber';\nimport { Box, PerspectiveCamera, OrbitControls } from '@react-three/drei';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\nimport { useGridCalculations } from '~/hooks';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const id = useId();\n\n  // START: The temporary values for the grid.\n  /** The size of each cell in the grid. */\n  const cellSize = 1.0;\n  /** The spacing between each cell in the grid. */\n  const cellSpacing = 0.2;\n  /** The spacing between each grid in the scene. */\n  const gridSpacing = 1.4;\n  /** The color of the cells. */\n  const color = '#a0185a';\n  /** The color of the unused cells. */\n  const unusedColor = '#cccccc';\n  /** The scale of the cells. */\n  const scale = 20.0;\n  /** Whether the camera should rotate or not. */\n  const rotate = true;\n  /** The speed of the camera rotation. */\n  const speed = 1.0;\n  /** The position of the camera. */\n  const camera: [number, number, number] = [-50, 25, 29];\n  /** Temporary interface for the light values. */\n  interface LightValues {\n    /** The position of the light. */\n    position: [number, number, number];\n    /** The intensity of the light. */\n    intensity: number;\n    /** The color of the light. */\n    color: string;\n    /** Whether the light is enabled or not. */\n    enable: boolean;\n  }\n  /** The values for the first light. */\n  const light1: LightValues = {\n    position: [90, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  /** The values for the second light. */\n  const light2: LightValues = {\n    position: [-180, 0, 0],\n    intensity: 0.8,\n    color: '#ffffff',\n    enable: true\n  };\n  // END: The temporary values for the grid.\n\n  const { calcCellHeight, calcGridPosition, calcCellPosition, center } = useGridCalculations(\n    data,\n    gridSpacing,\n    cellSize,\n    cellSpacing,\n    scale,\n    maxValue\n  );\n\n  return (\n    <>\n      <Canvas>\n        <OrbitControls autoRotate={rotate} autoRotateSpeed={speed} target={center} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, yearIndex) => {\n          const forYear = startYear + yearIndex;\n          const gridPosition = calcGridPosition(yearIndex);\n          return (\n            <group key={\\`\\${id}-grid-\\${forYear}\\`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = calcCellHeight(value);\n                  const cellPosition: [number, number, number] = [\n                    calcCellPosition(dayIndex),\n                    cellHeight / 2,\n                    calcCellPosition(weekIndex)\n                  ];\n\n                  return (\n                    <Box\n                      key={\\`\\${id}-grid-\\${weekIndex}-\\${dayIndex}\\`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n`)),mdx(\"p\",null,\"This component is more complex than the previous one, so let's break it down.\"),mdx(\"p\",null,\"Here's a brief overview of the 3D components we imported:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"Canvas\"),\" component from \",mdx(\"inlineCode\",{parentName:\"li\"},\"@react-three/fiber\"),\" renders the 3D scene.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"PerspectiveCamera\"),\" simulates human perception by projecting the 3D scene onto a 2D plane, creating depth by making objects appear smaller as they recede into the distance.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"OrbitControls\"),\" helper enables interaction with the 3D scene using mouse or touch inputs, providing an intuitive way to navigate the 3D space through panning, zooming, and orbiting.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/?q=directionalLight#api/en/lights/hemisphereLight\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"hemisphereLight\")),\" and \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/?q=directionalLight#api/en/lights/DirectionalLight\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"directionalLight\")),\" add lighting to the scene.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),\" component is a convenient wrapper for rendering cuboid shapes.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://threejs.org/docs/#api/en/materials/MeshPhongMaterial\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"meshPhongMaterial\")),\" is a type of material suitable for 3D objects with shiny surfaces.\")),mdx(\"p\",null,\"Here's an explanation of the position and dimension calculations:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-05-3d-plane-calculation.png\",alt:\"3D Plane Calculation\"}))),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"calcCellHeight\"),\" function calculates \",mdx(\"inlineCode\",{parentName:\"li\"},\"Box\"),\" heights based on their value, the maximum value in the dataset, and the \",mdx(\"inlineCode\",{parentName:\"li\"},\"scale\"),\" factor. The final height is determined by dividing the cell value by the maximum value, and then multiplying by the \",mdx(\"inlineCode\",{parentName:\"li\"},\"scale\"),\" factor. This ensures that each cell's height is proportional to its value compared to the maximum value in the data set.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"calcCellPosition\"),\" calculates the distance of a cell from point \",mdx(\"inlineCode\",{parentName:\"li\"},\"[0, 0, 0]\"),\" of a grid. It takes in an index value and multiplies it by the sum of the \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSize\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"cellSpacing\"),\" values. This ensures that each cell is consistently spaced from the previous cell along the X- and Z-axes. We add half the cell size to the result to ensure that the cell starts at the correct position since objects are positioned from their center.\"),mdx(\"li\",{parentName:\"ul\"},\"The \",mdx(\"inlineCode\",{parentName:\"li\"},\"calcGridPosition\"),\" calculates the position of each year's grid in the 3D space. The X-coordinate is determined by multiplying the index of the year by the total width of the 7 columns of cells (including cell spacing), and then by the \",mdx(\"inlineCode\",{parentName:\"li\"},\"gridSpacing\"),\" value. This ensures that each year's grid is consistently spaced from the previous grid along the X-axis.\"),mdx(\"li\",{parentName:\"ul\"},\"We can then calculate for the \",mdx(\"inlineCode\",{parentName:\"li\"},\"center\"),\" of the Canvas by calculating the \",mdx(\"inlineCode\",{parentName:\"li\"},\"gridWidth\"),\" (7 cells for 7 days) and \",mdx(\"inlineCode\",{parentName:\"li\"},\"gridLength\"),\" (54 cells for 54 weeks) and then dividing each by 2. This gives us the center of the grid, which we can use to center the camera and the orbit controls.\")),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": For more information about the triplet of numbers used to represent a position in 3D space, see the Three.js documentation about \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://threejs.org/docs/#api/en/math/Vector3\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"Vector3\")),\".\")),mdx(\"p\",null,\"Now, update the index page to use the new component:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/pages/index.tsx\",filename:\"src/pages/index.tsx\"}),`import type { NextPage, GetServerSideProps } from 'next';\nimport Head from 'next/head';\n\nimport { parse as parseYaml } from 'yaml';\n\nimport { convertChaptersToMapping, convertToCalendarYearData } from '~/utils';\nimport type { Chapter, CalendarYearsData } from '~/types';\nimport TitanicGrids from '~/components/TitanicGrids';\n\nconst URL = \\`https://raw.githubusercontent.com/wandering-inndex/seed-data/main/data/media/twi-webnovel-chapters.yaml\\`;\n\ninterface HomeProps {\n  /** The list of word counts per calendar year. */\n  data: CalendarYearsData;\n  /** The minimum year in the dataset. */\n  minYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\nconst Home: NextPage<HomeProps> = ({ data, minYear, maxValue }) => {\n  return (\n    <>\n      <Head>\n        <title>Titan</title>\n        <meta name=\"description\" content=\"Visualize contribution charts in 3D\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <main className=\"h-screen w-screen p-1\">\n        <nav className=\"absolute left-1/2 z-10 mx-auto my-4 -translate-x-1/2 text-center text-4xl font-bold\">\n          Titan\n        </nav>\n        <TitanicGrids data={data} startYear={minYear} maxValue={maxValue} />\n      </main>\n    </>\n  );\n};\n\nexport const getServerSideProps: GetServerSideProps<HomeProps> = async () => {\n  const res = await fetch(URL);\n  const text = await res.text();\n  const chapters: Chapter[] = parseYaml(text) as Chapter[];\n\n  const { mapping, minYear, maxValue } = convertChaptersToMapping(chapters);\n  const data = convertToCalendarYearData(mapping);\n\n  return {\n    props: {\n      data,\n      minYear,\n      maxValue\n    }\n  };\n};\n\nexport default Home;\n`)),mdx(\"p\",null,\"Running the app now should display something like this:\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-05-add-3d-chart.png\",alt:\"Add 3D Chart\"}))),mdx(\"p\",null,\"You can move the camera around by clicking and dragging the left mouse button or using touch inputs. Zoom in and out by scrolling the mouse wheel or pinching the screen. Pan the camera using the right mouse button or a two-finger drag.\"),mdx(\"h2\",e({},{id:\"step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Step 6: Adding a helper GUI to customize the chart\"),mdx(\"p\",null,\"We're nearly finished! To make our chart easier to customize, let's add one more library.\"),mdx(\"p\",null,\"Open the \",mdx(\"inlineCode\",{parentName:\"p\"},\"src/components/TitanicGrids.tsx\"),\" file and update it with the following:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-tsx\",metastring:\"filename=src/components/TitanicGrids.tsx\",filename:\"src/components/TitanicGrids.tsx\"}),`import { type FC, useId } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { Box, PerspectiveCamera, OrbitControls } from '@react-three/drei';\nimport { useControls, Leva } from 'leva';\n\nimport type { CalendarYearsData, CalendarWeekData } from '~/types';\nimport { useGridCalculations } from '~/hooks';\n\ninterface TitanicGridsProps {\n  /** The list of number values per calendar year. */\n  data: CalendarYearsData;\n  /** The first year in the dataset. */\n  startYear: number;\n  /** The maximum value in the dataset. */\n  maxValue: number;\n}\n\n/** Shows a grid of 3D bar charts to represent the number values per year. */\nconst TitanicGrids: FC<TitanicGridsProps> = ({ data, startYear, maxValue }) => {\n  const id = useId();\n\n  const { cellSize, cellSpacing, gridSpacing, color, unusedColor, scale } = useControls('Cells', {\n    /** The length of each cell in the grid. */\n    cellSize: {\n      value: 1.0,\n      step: 0.05,\n      min: 1.0\n    },\n    /** The spacing between each cell in the grid. */\n    cellSpacing: {\n      value: 0.2,\n      step: 0.05,\n      min: 0.1\n    },\n    /** The scale of the cells. */\n    scale: {\n      value: 20.0,\n      step: 1.0,\n      min: 0.0\n    },\n    /** The spacing between each grid in the scene. */\n    gridSpacing: {\n      value: 1.4,\n      step: 0.05,\n      min: 0.1\n    },\n    /** The color of the regular cells. */\n    color: '#a0185a',\n    /** The color of the unused cells. */\n    unusedColor: '#cccccc'\n  });\n\n  const { rotate, speed, camera } = useControls('Controls', {\n    /** The position of the camera. */\n    camera: [-50, 25, 29],\n    /** Whether the camera should rotate or not. */\n    rotate: true,\n    /** The speed of the camera rotation. */\n    speed: {\n      value: 1.0,\n      step: 0.1,\n      min: 0.0\n    }\n  });\n\n  const light1 = useControls('Light 1', {\n    /** The position of the light. */\n    position: {\n      value: [90, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const light2 = useControls('Light 2', {\n    /** The position of the light. */\n    position: {\n      value: [-180, 0, 0],\n      step: 10\n    },\n    /** The intensity of the light. */\n    intensity: {\n      value: 0.8,\n      step: 1.0\n    },\n    /** The color of the light. */\n    color: '#ffffff',\n    /** Whether the light is enabled or not. */\n    enable: true\n  });\n\n  const { calcCellHeight, calcGridPosition, calcCellPosition, center } = useGridCalculations(\n    data,\n    gridSpacing,\n    cellSize,\n    cellSpacing,\n    scale,\n    maxValue\n  );\n\n  return (\n    <>\n      <Leva collapsed={false} />\n      <Canvas>\n        <OrbitControls autoRotate={rotate} autoRotateSpeed={speed} target={center} />\n        <PerspectiveCamera makeDefault position={camera} />\n\n        <hemisphereLight />\n        {light1.enable && (\n          <directionalLight\n            position={light1.position}\n            intensity={light1.intensity}\n            color={light1.color}\n          />\n        )}\n        {light2.enable && (\n          <directionalLight\n            position={light2.position}\n            intensity={light2.intensity}\n            color={light2.color}\n          />\n        )}\n\n        {data.map((yearData, yearIndex) => {\n          const forYear = startYear + yearIndex;\n          const gridPosition = calcGridPosition(yearIndex);\n          return (\n            <group key={\\`\\${id}-grid-\\${forYear}\\`} position={gridPosition}>\n              {yearData.map((week: CalendarWeekData, weekIndex: number) => {\n                return week.map((value: number, dayIndex: number) => {\n                  const cellHeight = calcCellHeight(value);\n                  const cellPosition: [number, number, number] = [\n                    calcCellPosition(dayIndex),\n                    cellHeight / 2,\n                    calcCellPosition(weekIndex)\n                  ];\n\n                  return (\n                    <Box\n                      key={\\`\\${id}-grid-\\${weekIndex}-\\${dayIndex}\\`}\n                      args={[cellSize, cellHeight, cellSize]}\n                      position={cellPosition}\n                    >\n                      <meshPhongMaterial color={value < 0 ? unusedColor : color} />\n                    </Box>\n                  );\n                });\n              })}\n            </group>\n          );\n        })}\n      </Canvas>\n    </>\n  );\n};\n\nexport default TitanicGrids;\n`)),mdx(\"p\",null,\"We're using the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pmndrs/leva\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"leva\"),\" library\"),\" to add a helper panel on the right side of the screen. This floating panel enables real-time modification of the grid's appearance.\"),mdx(\"p\",null,mdx(\"img\",e({parentName:\"p\"},{src:\"/img/posts/3d-bar-charts/step-06-customize-3d-chart.png\",alt:\"Customize 3D Chart\"}))),mdx(\"p\",null,\"We can change the size of the cells, the spacing between them, the color of the cells, and more. We can also enable/disable the camera rotation and change its speed. We can also enable/disable the two lights in the scene and change their position, intensity, and color. The panel also shows the current values of the controls. This is very useful for debugging and tweaking the grid's appearance.\"),mdx(\"h2\",e({},{id:\"conclusion\"}),\"Conclusion\"),mdx(\"p\",null,\"Give yourself a pat on the back! We have successfully created a 3D grid visualization for time-series data using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pmndrs/react-three-fiber\"}),\"React Three Fiber\"),\". You can find the live version at \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://titan.inndex.omg.lol/\"}),\"The Wandering Inndex\"),\" and the full source code on the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/wandering-inndex/titan\"}),\"wandering-inndex/titan\"),\" repository.\"),mdx(\"p\",null,\"Let's review the steps we took:\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-1-project-setup\"}),\"Project Setup\"),\": We initialized a new React project using \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://create.t3.gg/\"}),\"Create T3 App\"),\" and installed the required dependencies.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-2-preparing-our-data\"}),\"Preparing our Data\"),\": We retrieved the raw dataset and transformed it into a suitable format for analysis.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-3-creating-the-time-series-data\"}),\"Creating the Time-series Data\"),\": We further transformed the data, organizing it by year and week. We also learned about the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://en.wikipedia.org/wiki/ISO_8601\"}),\"ISO 8601\"),\" standard and adapted it to our needs.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-4-show-the-data-in-a-2d-grid\"}),\"Show the data in a 2D Grid\"),\": We began visualizing the data in a simple 2D grid format to understand the data structure and prepare for the next step.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-5-show-the-data-in-a-3d-grid\"}),\"Show the Data in a 3D Grid\"),\": We built upon the 2D grid to create a 3D grid representing data points, providing a more visually appealing representation of the time-series data.\"),mdx(\"li\",{parentName:\"ol\"},mdx(\"a\",e({parentName:\"li\"},{href:\"#step-6-adding-a-helper-gui-to-customize-the-chart\"}),\"Adding a helper GUI to customize the chart\"),\": We added a helper interface that allows real-time customization of the grid elements' appearance and behavior.\")),mdx(\"p\",null,\"This tutorial serves as a starting point for what you can achieve with React Three Fiber. Potential enhancements could include:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"Adding tooltips and labels to show more information about each bar when hovering.\"),mdx(\"li\",{parentName:\"ul\"},\"Adding animations to the bars like a growing animation when the data is first loaded.\"),mdx(\"li\",{parentName:\"ul\"},\"Adding filters to enable users to modify the displayed data in real-time.\")),mdx(\"p\",null,\"I encourage you to experiment with the code and build upon it to create your own unique 3D grid visualizations.\"),mdx(\"p\",null,\"Happy coding!\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Copy Issue Labels From Another GitHub Repository","layout":"posts","slug":"copy-issue-labels-from-another-github-repository","draft":false,"frontMatter":{"title":"Copy Issue Labels From Another GitHub Repository","publishedDate":"2023-03-29T18:31:00Z","tags":["GitHub"],"description":"","disableComments":false},"rawContent":"\nIf you manage multiple projects across different GitHub Organizations, you may have faced a common scenario: the need to copy [GitHub issue labels](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels) from one repository to another. It used to be a manual process before, but luckily we can now use [GitHub's official CLI](https://cli.github.com/).\n\n## Why copy issue labels?\n\nHere are some common scenarios when you might need to copy issue labels between projects:\n\n- **Standardization**: If your Organization requires a standard list of issue labels for all projects, copying issue labels from an existing project with the required labels ensures consistency.\n- **Project Migration**: When a project is moved from one Organization to another, you might want to retain the issue labels to maintain the same workflow and issue categorization.\n- **Team Collaboration**: If multiple teams within an Organization work on similar projects, having a unified set of issue labels for better collaboration and understanding across teams is helpful.\n\n## Using the GitHub CLI\n\nBefore we dive into the process, make sure you have the GitHub CLI installed on your system. If you haven't installed it yet, head to https://cli.github.com/ and follow the installation instructions for your operating system.\n\nYou can authenticate with the CLI using:\n\n```bash\ngh auth login\n```\n\nOnce you have the GitHub CLI installed and configured, you can copy issue labels between repositories by executing the following command:\n\n```bash\ngh label clone owner-name/source-repo-name --repo owner-name/destination-repo-name --force\n```\n\nHere's a breakdown of the command:\n\n- `gh`: The GitHub CLI command.\n- `label`: The command group for working with issue labels.\n- `clone`: The command to copy labels from one repository to another.\n- `owner-name/source-repo-name`: The source repository from which you want to copy the issue labels.\n- `--repo`: The flag to specify the destination repository to which the issue labels will be copied.\n- `owner-name/destination-repo-name`: The destination repository to which the issue labels will be copied.\n- `--force`: Optional flag to overwrite existing labels in the destination repository.\n\nDocumentation for the command can be found at https://cli.github.com/manual/gh_label_clone.\n\n> **NOTE**: Please note that you must have the necessary permissions (write access) for the destination repositories.\n\nOnce the command executes successfully, all issue labels from `owner-name/source-repo-name` will be copied to `owner-name/destination-repo-name`, ensuring that the latter now follows the Organization's standard list of issue labels.\n\n## Creating default labels for your Organization\n\nAs an Organization owner, you can also create default labels that will be automatically included in every new repository in your Organization. This is a convenient way to standardize issue labels across all projects within your Organization.\n\nPlease refer to the GitHub documentation on [Managing Default Labels for Repositories in Your Organization](https://docs.github.com/en/organizations/managing-organization-settings/managing-default-labels-for-repositories-in-your-organization) for detailed instructions and screenshots.\n\n> **NOTE**: Adding, editing, or deleting a default label does not affect existing repositories. Default labels only apply to new repositories created after the changes.\n","excerpt":"\nIf you manage multiple projects across different GitHub Organizations, you may have faced a common scenario: the need to copy [GitHub issue labels](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels) from one repository to another. It used to be a manual pro...","serializedContent":{"compiledSource":"var c=Object.defineProperty,m=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var r=(e,a,o)=>a in e?c(e,a,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[a]=o,n=(e,a)=>{for(var o in a||(a={}))l.call(a,o)&&r(e,o,a[o]);if(i)for(var o of i(a))s.call(a,o)&&r(e,o,a[o]);return e},p=(e,a)=>m(e,h(a));var u=(e,a)=>{var o={};for(var t in e)l.call(e,t)&&a.indexOf(t)<0&&(o[t]=e[t]);if(e!=null&&i)for(var t of i(e))a.indexOf(t)<0&&s.call(e,t)&&(o[t]=e[t]);return o};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(o){var t=o,{components:e}=t,a=u(t,[\"components\"]);return mdx(MDXLayout,p(n(n({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"If you manage multiple projects across different GitHub Organizations, you may have faced a common scenario: the need to copy \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/managing-labels\"}),\"GitHub issue labels\"),\" from one repository to another. It used to be a manual process before, but luckily we can now use \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://cli.github.com/\"}),\"GitHub's official CLI\"),\".\"),mdx(\"h2\",n({},{id:\"why-copy-issue-labels\"}),\"Why copy issue labels?\"),mdx(\"p\",null,\"Here are some common scenarios when you might need to copy issue labels between projects:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Standardization\"),\": If your Organization requires a standard list of issue labels for all projects, copying issue labels from an existing project with the required labels ensures consistency.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Project Migration\"),\": When a project is moved from one Organization to another, you might want to retain the issue labels to maintain the same workflow and issue categorization.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"strong\",{parentName:\"li\"},\"Team Collaboration\"),\": If multiple teams within an Organization work on similar projects, having a unified set of issue labels for better collaboration and understanding across teams is helpful.\")),mdx(\"h2\",n({},{id:\"using-the-github-cli\"}),\"Using the GitHub CLI\"),mdx(\"p\",null,\"Before we dive into the process, make sure you have the GitHub CLI installed on your system. If you haven't installed it yet, head to \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://cli.github.com/\"}),\"https://cli.github.com/\"),\" and follow the installation instructions for your operating system.\"),mdx(\"p\",null,\"You can authenticate with the CLI using:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`gh auth login\n`)),mdx(\"p\",null,\"Once you have the GitHub CLI installed and configured, you can copy issue labels between repositories by executing the following command:\"),mdx(\"pre\",null,mdx(\"code\",n({parentName:\"pre\"},{className:\"language-bash\"}),`gh label clone owner-name/source-repo-name --repo owner-name/destination-repo-name --force\n`)),mdx(\"p\",null,\"Here's a breakdown of the command:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"gh\"),\": The GitHub CLI command.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"label\"),\": The command group for working with issue labels.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"clone\"),\": The command to copy labels from one repository to another.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"owner-name/source-repo-name\"),\": The source repository from which you want to copy the issue labels.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"--repo\"),\": The flag to specify the destination repository to which the issue labels will be copied.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"owner-name/destination-repo-name\"),\": The destination repository to which the issue labels will be copied.\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"--force\"),\": Optional flag to overwrite existing labels in the destination repository.\")),mdx(\"p\",null,\"Documentation for the command can be found at \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://cli.github.com/manual/gh_label_clone\"}),\"https://cli.github.com/manual/gh_label_clone\"),\".\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Please note that you must have the necessary permissions (write access) for the destination repositories.\")),mdx(\"p\",null,\"Once the command executes successfully, all issue labels from \",mdx(\"inlineCode\",{parentName:\"p\"},\"owner-name/source-repo-name\"),\" will be copied to \",mdx(\"inlineCode\",{parentName:\"p\"},\"owner-name/destination-repo-name\"),\", ensuring that the latter now follows the Organization's standard list of issue labels.\"),mdx(\"h2\",n({},{id:\"creating-default-labels-for-your-organization\"}),\"Creating default labels for your Organization\"),mdx(\"p\",null,\"As an Organization owner, you can also create default labels that will be automatically included in every new repository in your Organization. This is a convenient way to standardize issue labels across all projects within your Organization.\"),mdx(\"p\",null,\"Please refer to the GitHub documentation on \",mdx(\"a\",n({parentName:\"p\"},{href:\"https://docs.github.com/en/organizations/managing-organization-settings/managing-default-labels-for-repositories-in-your-organization\"}),\"Managing Default Labels for Repositories in Your Organization\"),\" for detailed instructions and screenshots.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": Adding, editing, or deleting a default label does not affect existing repositories. Default labels only apply to new repositories created after the changes.\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Deploying a Repository Inside a GitHub Organization to Vercel Using GitHub Actions","layout":"posts","slug":"deploying-a-repository-inside-a-github-organization-to-vercel-using-github-actions","draft":false,"frontMatter":{"title":"Deploying a Repository Inside a GitHub Organization to Vercel Using GitHub Actions","publishedDate":"2023-03-28T20:11:00Z","tags":["GitHub","GitHub Actions","Vercel"],"description":"","disableComments":false},"rawContent":"\n[Vercel](https://vercel.com/) is a popular cloud service platform designed for hosting [Next.js](https://nextjs.org/) applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\n\nIn this blog post, we'll create a GitHub Action that duplicates the content of a repository inside a GitHub Organization to a repository in your personal GitHub account, allowing you to leverage Vercel's free hosting services.\n\n> **NOTE**: This approach may not be suitable for all scenarios, and ensuring proper security measures when dealing with sensitive data is essential.\n\n## Prerequisites\n\n- A personal GitHub account\n- A repository within a GitHub Organization (source repository)\n- A separate repository in your personal account to host the copied files (destination repository)\n\n## Step 1: Generate SSH Keys\n\nYou'll need to generate an SSH Deploy Key to securely push your content from the organization's repository to the external repository. Although you can also use a Personal Access Token, an SSH deploy key is recommended as it minimizes the impact of potential security breaches.\n\n```bash\nssh-keygen -t ed25519 -C \"$(git config user.email)\" -N \"\" -f github-<desitination-repo-name>\n```\n\nReplace the `<desitination-repo-name>` with the name of your destination repository and run the command. Afterwards, you should now have both public and private key files:\n\n- `github-<desitination-repo-name>.pub` (public)\n- `github-<desitination-repo-name>` (private)\n\n## Step 2: Add the private key to the Source Repository\n\n1. Visit the source repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. In the left-hand pane, click \"Secrets\", then \"Actions\".\n4. Click on \"New repository secret\".\n5. Name it `SSH_DEPLOY_KEY` and paste the contents of the private key file.\n6. Click \"Save\".\n\n## Step 3: Add the public key to the Destination Repository\n\n1. Visit the destination repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. In the left-hand side pane, click on \"Deploy keys.\"\n4. Click on \"Add deploy key\".\n5. Paste the contents of the public key file.\n6. Enable \"Allow write access\".\n7. Click \"Save\".\n\n## Step 4: Disable GitHub Actions on the Destination Repository\n\n1. Visit the destination repository's GitHub page.\n2. Click on \"Settings\" in the repository (not account settings).\n3. Click on \"Actions\" and then \"General\".\n4. Select \"Disable actions\".\n5. Click \"Save\".\n\n## Step 5: Create a GitHub Action Workflow\n\nCreate a new GitHub Action workflow in your source repository by adding a YAML file in the `.github/workflows` directory. Name the file `push-to-external-repo.yml` and paste the following content:\n\n```yaml filename=.github/workflows/push-to-external-repo.yml\nname: (main) push to external repo\non:\n  push:\n    branches:\n      - main\njobs:\n  push-to-external-repo:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repository\n        uses: actions/checkout@v3\n      - name: push to external repository\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.SSH_DEPLOY_KEY }}\n          publish_dir: .\n          external_repository: <your-username>/<destination-repo-name>\n          publish_branch: main\n          allow_empty_commit: true\n```\n\nReplace `<your-username>` with your GitHub username and `<destination-repo-name>` with the name of the external repository in your personal account.\nThis action will copy everything from your organization's repository to your personal repository, including your GitHub Action workflows, so follow [Step 4](#step-4-disable-github-actions-on-the-destination-repository) to disable GitHub Actions on the destination repository.\n\n## Step 6: Run your workflow\n\nPush something to your `main` branch and see it be pushed to your `<your-username>/<destination-repo-name>` repository.\n\n## Step 7: Set up a project on Vercel\n\n1. On Vercel's \"New Project\" page, choose the account linked to the project under the \"Import Git Repository\" section.\n2. Find your personal repository in the list and select \"Import\".\n3. Vercel will automatically detect the framework and any necessary build settings. You can configure project settings, including build and development settings and environment variables, at this stage or later.\n4. Click the \"Deploy\" button. Vercel will create the project and deploy it based on the chosen configurations.\n","excerpt":"\n[Vercel](https://vercel.com/) is a popular cloud service platform designed for hosting [Next.js](https://nextjs.org/) applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\n...","serializedContent":{"compiledSource":"var c=Object.defineProperty,h=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var a=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;var s=(e,t,i)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,o=(e,t)=>{for(var i in t||(t={}))r.call(t,i)&&s(e,i,t[i]);if(a)for(var i of a(t))l.call(t,i)&&s(e,i,t[i]);return e},p=(e,t)=>h(e,d(t));var u=(e,t)=>{var i={};for(var n in e)r.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(e!=null&&a)for(var n of a(e))t.indexOf(n)<0&&l.call(e,n)&&(i[n]=e[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:e}=n,t=u(n,[\"components\"]);return mdx(MDXLayout,p(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",o({parentName:\"p\"},{href:\"https://vercel.com/\"}),\"Vercel\"),\" is a popular cloud service platform designed for hosting \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://nextjs.org/\"}),\"Next.js\"),\" applications. While it offers free hosting for personal repositories, it doesn't allow deploying from repositories inside a GitHub Organization unless you subscribe to a paid plan.\"),mdx(\"p\",null,\"In this blog post, we'll create a GitHub Action that duplicates the content of a repository inside a GitHub Organization to a repository in your personal GitHub account, allowing you to leverage Vercel's free hosting services.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": This approach may not be suitable for all scenarios, and ensuring proper security measures when dealing with sensitive data is essential.\")),mdx(\"h2\",o({},{id:\"prerequisites\"}),\"Prerequisites\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"A personal GitHub account\"),mdx(\"li\",{parentName:\"ul\"},\"A repository within a GitHub Organization (source repository)\"),mdx(\"li\",{parentName:\"ul\"},\"A separate repository in your personal account to host the copied files (destination repository)\")),mdx(\"h2\",o({},{id:\"step-1-generate-ssh-keys\"}),\"Step 1: Generate SSH Keys\"),mdx(\"p\",null,\"You'll need to generate an SSH Deploy Key to securely push your content from the organization's repository to the external repository. Although you can also use a Personal Access Token, an SSH deploy key is recommended as it minimizes the impact of potential security breaches.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`ssh-keygen -t ed25519 -C \"$(git config user.email)\" -N \"\" -f github-<desitination-repo-name>\n`)),mdx(\"p\",null,\"Replace the \",mdx(\"inlineCode\",{parentName:\"p\"},\"<desitination-repo-name>\"),\" with the name of your destination repository and run the command. Afterwards, you should now have both public and private key files:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"github-<desitination-repo-name>.pub\"),\" (public)\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"inlineCode\",{parentName:\"li\"},\"github-<desitination-repo-name>\"),\" (private)\")),mdx(\"h2\",o({},{id:\"step-2-add-the-private-key-to-the-source-repository\"}),\"Step 2: Add the private key to the Source Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the source repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'In the left-hand pane, click \"Secrets\", then \"Actions\".'),mdx(\"li\",{parentName:\"ol\"},'Click on \"New repository secret\".'),mdx(\"li\",{parentName:\"ol\"},\"Name it \",mdx(\"inlineCode\",{parentName:\"li\"},\"SSH_DEPLOY_KEY\"),\" and paste the contents of the private key file.\"),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-3-add-the-public-key-to-the-destination-repository\"}),\"Step 3: Add the public key to the Destination Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the destination repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'In the left-hand side pane, click on \"Deploy keys.\"'),mdx(\"li\",{parentName:\"ol\"},'Click on \"Add deploy key\".'),mdx(\"li\",{parentName:\"ol\"},\"Paste the contents of the public key file.\"),mdx(\"li\",{parentName:\"ol\"},'Enable \"Allow write access\".'),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-4-disable-github-actions-on-the-destination-repository\"}),\"Step 4: Disable GitHub Actions on the Destination Repository\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},\"Visit the destination repository's GitHub page.\"),mdx(\"li\",{parentName:\"ol\"},'Click on \"Settings\" in the repository (not account settings).'),mdx(\"li\",{parentName:\"ol\"},'Click on \"Actions\" and then \"General\".'),mdx(\"li\",{parentName:\"ol\"},'Select \"Disable actions\".'),mdx(\"li\",{parentName:\"ol\"},'Click \"Save\".')),mdx(\"h2\",o({},{id:\"step-5-create-a-github-action-workflow\"}),\"Step 5: Create a GitHub Action Workflow\"),mdx(\"p\",null,\"Create a new GitHub Action workflow in your source repository by adding a YAML file in the \",mdx(\"inlineCode\",{parentName:\"p\"},\".github/workflows\"),\" directory. Name the file \",mdx(\"inlineCode\",{parentName:\"p\"},\"push-to-external-repo.yml\"),\" and paste the following content:\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.github/workflows/push-to-external-repo.yml\",filename:\".github/workflows/push-to-external-repo.yml\"}),`name: (main) push to external repo\non:\n  push:\n    branches:\n      - main\njobs:\n  push-to-external-repo:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout repository\n        uses: actions/checkout@v3\n      - name: push to external repository\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: \\${{ secrets.SSH_DEPLOY_KEY }}\n          publish_dir: .\n          external_repository: <your-username>/<destination-repo-name>\n          publish_branch: main\n          allow_empty_commit: true\n`)),mdx(\"p\",null,\"Replace \",mdx(\"inlineCode\",{parentName:\"p\"},\"<your-username>\"),\" with your GitHub username and \",mdx(\"inlineCode\",{parentName:\"p\"},\"<destination-repo-name>\"),` with the name of the external repository in your personal account.\nThis action will copy everything from your organization's repository to your personal repository, including your GitHub Action workflows, so follow `,mdx(\"a\",o({parentName:\"p\"},{href:\"#step-4-disable-github-actions-on-the-destination-repository\"}),\"Step 4\"),\" to disable GitHub Actions on the destination repository.\"),mdx(\"h2\",o({},{id:\"step-6-run-your-workflow\"}),\"Step 6: Run your workflow\"),mdx(\"p\",null,\"Push something to your \",mdx(\"inlineCode\",{parentName:\"p\"},\"main\"),\" branch and see it be pushed to your \",mdx(\"inlineCode\",{parentName:\"p\"},\"<your-username>/<destination-repo-name>\"),\" repository.\"),mdx(\"h2\",o({},{id:\"step-7-set-up-a-project-on-vercel\"}),\"Step 7: Set up a project on Vercel\"),mdx(\"ol\",null,mdx(\"li\",{parentName:\"ol\"},`On Vercel's \"New Project\" page, choose the account linked to the project under the \"Import Git Repository\" section.`),mdx(\"li\",{parentName:\"ol\"},'Find your personal repository in the list and select \"Import\".'),mdx(\"li\",{parentName:\"ol\"},\"Vercel will automatically detect the framework and any necessary build settings. You can configure project settings, including build and development settings and environment variables, at this stage or later.\"),mdx(\"li\",{parentName:\"ol\"},'Click the \"Deploy\" button. Vercel will create the project and deploy it based on the chosen configurations.')))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Gazi Fanart Using Figma","layout":"posts","slug":"gazi-fanart-using-figma","draft":false,"frontMatter":{"title":"Gazi Fanart Using Figma","publishedDate":"2022-11-23T17:16:48Z","tags":["Art","Fanart","The Wandering Inn","Vector"],"description":"","disableComments":false},"rawContent":"\n![Gazi Pathseeker](/img/posts/vector-art/gazi.svg)\n\nFeaturing [Gazi Pathseeker](https://thewanderinginn.fandom.com/wiki/Gazi_Pathseeker) from [The Wandering Inn](https://wanderinginn.com/).\n\nMade in [Figma](https://figma.com/). See interactive version at [The Wandering Inndex](https://inndex.omg.lol/gazi).\n","excerpt":"\n![Gazi Pathseeker](/img/posts/vector-art/gazi.svg)\n\nFeaturing [Gazi Pathseeker](https://thewanderinginn.fandom.com/wiki/Gazi_Pathseeker) from [The Wandering Inn](https://wanderinginn.com/).\n\nMade in [Figma](https://figma.com/). See interactive version at [The Wandering Inndex](https://inndex.omg.lo...","serializedContent":{"compiledSource":"var h=Object.defineProperty,c=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var m=(e,a,n)=>a in e?h(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,r=(e,a)=>{for(var n in a||(a={}))i.call(a,n)&&m(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&m(e,n,a[n]);return e},s=(e,a)=>c(e,d(a));var g=(e,a)=>{var n={};for(var t in e)i.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(e!=null&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:e}=t,a=g(t,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"img\",r({parentName:\"p\"},{src:\"/img/posts/vector-art/gazi.svg\",alt:\"Gazi Pathseeker\"}))),mdx(\"p\",null,\"Featuring \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://thewanderinginn.fandom.com/wiki/Gazi_Pathseeker\"}),\"Gazi Pathseeker\"),\" from \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\".\"),mdx(\"p\",null,\"Made in \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://figma.com/\"}),\"Figma\"),\". See interactive version at \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://inndex.omg.lol/gazi\"}),\"The Wandering Inndex\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Modified AI-generated Art of Rags","layout":"posts","slug":"modified-ai-generated-art-of-rags","draft":false,"frontMatter":{"title":"Modified AI-generated Art of Rags","publishedDate":"2022-11-05T15:46:18Z","tags":["Art","Fanart","Stable Diffusion","The Wandering Inn"],"description":"","disableComments":false},"rawContent":"\nFanart of [Rags](https://thewanderinginn.fandom.com/wiki/Rags) from [The Wandering Inn](https://wanderinginn.com/).\n\nOriginally created using [Stable Diffusion](https://stability.ai/), and then edited on [Krita](https://krita.org/en/) and [Rebelle 5 Pro](https://www.escapemotions.com/products/rebelle/about).\n\n## Original Image by Stable Diffusion (txt2img)\n\n![Rags (Original)](/img/posts/ai-art/rags-original.png)\n\nIn case anyone wants to recreate it, the original prompt was `little goblin child drawing (sketch) (crosshatching), fantasy western ((cute)) beautiful puppy eyes crying`.\n\n## Modified Image\n\n![Rags (Uncolored)](/img/posts/ai-art/rags-without-color.jpg)\n![Rags (Colored)](/img/posts/ai-art/rags-with-color.jpg)\n","excerpt":"\nFanart of [Rags](https://thewanderinginn.fandom.com/wiki/Rags) from [The Wandering Inn](https://wanderinginn.com/).\n\nOriginally created using [Stable Diffusion](https://stability.ai/), and then edited on [Krita](https://krita.org/en/) and [Rebelle 5 Pro](https://www.escapemotions.com/products/rebel...","serializedContent":{"compiledSource":"var l=Object.defineProperty,c=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var s=(a,e,t)=>e in a?l(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,i=(a,e)=>{for(var t in e||(e={}))o.call(e,t)&&s(a,t,e[t]);if(r)for(var t of r(e))p.call(e,t)&&s(a,t,e[t]);return a},g=(a,e)=>c(a,d(e));var m=(a,e)=>{var t={};for(var n in a)o.call(a,n)&&e.indexOf(n)<0&&(t[n]=a[n]);if(a!=null&&r)for(var n of r(a))e.indexOf(n)<0&&p.call(a,n)&&(t[n]=a[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:a}=n,e=m(n,[\"components\"]);return mdx(MDXLayout,g(i(i({},layoutProps),e),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Fanart of \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://thewanderinginn.fandom.com/wiki/Rags\"}),\"Rags\"),\" from \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\".\"),mdx(\"p\",null,\"Originally created using \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://stability.ai/\"}),\"Stable Diffusion\"),\", and then edited on \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://krita.org/en/\"}),\"Krita\"),\" and \",mdx(\"a\",i({parentName:\"p\"},{href:\"https://www.escapemotions.com/products/rebelle/about\"}),\"Rebelle 5 Pro\"),\".\"),mdx(\"h2\",i({},{id:\"original-image-by-stable-diffusion-txt2img\"}),\"Original Image by Stable Diffusion (txt2img)\"),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"/img/posts/ai-art/rags-original.png\",alt:\"Rags (Original)\"}))),mdx(\"p\",null,\"In case anyone wants to recreate it, the original prompt was \",mdx(\"inlineCode\",{parentName:\"p\"},\"little goblin child drawing (sketch) (crosshatching), fantasy western ((cute)) beautiful puppy eyes crying\"),\".\"),mdx(\"h2\",i({},{id:\"modified-image\"}),\"Modified Image\"),mdx(\"p\",null,mdx(\"img\",i({parentName:\"p\"},{src:\"/img/posts/ai-art/rags-without-color.jpg\",alt:\"Rags (Uncolored)\"})),`\n`,mdx(\"img\",i({parentName:\"p\"},{src:\"/img/posts/ai-art/rags-with-color.jpg\",alt:\"Rags (Colored)\"}))))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Inntober 2021 #06: \"Spirit\" - A Bartender Running Low On Spirits","layout":"posts","slug":"inntober-2021-06-spirit","draft":false,"frontMatter":{"title":"Inntober 2021 #06: \"Spirit\" - A Bartender Running Low On Spirits","publishedDate":"2021-10-08T02:30:25Z","tags":["Art","Inntober","Inktober","Fanart","The Wandering Inn"],"description":"","disableComments":false},"rawContent":"\n2021 was a busy year for me and this is the only thing I finished for [Inktober](https://inktober.com/rules).\n\n![Sad Gnolls Club](/img/posts/inntober-2021-06-spirit/sad-gnolls-club-04-with-vest.png)\n\nFeaturing [Rufelt](https://thewanderinginn.fandom.com/wiki/Rufelt_Owelt) and [Belavierr](https://thewanderinginn.fandom.com/wiki/Belavierr) from [The Wandering Inn](https://wanderinginn.com/).\n\nMade in [FireAlpaca](https://firealpaca.com/).\n","excerpt":"\n2021 was a busy year for me and this is the only thing I finished for [Inktober](https://inktober.com/rules).\n\n![Sad Gnolls Club](/img/posts/inntober-2021-06-spirit/sad-gnolls-club-04-with-vest.png)\n\nFeaturing [Rufelt](https://thewanderinginn.fandom.com/wiki/Rufelt_Owelt) and [Belavierr](https://th...","serializedContent":{"compiledSource":"var l=Object.defineProperty,f=Object.defineProperties;var u=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;var s=(e,a,n)=>a in e?l(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,r=(e,a)=>{for(var n in a||(a={}))i.call(a,n)&&s(e,n,a[n]);if(p)for(var n of p(a))o.call(a,n)&&s(e,n,a[n]);return e},m=(e,a)=>f(e,u(a));var h=(e,a)=>{var n={};for(var t in e)i.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(e!=null&&p)for(var t of p(e))a.indexOf(t)<0&&o.call(e,t)&&(n[t]=e[t]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:e}=t,a=h(t,[\"components\"]);return mdx(MDXLayout,m(r(r({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"2021 was a busy year for me and this is the only thing I finished for \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://inktober.com/rules\"}),\"Inktober\"),\".\"),mdx(\"p\",null,mdx(\"img\",r({parentName:\"p\"},{src:\"/img/posts/inntober-2021-06-spirit/sad-gnolls-club-04-with-vest.png\",alt:\"Sad Gnolls Club\"}))),mdx(\"p\",null,\"Featuring \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://thewanderinginn.fandom.com/wiki/Rufelt_Owelt\"}),\"Rufelt\"),\" and \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://thewanderinginn.fandom.com/wiki/Belavierr\"}),\"Belavierr\"),\" from \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://wanderinginn.com/\"}),\"The Wandering Inn\"),\".\"),mdx(\"p\",null,\"Made in \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://firealpaca.com/\"}),\"FireAlpaca\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Pirate Fanart","layout":"posts","slug":"pirate-fanart","draft":false,"frontMatter":{"title":"Pirate Fanart","publishedDate":"2021-10-08T02:30:25Z","tags":["Art","Fanart","The Wandering Inn"],"description":"","disableComments":false},"rawContent":"\nFanart of **Pirate**, a character of [Pirateaba](https://thewanderinginn.fandom.com/wiki/Pirateaba).\n\n## The Creation of Pirate\n\n[![The Creation of Pirate](/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba-small.png)](/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba.png)\n\nMade using [Easy Pose](https://store.steampowered.com/app/979710/Easy_Pose/) and [Adobe Photoshop](https://www.adobe.com/products/photoshop.html). Finished on **2021-09-21**.\n\n## Unlimited Bread: Words\n\n[![Unlimited Bread: Words](/img/posts/pirate-fanart/unlimited-bread-words-small.png)](/img/posts/pirate-fanart/unlimited-bread-words.png)\n\nMade using [Easy Pose](https://store.steampowered.com/app/979710/Easy_Pose/) and [Adobe Photoshop](https://www.adobe.com/products/photoshop.html). Finished on **2021-10-05**.\n","excerpt":"\nFanart of **Pirate**, a character of [Pirateaba](https://thewanderinginn.fandom.com/wiki/Pirateaba).\n\n## The Creation of Pirate\n\n[![The Creation of Pirate](/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba-small.png)](/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba.png)\n\nMade usin...","serializedContent":{"compiledSource":"var d=Object.defineProperty,g=Object.defineProperties;var f=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var i=(a,e,t)=>e in a?d(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t,r=(a,e)=>{for(var t in e||(e={}))n.call(e,t)&&i(a,t,e[t]);if(p)for(var t of p(e))s.call(e,t)&&i(a,t,e[t]);return a},m=(a,e)=>g(a,f(e));var h=(a,e)=>{var t={};for(var o in a)n.call(a,o)&&e.indexOf(o)<0&&(t[o]=a[o]);if(a!=null&&p)for(var o of p(a))e.indexOf(o)<0&&s.call(a,o)&&(t[o]=a[o]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var o=t,{components:a}=o,e=h(o,[\"components\"]);return mdx(MDXLayout,m(r(r({},layoutProps),e),{components:a,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Fanart of \",mdx(\"strong\",{parentName:\"p\"},\"Pirate\"),\", a character of \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://thewanderinginn.fandom.com/wiki/Pirateaba\"}),\"Pirateaba\"),\".\"),mdx(\"h2\",r({},{id:\"the-creation-of-pirate\"}),\"The Creation of Pirate\"),mdx(\"p\",null,mdx(\"a\",r({parentName:\"p\"},{href:\"/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba.png\"}),mdx(\"img\",r({parentName:\"a\"},{src:\"/img/posts/pirate-fanart/the-creation-of-pirate-pirateaba-small.png\",alt:\"The Creation of Pirate\"})))),mdx(\"p\",null,\"Made using \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://store.steampowered.com/app/979710/Easy_Pose/\"}),\"Easy Pose\"),\" and \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.adobe.com/products/photoshop.html\"}),\"Adobe Photoshop\"),\". Finished on \",mdx(\"strong\",{parentName:\"p\"},\"2021-09-21\"),\".\"),mdx(\"h2\",r({},{id:\"unlimited-bread-words\"}),\"Unlimited Bread: Words\"),mdx(\"p\",null,mdx(\"a\",r({parentName:\"p\"},{href:\"/img/posts/pirate-fanart/unlimited-bread-words.png\"}),mdx(\"img\",r({parentName:\"a\"},{src:\"/img/posts/pirate-fanart/unlimited-bread-words-small.png\",alt:\"Unlimited Bread: Words\"})))),mdx(\"p\",null,\"Made using \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://store.steampowered.com/app/979710/Easy_Pose/\"}),\"Easy Pose\"),\" and \",mdx(\"a\",r({parentName:\"p\"},{href:\"https://www.adobe.com/products/photoshop.html\"}),\"Adobe Photoshop\"),\". Finished on \",mdx(\"strong\",{parentName:\"p\"},\"2021-10-05\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Create a Remote Web Development Environment Using Linode","layout":"posts","slug":"create-a-remote-web-development-environment-using-linode","draft":false,"frontMatter":{"title":"Create a Remote Web Development Environment Using Linode","publishedDate":"2021-04-09T19:37:00Z","tags":["Linode","Keybase"],"description":"","disableComments":false},"rawContent":"\nIn this guide, we will create our own remote web development environment using [Linode](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d).\n\n## Pre-requisities\n\n- A terminal with Bash or something similar. For Windows, you can use [Windows Terminal](https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701) or [Git Bash](https://git-scm.com/downloads). You can check [my current settings for Windows Terminal](https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md).\n- Your local SSH key pair. See [GitHub's guide](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) for more details.\n- A [GitHub](https://github.com) account.\n- A [Keybase](https://keybase.io/) account for storing your GPG keys.\n- A [Linode account](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d). You can go to their [docs](https://www.linode.com/docs/guides/getting-started/) to get a $100 promo code (or you can directly use [my referral code](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d)).\n- [Visual Studio Code](https://code.visualstudio.com/).\n\n## Generate SSH Key for your local machine\n\nFollow [GitHub's guide](https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) to generate your SSH key pair. For Windows users, you may need to check this [guide from Microsoft](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement) to enable SSH in your machine.\n\nAfterwards, add the key to your GitHub and Linode account.\n\n## Generate SSH Key for your new Linode instance\n\nCreate a new SSH Key for your new Linode instance. Save this for now as we'll use this later.\n\n## Generate GPG Key\n\nFollow this [guide to generate a GPG key using Keybase](https://github.com/pstadler/keybase-gpg-github).\n\n> **NOTE**: For Windows, if you already installed the Keybase app, you should have the CLI app will be ready to use (no need to install via brew).\n\nAgain, you need to add this key to your GitHub account.\n\n## Creating your server instance using Linode's StackScripts\n\n- [ ] Open the [StackScripts](https://cloud.linode.com/stackscripts/account) page and click **Create StackScript**.\n- [ ] Copy the contents of [web.sh](https://github.com/napjoseph/remote/blob/main/linode/web.sh). This will only work on **Debian 10**.\n- [ ] Click **Deploy New Linode**.\n- [ ] Fill out the fields and then click **Create Linode**.\n- [ ] Wait for your instance to be provisioned.\n- [ ] If all goes well, the status will change to **Running** and you can then connect to your instance.\n\nThis should install the following on your instance:\n\n- [x] [zsh](https://www.zsh.org/), [oh-my-zsh](https://ohmyz.sh/), [powerlevel10k](https://github.com/romkatv/powerlevel10k), [zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions), and [zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n- [x] [Keybase](https://keybase.io)\n- [x] [Go](https://golang.org/)\n- [x] [Node Version Manager](https://github.com/nvm-sh/nvm)\n- [x] [pyenv](https://github.com/pyenv/pyenv)\n- [x] [Docker](https://www.docker.com/)\n- [x] [byobu](https://byobu.org)\n- [x] [spacevim](https://spacevim.org)\n- [x] [bat](https://github.com/sharkdp/bat)\n- [x] [direnv](https://github.com/direnv/direnv)\n- [x] [stow](https://www.gnu.org/software/stow)\n- [x] [Homebrew](https://brew.sh)\n\n## Connecting via SSH\n\nStart the ssh-agent in the background:\n\n```shell note=for%20linux/osx:\n$ eval `ssh-agent -s`\n> Agent pid 59566\n```\n\n```powershell note=for%20windows:\nStart-Service ssh-agent\n```\n\nAdd your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.\n\n```shell\nssh-add ~/.ssh/id_ed25519\n```\n\nThen connect via SSH:\n\n```shell\nssh <NON_ROOT_USERNAME>@<LINODE_IPV4_ADDRESS> -p <SSH_PORT>\n```\n\nAlternatively, you can create a config file to make it easier to connect to your remote host.\n\n```text filename=~/.ssh/config\nHost <ALIAS>\n  User <NON_ROOT_USERNAME>\n  HostName <LINODE_IPV4_ADDRESS>\n  Port <SSH_PORT>\n  IdentityFile <PRIVATE_KEY_FILE_LOCATION>\n```\n\n```shell\nssh <ALIAS>\n```\n\nCongratulations! You can now connect to your remote server instance.\n\n> **NOTE**: You can already connect via SSH even if the StackScript has not yet been completed. To check its status, you can check the logs using `cat /var/log/stackscript.log`.\n\n## Additional setup\n\nThe essentials are already installed in your instance. However, we need to configure a few applications we will use.\n\n### Configuring your zsh theme\n\n> **IMPORTANT**: You also need to install the [recommended fonts](https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k) for the theme to display properly.\n\n> **IMPORTANT**: If you are using Windows, you can use [Windows Terminal](https://microsoft.com/en-us/p/windows-terminal/9n0dx20hk701). You can check [my current settings for Windows Terminal](https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md).\n\nIf you enabled `UPGRADE_SHELL_EXPERIENCE`, [zsh](https://www.zsh.org/), [oh-my-zsh](https://ohmyz.sh/), and the [powerlevel10k zsh theme](https://github.com/romkatv/powerlevel10k) will be installed.\n\nOn your first login via SSH, it will ask you to configure your theme. To run the wizard again, you can run:\n\n```shell\np10k configure\n```\n\n### Fixing your SSH Private Key\n\nDue to StackScripts not yet having a multiple-line UDF, the line breaks for our private key was removed.\n\nUpdate the `.ssh/$HOSTNAME` with the correct version.\n\n### Configure Keybase\n\n```shell\n# login\nkeybase login\n\n# check if you have more than one key saved\nkeybase pgp export\n\n# if yes, specify the id in the commands below\n# keybase pgp export -q 31DBBB1F6949DA68 | gpg --import\n\n# import public key\nkeybase pgp export | gpg --import\n\n# import private key\nkeybase pgp export --secret | gpg --allow-secret-key-import --import\n\n# check imported key\ngpg --list-secret-keys --keyid-format LONG\n# /Users/pstadler/.gnupg/secring.gpg\n# ----------------------------------\n# pub   2048R/DEADBEEF 2012-08-16\n# uid                  Name (Comment) <email@host.tld>\n# sub   2048R/86D2FAC6 2012-08-16\n```\n\nNotice the hash `DEADBEEF`. We will use this in the next section.\n\n### Configure Git\n\n```shell\n# add your basic information\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_name@example.com\"\n\n# sign all commits using your GPG key\ngit config --global user.signingkey DEADBEEF\ngit config --global commit.gpgsign true\n```\n\n## Repository\n\nYou can check the [`napjoseph/remote` repository](https://github.com/napjoseph/remote/) for the updated code.\n","excerpt":"\nIn this guide, we will create our own remote web development environment using [Linode](https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d).\n\n## Pre-requisities\n\n- A terminal with Bash or something similar. For Windows, you can use [Windows Terminal](https://www.microsoft.com/en-us/...","serializedContent":{"compiledSource":"var h=Object.defineProperty,u=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var l=(t,a,i)=>a in t?h(t,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[a]=i,e=(t,a)=>{for(var i in a||(a={}))r.call(a,i)&&l(t,i,a[i]);if(o)for(var i of o(a))s.call(a,i)&&l(t,i,a[i]);return t},p=(t,a)=>u(t,m(a));var c=(t,a)=>{var i={};for(var n in t)r.call(t,n)&&a.indexOf(n)<0&&(i[n]=t[n]);if(t!=null&&o)for(var n of o(t))a.indexOf(n)<0&&s.call(t,n)&&(i[n]=t[n]);return i};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(i){var n=i,{components:t}=n,a=c(n,[\"components\"]);return mdx(MDXLayout,p(e(e({},layoutProps),a),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"In this guide, we will create our own remote web development environment using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"Linode\"),\".\"),mdx(\"h2\",e({},{id:\"pre-requisities\"}),\"Pre-requisities\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"A terminal with Bash or something similar. For Windows, you can use \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\"}),\"Windows Terminal\"),\" or \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://git-scm.com/downloads\"}),\"Git Bash\"),\". You can check \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md\"}),\"my current settings for Windows Terminal\"),\".\"),mdx(\"li\",{parentName:\"ul\"},\"Your local SSH key pair. See \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\"}),\"GitHub's guide\"),\" for more details.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com\"}),\"GitHub\"),\" account.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://keybase.io/\"}),\"Keybase\"),\" account for storing your GPG keys.\"),mdx(\"li\",{parentName:\"ul\"},\"A \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"Linode account\"),\". You can go to their \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/docs/guides/getting-started/\"}),\"docs\"),\" to get a $100 promo code (or you can directly use \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.linode.com/?r=b042b8d928111627044d292bdbca3691c536bf8d\"}),\"my referral code\"),\").\"),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",e({parentName:\"li\"},{href:\"https://code.visualstudio.com/\"}),\"Visual Studio Code\"),\".\")),mdx(\"h2\",e({},{id:\"generate-ssh-key-for-your-local-machine\"}),\"Generate SSH Key for your local machine\"),mdx(\"p\",null,\"Follow \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\"}),\"GitHub's guide\"),\" to generate your SSH key pair. For Windows users, you may need to check this \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_keymanagement\"}),\"guide from Microsoft\"),\" to enable SSH in your machine.\"),mdx(\"p\",null,\"Afterwards, add the key to your GitHub and Linode account.\"),mdx(\"h2\",e({},{id:\"generate-ssh-key-for-your-new-linode-instance\"}),\"Generate SSH Key for your new Linode instance\"),mdx(\"p\",null,\"Create a new SSH Key for your new Linode instance. Save this for now as we'll use this later.\"),mdx(\"h2\",e({},{id:\"generate-gpg-key\"}),\"Generate GPG Key\"),mdx(\"p\",null,\"Follow this \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/pstadler/keybase-gpg-github\"}),\"guide to generate a GPG key using Keybase\"),\".\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": For Windows, if you already installed the Keybase app, you should have the CLI app will be ready to use (no need to install via brew).\")),mdx(\"p\",null,\"Again, you need to add this key to your GitHub account.\"),mdx(\"h2\",e({},{id:\"creating-your-server-instance-using-linodes-stackscripts\"}),\"Creating your server instance using Linode's StackScripts\"),mdx(\"ul\",e({},{className:\"contains-task-list\"}),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Open the \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://cloud.linode.com/stackscripts/account\"}),\"StackScripts\"),\" page and click \",mdx(\"strong\",{parentName:\"li\"},\"Create StackScript\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Copy the contents of \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/napjoseph/remote/blob/main/linode/web.sh\"}),\"web.sh\"),\". This will only work on \",mdx(\"strong\",{parentName:\"li\"},\"Debian 10\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Click \",mdx(\"strong\",{parentName:\"li\"},\"Deploy New Linode\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Fill out the fields and then click \",mdx(\"strong\",{parentName:\"li\"},\"Create Linode\"),\".\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"Wait for your instance to be provisioned.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!1,disabled:!0})),\" \",\"If all goes well, the status will change to \",mdx(\"strong\",{parentName:\"li\"},\"Running\"),\" and you can then connect to your instance.\")),mdx(\"p\",null,\"This should install the following on your instance:\"),mdx(\"ul\",e({},{className:\"contains-task-list\"}),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.zsh.org/\"}),\"zsh\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://ohmyz.sh/\"}),\"oh-my-zsh\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/romkatv/powerlevel10k\"}),\"powerlevel10k\"),\", \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/zsh-users/zsh-autosuggestions\"}),\"zsh-autosuggestions\"),\", and \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/zsh-users/zsh-syntax-highlighting\"}),\"zsh-syntax-highlighting\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://keybase.io\"}),\"Keybase\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://golang.org/\"}),\"Go\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/nvm-sh/nvm\"}),\"Node Version Manager\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/pyenv/pyenv\"}),\"pyenv\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.docker.com/\"}),\"Docker\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://byobu.org\"}),\"byobu\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://spacevim.org\"}),\"spacevim\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/sharkdp/bat\"}),\"bat\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://github.com/direnv/direnv\"}),\"direnv\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.gnu.org/software/stow\"}),\"stow\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"task-list-item\"}),mdx(\"input\",e({parentName:\"li\"},{type:\"checkbox\",checked:!0,disabled:!0})),\" \",mdx(\"a\",e({parentName:\"li\"},{href:\"https://brew.sh\"}),\"Homebrew\"))),mdx(\"h2\",e({},{id:\"connecting-via-ssh\"}),\"Connecting via SSH\"),mdx(\"p\",null,\"Start the ssh-agent in the background:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\",metastring:\"note=for%20linux/osx:\",note:\"for%20linux/osx:\"}),\"$ eval `ssh-agent -s`\\n> Agent pid 59566\\n\")),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-powershell\",metastring:\"note=for%20windows:\",note:\"for%20windows:\"}),`Start-Service ssh-agent\n`)),mdx(\"p\",null,\"Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh-add ~/.ssh/id_ed25519\n`)),mdx(\"p\",null,\"Then connect via SSH:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh <NON_ROOT_USERNAME>@<LINODE_IPV4_ADDRESS> -p <SSH_PORT>\n`)),mdx(\"p\",null,\"Alternatively, you can create a config file to make it easier to connect to your remote host.\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-text\",metastring:\"filename=~/.ssh/config\",filename:\"~/.ssh/config\"}),`Host <ALIAS>\n  User <NON_ROOT_USERNAME>\n  HostName <LINODE_IPV4_ADDRESS>\n  Port <SSH_PORT>\n  IdentityFile <PRIVATE_KEY_FILE_LOCATION>\n`)),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`ssh <ALIAS>\n`)),mdx(\"p\",null,\"Congratulations! You can now connect to your remote server instance.\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"NOTE\"),\": You can already connect via SSH even if the StackScript has not yet been completed. To check its status, you can check the logs using \",mdx(\"inlineCode\",{parentName:\"p\"},\"cat /var/log/stackscript.log\"),\".\")),mdx(\"h2\",e({},{id:\"additional-setup\"}),\"Additional setup\"),mdx(\"p\",null,\"The essentials are already installed in your instance. However, we need to configure a few applications we will use.\"),mdx(\"h3\",e({},{id:\"configuring-your-zsh-theme\"}),\"Configuring your zsh theme\"),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"IMPORTANT\"),\": You also need to install the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k\"}),\"recommended fonts\"),\" for the theme to display properly.\")),mdx(\"blockquote\",null,mdx(\"p\",{parentName:\"blockquote\"},mdx(\"strong\",{parentName:\"p\"},\"IMPORTANT\"),\": If you are using Windows, you can use \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://microsoft.com/en-us/p/windows-terminal/9n0dx20hk701\"}),\"Windows Terminal\"),\". You can check \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/napjoseph/remote/blob/main/windows/terminal/settings.md\"}),\"my current settings for Windows Terminal\"),\".\")),mdx(\"p\",null,\"If you enabled \",mdx(\"inlineCode\",{parentName:\"p\"},\"UPGRADE_SHELL_EXPERIENCE\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.zsh.org/\"}),\"zsh\"),\", \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://ohmyz.sh/\"}),\"oh-my-zsh\"),\", and the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/romkatv/powerlevel10k\"}),\"powerlevel10k zsh theme\"),\" will be installed.\"),mdx(\"p\",null,\"On your first login via SSH, it will ask you to configure your theme. To run the wizard again, you can run:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`p10k configure\n`)),mdx(\"h3\",e({},{id:\"fixing-your-ssh-private-key\"}),\"Fixing your SSH Private Key\"),mdx(\"p\",null,\"Due to StackScripts not yet having a multiple-line UDF, the line breaks for our private key was removed.\"),mdx(\"p\",null,\"Update the \",mdx(\"inlineCode\",{parentName:\"p\"},\".ssh/$HOSTNAME\"),\" with the correct version.\"),mdx(\"h3\",e({},{id:\"configure-keybase\"}),\"Configure Keybase\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`# login\nkeybase login\n\n# check if you have more than one key saved\nkeybase pgp export\n\n# if yes, specify the id in the commands below\n# keybase pgp export -q 31DBBB1F6949DA68 | gpg --import\n\n# import public key\nkeybase pgp export | gpg --import\n\n# import private key\nkeybase pgp export --secret | gpg --allow-secret-key-import --import\n\n# check imported key\ngpg --list-secret-keys --keyid-format LONG\n# /Users/pstadler/.gnupg/secring.gpg\n# ----------------------------------\n# pub   2048R/DEADBEEF 2012-08-16\n# uid                  Name (Comment) <email@host.tld>\n# sub   2048R/86D2FAC6 2012-08-16\n`)),mdx(\"p\",null,\"Notice the hash \",mdx(\"inlineCode\",{parentName:\"p\"},\"DEADBEEF\"),\". We will use this in the next section.\"),mdx(\"h3\",e({},{id:\"configure-git\"}),\"Configure Git\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell\"}),`# add your basic information\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"your_name@example.com\"\n\n# sign all commits using your GPG key\ngit config --global user.signingkey DEADBEEF\ngit config --global commit.gpgsign true\n`)),mdx(\"h2\",e({},{id:\"repository\"}),\"Repository\"),mdx(\"p\",null,\"You can check the \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/napjoseph/remote/\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"napjoseph/remote\"),\" repository\"),\" for the updated code.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Using Hugo on Gitpod","layout":"posts","slug":"using-hugo-on-gitpod","draft":false,"frontMatter":{"title":"Using Hugo on Gitpod","publishedDate":"2020-07-31T13:15:13Z","tags":["Hugo","Gitpod"],"description":"","disableComments":false},"rawContent":"\nCreate the necessary [Gitpod](https://www.gitpod.io/) files on the root of your repository.\n\n```bash\n$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n```\n\n```dockerfile filename=.gitpod.Dockerfile\nFROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n```\n\n```yaml filename=.gitpod.yml\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - command: 'hugo server --baseUrl $(gp url 1313) --appendPort=false'\n\nports:\n  - port: 1313\n    onOpen: open-preview\n```\n\nAfter commiting and merging your code, you can then go to `https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>` to start your Gitpod workspace.\n\nOptionally, you can also add a Gitpod badge on your `README` file:\n\n```markdown filename=README.md\n[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>)\n```\n\n#### Sources\n\nSetup configuration was copied from [esttech/theia-dev-conf](https://github.com/esttech/theia-dev-conf/).\n","excerpt":"\nCreate the necessary [Gitpod](https://www.gitpod.io/) files on the root of your repository.\n\n```bash\n$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n```\n\n```dockerfile filename=.gitpod.Dockerfile\nFROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n```\n\n```yaml filen...","serializedContent":{"compiledSource":"var l=Object.defineProperty,m=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;var d=(e,o,t)=>o in e?l(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,p=(e,o)=>{for(var t in o||(o={}))r.call(o,t)&&d(e,t,o[t]);if(i)for(var t of i(o))n.call(o,t)&&d(e,t,o[t]);return e},s=(e,o)=>m(e,g(o));var c=(e,o)=>{var t={};for(var a in e)r.call(e,a)&&o.indexOf(a)<0&&(t[a]=e[a]);if(e!=null&&i)for(var a of i(e))o.indexOf(a)<0&&n.call(e,a)&&(t[a]=e[a]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var a=t,{components:e}=a,o=c(a,[\"components\"]);return mdx(MDXLayout,s(p(p({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Create the necessary \",mdx(\"a\",p({parentName:\"p\"},{href:\"https://www.gitpod.io/\"}),\"Gitpod\"),\" files on the root of your repository.\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-bash\"}),`$ touch .gitpod.Dockerfile\n$ touch .gitpod.yml\n`)),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-dockerfile\",metastring:\"filename=.gitpod.Dockerfile\",filename:\".gitpod.Dockerfile\"}),`FROM gitpod/workspace-full\n\nUSER root\n\nRUN apt-get update && apt-get install -yq hugo\n`)),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.gitpod.yml\",filename:\".gitpod.yml\"}),`image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - command: 'hugo server --baseUrl $(gp url 1313) --appendPort=false'\n\nports:\n  - port: 1313\n    onOpen: open-preview\n`)),mdx(\"p\",null,\"After commiting and merging your code, you can then go to \",mdx(\"inlineCode\",{parentName:\"p\"},\"https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>\"),\" to start your Gitpod workspace.\"),mdx(\"p\",null,\"Optionally, you can also add a Gitpod badge on your \",mdx(\"inlineCode\",{parentName:\"p\"},\"README\"),\" file:\"),mdx(\"pre\",null,mdx(\"code\",p({parentName:\"pre\"},{className:\"language-markdown\",metastring:\"filename=README.md\",filename:\"README.md\"}),`[![Gitpod ready-to-code](https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/<YOUR_USERNAME>/<YOUR_REPO_NAME>)\n`)),mdx(\"h4\",p({},{id:\"sources\"}),\"Sources\"),mdx(\"p\",null,\"Setup configuration was copied from \",mdx(\"a\",p({parentName:\"p\"},{href:\"https://github.com/esttech/theia-dev-conf/\"}),\"esttech/theia-dev-conf\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},{"title":"Deploy Hugo Site Using GitHub Actions","layout":"posts","slug":"deploy-hugo-site-using-github-actions","draft":false,"frontMatter":{"title":"Deploy Hugo Site Using GitHub Actions","publishedDate":"2020-06-28T03:02:37+08:00","tags":["Hugo","GitHub Actions"],"description":"","disableComments":false},"rawContent":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.com/napjoseph/napjoseph.github.io/).\n\nSince this is an\n[Organization Pages-type repository](https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites),\nwe will be using following branches for our workflow:\n\n```bash\n$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n```\n\n### Add your Deploy Key\n\nFollow the tutorial over at\n[peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key)\nand add an SSH deploy key for your project.\n\n### Create your GitHub Action\n\nAfterwards, create a directory for your workflows and add the config file for\nyour new action.\n\n```bash\n$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n```\n\n```yaml filename=.github/workflows/deploy.yml\nname: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n```\n\n### Deployment\n\nAfter merging your pull requests to the `stable` branch, it should automatically\ndeploy to the `master` branch.\n","excerpt":"\nAfter creating a new project using\n[Hugo's Quick Start guide](https://gohugo.io/getting-started/quick-start/), you\ncan then deploy to [GitHub Pages](https://pages.github.com/).\n\n### Git Branches\n\nFor this site, we are deploying the project hosted at\n[napjoseph/napjoseph.github.io](https://github.co...","serializedContent":{"compiledSource":"var l=Object.defineProperty,c=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable;var n=(e,t,a)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,o=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&n(e,a,t[a]);if(i)for(var a of i(t))p.call(t,a)&&n(e,a,t[a]);return e},u=(e,t)=>c(e,d(t));var h=(e,t)=>{var a={};for(var r in e)s.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(e!=null&&i)for(var r of i(e))t.indexOf(r)<0&&p.call(e,r)&&(a[r]=e[r]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var r=a,{components:e}=r,t=h(r,[\"components\"]);return mdx(MDXLayout,u(o(o({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,`After creating a new project using\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://gohugo.io/getting-started/quick-start/\"}),\"Hugo's Quick Start guide\"),`, you\ncan then deploy to `,mdx(\"a\",o({parentName:\"p\"},{href:\"https://pages.github.com/\"}),\"GitHub Pages\"),\".\"),mdx(\"h3\",o({},{id:\"git-branches\"}),\"Git Branches\"),mdx(\"p\",null,`For this site, we are deploying the project hosted at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/napjoseph/napjoseph.github.io/\"}),\"napjoseph/napjoseph.github.io\"),\".\"),mdx(\"p\",null,`Since this is an\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://docs.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites\"}),\"Organization Pages-type repository\"),`,\nwe will be using following branches for our workflow:`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ git branch\nmaster           # the branch that GitHub pages will serve the files from\nstable           # the main development branch where all pull requests will be merged to\nid_your_feature  # additional development branches for new features\n`)),mdx(\"h3\",o({},{id:\"add-your-deploy-key\"}),\"Add your Deploy Key\"),mdx(\"p\",null,`Follow the tutorial over at\n`,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key\"}),\"peaceiris/actions-gh-pages\"),`\nand add an SSH deploy key for your project.`),mdx(\"h3\",o({},{id:\"create-your-github-action\"}),\"Create your GitHub Action\"),mdx(\"p\",null,`Afterwards, create a directory for your workflows and add the config file for\nyour new action.`),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-bash\"}),`$ mkdir -p .github/workflows\n$ touch .github/workflows/deploy.yml\n`)),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-yaml\",metastring:\"filename=.github/workflows/deploy.yml\",filename:\".github/workflows/deploy.yml\"}),`name: deploy-to-master\n\non:\n  push:\n    branches:\n      - stable\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          persist-credentials: false\n\n      - name: Update theme\n        run: git submodule update --init --recursive\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: '0.74.3'\n\n      - name: Build\n        run: HUGO_ENV=production hugo --minify\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          deploy_key: \\${{ secrets.ACTIONS_DEPLOY_KEY }}\n          publish_dir: ./public\n          publish_branch: master\n          keep_files: false\n          allow_empty_commit: true\n`)),mdx(\"h3\",o({},{id:\"deployment\"}),\"Deployment\"),mdx(\"p\",null,\"After merging your pull requests to the \",mdx(\"inlineCode\",{parentName:\"p\"},\"stable\"),` branch, it should automatically\ndeploy to the `,mdx(\"inlineCode\",{parentName:\"p\"},\"master\"),\" branch.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}}]},"__N_SSG":true}